/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import { AnimationEaseMode, Font, ChartsColor, Palette, PaletteExtensionMode, LabelOverlap, Theme, TextOverflow, WordWrap, DashStyle } from 'devextreme/common/charts';
import { ExportFormat, Orientation, HorizontalAlignment, VerticalAlignment, VerticalEdge } from 'devextreme/common';
import { DisposingEvent, DrawnEvent, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, OptionChangedEvent, TooltipHiddenEvent, TooltipShownEvent } from 'devextreme/viz/linear_gauge';
import { Format } from 'devextreme/common/core/localization';
import { GaugeIndicator } from 'devextreme/viz/gauges/base_gauge';
import DxLinearGauge from 'devextreme/viz/linear_gauge';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import type * as DxLinearGaugeTypes from "devextreme/viz/linear_gauge_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/ui/linear-gauge/nested";
import * as i3 from "devextreme-angular/core";
/**
 * The LinearGauge is a UI component that indicates values on a linear numeric scale.

 */
export declare class DxLinearGaugeComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxLinearGauge;
    /**
     * Specifies animation properties.
    
     */
    get animation(): {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
    };
    set animation(value: {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
    });
    /**
     * Specifies the color of the parent page element.
    
     */
    get containerBackgroundColor(): string;
    set containerBackgroundColor(value: string);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): Record<string, any>;
    set elementAttr(value: Record<string, any>);
    /**
     * Configures the exporting and printing features.
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: ((svg: any, canvas: any) => any) | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: ((svg: any, canvas: any) => any) | undefined;
    });
    /**
     * Specifies the properties required to set the geometry of the LinearGauge UI component.
    
     */
    get geometry(): {
        orientation?: Orientation;
    };
    set geometry(value: {
        orientation?: Orientation;
    });
    /**
     * Configures the loading indicator.
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * Generates space around the UI component.
    
     */
    get margin(): {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    set margin(value: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    });
    /**
     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * Specifies gauge range container properties.
    
     */
    get rangeContainer(): {
        backgroundColor?: ChartsColor | string;
        horizontalOrientation?: HorizontalAlignment;
        offset?: number;
        palette?: Array<string> | Palette;
        paletteExtensionMode?: PaletteExtensionMode;
        ranges?: {
            color?: ChartsColor | string;
            endValue?: number;
            startValue?: number;
        }[];
        verticalOrientation?: VerticalAlignment;
        width?: number | {
            end?: number;
            start?: number;
        };
    };
    set rangeContainer(value: {
        backgroundColor?: ChartsColor | string;
        horizontalOrientation?: HorizontalAlignment;
        offset?: number;
        palette?: Array<string> | Palette;
        paletteExtensionMode?: PaletteExtensionMode;
        ranges?: {
            color?: ChartsColor | string;
            endValue?: number;
            startValue?: number;
        }[];
        verticalOrientation?: VerticalAlignment;
        width?: number | {
            end?: number;
            start?: number;
        };
    });
    /**
     * Specifies whether to redraw the UI component when the size of the container changes or a mobile device rotates.
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies the gauge&apos;s scale properties.
    
     */
    get scale(): {
        allowDecimals?: boolean | undefined;
        customMinorTicks?: Array<number>;
        customTicks?: Array<number>;
        endValue?: number;
        horizontalOrientation?: HorizontalAlignment;
        label?: {
            customizeText?: ((scaleValue: {
                value: number;
                valueText: string;
            }) => string);
            font?: Font;
            format?: Format | undefined;
            indentFromTick?: number;
            overlappingBehavior?: LabelOverlap;
            useRangeColors?: boolean;
            visible?: boolean;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickInterval?: number | undefined;
        scaleDivisionFactor?: number;
        startValue?: number;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | undefined;
        verticalOrientation?: VerticalAlignment;
    };
    set scale(value: {
        allowDecimals?: boolean | undefined;
        customMinorTicks?: Array<number>;
        customTicks?: Array<number>;
        endValue?: number;
        horizontalOrientation?: HorizontalAlignment;
        label?: {
            customizeText?: ((scaleValue: {
                value: number;
                valueText: string;
            }) => string);
            font?: Font;
            format?: Format | undefined;
            indentFromTick?: number;
            overlappingBehavior?: LabelOverlap;
            useRangeColors?: boolean;
            visible?: boolean;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickInterval?: number | undefined;
        scaleDivisionFactor?: number;
        startValue?: number;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | undefined;
        verticalOrientation?: VerticalAlignment;
    });
    /**
     * Specifies the UI component&apos;s size in pixels.
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * Specifies the appearance properties of subvalue indicators.
    
     */
    get subvalueIndicator(): GaugeIndicator | {
        type?: "rectangle" | "circle" | "rhombus" | "rangeBar" | "triangleMarker" | "textCloud";
    };
    set subvalueIndicator(value: GaugeIndicator | {
        type?: "rectangle" | "circle" | "rhombus" | "rangeBar" | "triangleMarker" | "textCloud";
    });
    /**
     * Specifies a set of subvalues to be designated by the subvalue indicators.
    
     */
    get subvalues(): Array<number>;
    set subvalues(value: Array<number>);
    /**
     * Sets the name of the theme the UI component uses.
    
     */
    get theme(): Theme;
    set theme(value: Theme);
    /**
     * Configures the UI component&apos;s title.
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    });
    /**
     * Configures tooltips.
    
     */
    get tooltip(): {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: any | string | undefined;
        contentTemplate?: any;
        cornerRadius?: number;
        customizeTooltip?: ((scaleValue: {
            value: number;
            valueText: string;
        }) => Record<string, any>) | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    };
    set tooltip(value: {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: any | string | undefined;
        contentTemplate?: any;
        cornerRadius?: number;
        customizeTooltip?: ((scaleValue: {
            value: number;
            valueText: string;
        }) => Record<string, any>) | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    });
    /**
     * Specifies the main value on a gauge.
    
     */
    get value(): number | undefined;
    set value(value: number | undefined);
    /**
     * Specifies the appearance properties of the value indicator.
    
     */
    get valueIndicator(): GaugeIndicator | {
        type?: "rectangle" | "circle" | "rhombus" | "rangeBar" | "triangleMarker" | "textCloud";
    };
    set valueIndicator(value: GaugeIndicator | {
        type?: "rectangle" | "circle" | "rhombus" | "rangeBar" | "triangleMarker" | "textCloud";
    });
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function that is executed when the UI component&apos;s rendering has finished.
    
    
     */
    onDrawn: EventEmitter<DrawnEvent>;
    /**
    
     * A function that is executed after the UI component is exported.
    
    
     */
    onExported: EventEmitter<ExportedEvent>;
    /**
    
     * A function that is executed before the UI component is exported.
    
    
     */
    onExporting: EventEmitter<ExportingEvent>;
    /**
    
     * A function that is executed before a file with exported UI component is saved to the user&apos;s local storage.
    
    
     */
    onFileSaving: EventEmitter<FileSavingEvent>;
    /**
    
     * A function that is executed when an error or warning occurs.
    
    
     */
    onIncidentOccurred: EventEmitter<IncidentOccurredEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is executed when a tooltip becomes hidden.
    
    
     */
    onTooltipHidden: EventEmitter<TooltipHiddenEvent>;
    /**
    
     * A function that is executed when a tooltip appears.
    
    
     */
    onTooltipShown: EventEmitter<TooltipShownEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<{
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerBackgroundColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<Record<string, any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: ((svg: any, canvas: any) => any) | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    geometryChange: EventEmitter<{
        orientation?: Orientation;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rangeContainerChange: EventEmitter<{
        backgroundColor?: ChartsColor | string;
        horizontalOrientation?: HorizontalAlignment;
        offset?: number;
        palette?: Array<string> | Palette;
        paletteExtensionMode?: PaletteExtensionMode;
        ranges?: {
            color?: ChartsColor | string;
            endValue?: number;
            startValue?: number;
        }[];
        verticalOrientation?: VerticalAlignment;
        width?: number | {
            end?: number;
            start?: number;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scaleChange: EventEmitter<{
        allowDecimals?: boolean | undefined;
        customMinorTicks?: Array<number>;
        customTicks?: Array<number>;
        endValue?: number;
        horizontalOrientation?: HorizontalAlignment;
        label?: {
            customizeText?: ((scaleValue: {
                value: number;
                valueText: string;
            }) => string);
            font?: Font;
            format?: Format | undefined;
            indentFromTick?: number;
            overlappingBehavior?: LabelOverlap;
            useRangeColors?: boolean;
            visible?: boolean;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickInterval?: number | undefined;
        scaleDivisionFactor?: number;
        startValue?: number;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | undefined;
        verticalOrientation?: VerticalAlignment;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    subvalueIndicatorChange: EventEmitter<GaugeIndicator | {
        type?: "rectangle" | "circle" | "rhombus" | "rangeBar" | "triangleMarker" | "textCloud";
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    subvaluesChange: EventEmitter<Array<number>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<Theme>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: any | string | undefined;
        contentTemplate?: any;
        cornerRadius?: number;
        customizeTooltip?: ((scaleValue: {
            value: number;
            valueText: string;
        }) => Record<string, any>) | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueIndicatorChange: EventEmitter<GaugeIndicator | {
        type?: "rectangle" | "circle" | "rhombus" | "rangeBar" | "triangleMarker" | "textCloud";
    }>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxLinearGauge;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxLinearGaugeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxLinearGaugeComponent, "dx-linear-gauge", never, { "animation": { "alias": "animation"; "required": false; }; "containerBackgroundColor": { "alias": "containerBackgroundColor"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "export": { "alias": "export"; "required": false; }; "geometry": { "alias": "geometry"; "required": false; }; "loadingIndicator": { "alias": "loadingIndicator"; "required": false; }; "margin": { "alias": "margin"; "required": false; }; "pathModified": { "alias": "pathModified"; "required": false; }; "rangeContainer": { "alias": "rangeContainer"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "scale": { "alias": "scale"; "required": false; }; "size": { "alias": "size"; "required": false; }; "subvalueIndicator": { "alias": "subvalueIndicator"; "required": false; }; "subvalues": { "alias": "subvalues"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "title": { "alias": "title"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "value": { "alias": "value"; "required": false; }; "valueIndicator": { "alias": "valueIndicator"; "required": false; }; }, { "onDisposing": "onDisposing"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onTooltipHidden": "onTooltipHidden"; "onTooltipShown": "onTooltipShown"; "animationChange": "animationChange"; "containerBackgroundColorChange": "containerBackgroundColorChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "geometryChange": "geometryChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "marginChange": "marginChange"; "pathModifiedChange": "pathModifiedChange"; "rangeContainerChange": "rangeContainerChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "rtlEnabledChange": "rtlEnabledChange"; "scaleChange": "scaleChange"; "sizeChange": "sizeChange"; "subvalueIndicatorChange": "subvalueIndicatorChange"; "subvaluesChange": "subvaluesChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "valueChange": "valueChange"; "valueIndicatorChange": "valueIndicatorChange"; }, never, never, false, never>;
}
export declare class DxLinearGaugeModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxLinearGaugeModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxLinearGaugeModule, [typeof DxLinearGaugeComponent], [typeof i1.DxoAnimationModule, typeof i1.DxoExportModule, typeof i1.DxoGeometryModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoFontModule, typeof i1.DxoMarginModule, typeof i1.DxoRangeContainerModule, typeof i1.DxoBackgroundColorModule, typeof i1.DxiRangeModule, typeof i1.DxoColorModule, typeof i1.DxoWidthModule, typeof i1.DxoScaleModule, typeof i1.DxoLabelModule, typeof i1.DxoFormatModule, typeof i1.DxoMinorTickModule, typeof i1.DxoTickModule, typeof i1.DxoSizeModule, typeof i1.DxoSubvalueIndicatorModule, typeof i1.DxoTextModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoBorderModule, typeof i1.DxoShadowModule, typeof i1.DxoValueIndicatorModule, typeof i2.DxoLinearGaugeAnimationModule, typeof i2.DxoLinearGaugeBackgroundColorModule, typeof i2.DxoLinearGaugeBorderModule, typeof i2.DxoLinearGaugeColorModule, typeof i2.DxoLinearGaugeExportModule, typeof i2.DxoLinearGaugeFontModule, typeof i2.DxoLinearGaugeFormatModule, typeof i2.DxoLinearGaugeGeometryModule, typeof i2.DxoLinearGaugeLabelModule, typeof i2.DxoLinearGaugeLoadingIndicatorModule, typeof i2.DxoLinearGaugeMarginModule, typeof i2.DxoLinearGaugeMinorTickModule, typeof i2.DxiLinearGaugeRangeModule, typeof i2.DxoLinearGaugeRangeContainerModule, typeof i2.DxoLinearGaugeScaleModule, typeof i2.DxoLinearGaugeShadowModule, typeof i2.DxoLinearGaugeSizeModule, typeof i2.DxoLinearGaugeSubtitleModule, typeof i2.DxoLinearGaugeSubvalueIndicatorModule, typeof i2.DxoLinearGaugeTextModule, typeof i2.DxoLinearGaugeTickModule, typeof i2.DxoLinearGaugeTitleModule, typeof i2.DxoLinearGaugeTooltipModule, typeof i2.DxoLinearGaugeValueIndicatorModule, typeof i2.DxoLinearGaugeWidthModule, typeof i3.DxIntegrationModule, typeof i3.DxTemplateModule], [typeof DxLinearGaugeComponent, typeof i1.DxoAnimationModule, typeof i1.DxoExportModule, typeof i1.DxoGeometryModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoFontModule, typeof i1.DxoMarginModule, typeof i1.DxoRangeContainerModule, typeof i1.DxoBackgroundColorModule, typeof i1.DxiRangeModule, typeof i1.DxoColorModule, typeof i1.DxoWidthModule, typeof i1.DxoScaleModule, typeof i1.DxoLabelModule, typeof i1.DxoFormatModule, typeof i1.DxoMinorTickModule, typeof i1.DxoTickModule, typeof i1.DxoSizeModule, typeof i1.DxoSubvalueIndicatorModule, typeof i1.DxoTextModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoBorderModule, typeof i1.DxoShadowModule, typeof i1.DxoValueIndicatorModule, typeof i2.DxoLinearGaugeAnimationModule, typeof i2.DxoLinearGaugeBackgroundColorModule, typeof i2.DxoLinearGaugeBorderModule, typeof i2.DxoLinearGaugeColorModule, typeof i2.DxoLinearGaugeExportModule, typeof i2.DxoLinearGaugeFontModule, typeof i2.DxoLinearGaugeFormatModule, typeof i2.DxoLinearGaugeGeometryModule, typeof i2.DxoLinearGaugeLabelModule, typeof i2.DxoLinearGaugeLoadingIndicatorModule, typeof i2.DxoLinearGaugeMarginModule, typeof i2.DxoLinearGaugeMinorTickModule, typeof i2.DxiLinearGaugeRangeModule, typeof i2.DxoLinearGaugeRangeContainerModule, typeof i2.DxoLinearGaugeScaleModule, typeof i2.DxoLinearGaugeShadowModule, typeof i2.DxoLinearGaugeSizeModule, typeof i2.DxoLinearGaugeSubtitleModule, typeof i2.DxoLinearGaugeSubvalueIndicatorModule, typeof i2.DxoLinearGaugeTextModule, typeof i2.DxoLinearGaugeTickModule, typeof i2.DxoLinearGaugeTitleModule, typeof i2.DxoLinearGaugeTooltipModule, typeof i2.DxoLinearGaugeValueIndicatorModule, typeof i2.DxoLinearGaugeWidthModule, typeof i3.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxLinearGaugeModule>;
}
export { DxLinearGaugeTypes };
