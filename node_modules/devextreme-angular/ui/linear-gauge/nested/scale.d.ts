/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { HorizontalAlignment, VerticalAlignment } from 'devextreme/common';
import { Font, LabelOverlap } from 'devextreme/common/charts';
import { Format } from 'devextreme/common/core/localization';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoLinearGaugeScaleComponent extends NestedOption implements OnDestroy, OnInit {
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get customMinorTicks(): Array<number>;
    set customMinorTicks(value: Array<number>);
    get customTicks(): Array<number>;
    set customTicks(value: Array<number>);
    get endValue(): number;
    set endValue(value: number);
    get horizontalOrientation(): HorizontalAlignment;
    set horizontalOrientation(value: HorizontalAlignment);
    get label(): {
        customizeText?: ((scaleValue: {
            value: number;
            valueText: string;
        }) => string);
        font?: Font;
        format?: Format | undefined;
        indentFromTick?: number;
        overlappingBehavior?: LabelOverlap;
        useRangeColors?: boolean;
        visible?: boolean;
    };
    set label(value: {
        customizeText?: ((scaleValue: {
            value: number;
            valueText: string;
        }) => string);
        font?: Font;
        format?: Format | undefined;
        indentFromTick?: number;
        overlappingBehavior?: LabelOverlap;
        useRangeColors?: boolean;
        visible?: boolean;
    });
    get minorTick(): {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get minorTickInterval(): number | undefined;
    set minorTickInterval(value: number | undefined);
    get scaleDivisionFactor(): number;
    set scaleDivisionFactor(value: number);
    get startValue(): number;
    set startValue(value: number);
    get tick(): {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set tick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get tickInterval(): number | undefined;
    set tickInterval(value: number | undefined);
    get verticalOrientation(): VerticalAlignment;
    set verticalOrientation(value: VerticalAlignment);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoLinearGaugeScaleComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoLinearGaugeScaleComponent, "dxo-linear-gauge-scale", never, { "allowDecimals": { "alias": "allowDecimals"; "required": false; }; "customMinorTicks": { "alias": "customMinorTicks"; "required": false; }; "customTicks": { "alias": "customTicks"; "required": false; }; "endValue": { "alias": "endValue"; "required": false; }; "horizontalOrientation": { "alias": "horizontalOrientation"; "required": false; }; "label": { "alias": "label"; "required": false; }; "minorTick": { "alias": "minorTick"; "required": false; }; "minorTickInterval": { "alias": "minorTickInterval"; "required": false; }; "scaleDivisionFactor": { "alias": "scaleDivisionFactor"; "required": false; }; "startValue": { "alias": "startValue"; "required": false; }; "tick": { "alias": "tick"; "required": false; }; "tickInterval": { "alias": "tickInterval"; "required": false; }; "verticalOrientation": { "alias": "verticalOrientation"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class DxoLinearGaugeScaleModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoLinearGaugeScaleModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoLinearGaugeScaleModule, [typeof DxoLinearGaugeScaleComponent], never, [typeof DxoLinearGaugeScaleComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoLinearGaugeScaleModule>;
}
