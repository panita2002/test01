/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DataSource from 'devextreme/data/data_source';
import { Alert, Message, DisposingEvent, InitializedEvent, MessageEnteredEvent, OptionChangedEvent, TypingEndEvent, TypingStartEvent, User } from 'devextreme/ui/chat';
import { DataSourceOptions } from 'devextreme/data/data_source';
import { Store } from 'devextreme/data/store';
import { Format } from 'devextreme/common/core/localization';
import DxChat from 'devextreme/ui/chat';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiAlertComponent } from 'devextreme-angular/ui/nested';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import { DxiTypingUserComponent } from 'devextreme-angular/ui/nested';
import { DxiChatAlertComponent } from 'devextreme-angular/ui/chat/nested';
import { DxiChatItemComponent } from 'devextreme-angular/ui/chat/nested';
import { DxiChatTypingUserComponent } from 'devextreme-angular/ui/chat/nested';
import type * as DxChatTypes from "devextreme/ui/chat_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/ui/chat/nested";
import * as i3 from "devextreme-angular/core";
/**
 * The Chat UI component is an interactive interface that allows users to send and receive messages in real time.

 */
export declare class DxChatComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxChat;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * A list of available alerts.
    
     */
    get alerts(): Array<Alert>;
    set alerts(value: Array<Alert>);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): Array<Message> | DataSource | DataSourceOptions | null | Store | string;
    set dataSource(value: Array<Message> | DataSource | DataSourceOptions | null | Store | string);
    /**
     * Specifies the day header format.
    
     */
    get dayHeaderFormat(): Format;
    set dayHeaderFormat(value: Format);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): Record<string, any>;
    set elementAttr(value: Record<string, any>);
    /**
     * Specifies whether the Chat&apos;s input element can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): (() => number | string) | number | string | undefined;
    set height(value: (() => number | string) | number | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Specifies an array of chat messages.
    
     */
    get items(): Array<Message>;
    set items(value: Array<Message>);
    /**
     * Specifies a custom template for a chat message.
    
     */
    get messageTemplate(): any;
    set messageTemplate(value: any);
    /**
     * Specifies the message timestamp format.
    
     */
    get messageTimestampFormat(): Format;
    set messageTimestampFormat(value: Format);
    /**
     * Specifies whether the Chat UI component displays newly entered messages immediately. This property only applies if dataSource is used.
    
     */
    get reloadOnChange(): boolean;
    set reloadOnChange(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies whether to show avatars.
    
     */
    get showAvatar(): boolean;
    set showAvatar(value: boolean);
    /**
     * Specifies whether to show day headers.
    
     */
    get showDayHeaders(): boolean;
    set showDayHeaders(value: boolean);
    /**
     * Specifies whether to show message time stamps.
    
     */
    get showMessageTimestamp(): boolean;
    set showMessageTimestamp(value: boolean);
    /**
     * Specifies whether to show user names.
    
     */
    get showUserName(): boolean;
    set showUserName(value: boolean);
    /**
     * An array of users who are currently typing.
    
     */
    get typingUsers(): Array<User>;
    set typingUsers(value: Array<User>);
    /**
     * Specifies the current chat user (messages displayed on the right side).
    
     */
    get user(): User;
    set user(value: User);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): (() => number | string) | number | string | undefined;
    set width(value: (() => number | string) | number | string | undefined);
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed after a message is entered into the chat.
    
    
     */
    onMessageEntered: EventEmitter<MessageEnteredEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is called 2 seconds after a user stops typing or after a message is entered.
    
    
     */
    onTypingEnd: EventEmitter<TypingEndEvent>;
    /**
    
     * A function that is called after a user starts typing.
    
    
     */
    onTypingStart: EventEmitter<TypingStartEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    alertsChange: EventEmitter<Array<Alert>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<Array<Message> | DataSource | DataSourceOptions | null | Store | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dayHeaderFormatChange: EventEmitter<Format>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<Record<string, any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<(() => number | string) | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<Message>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    messageTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    messageTimestampFormatChange: EventEmitter<Format>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    reloadOnChangeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showAvatarChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showDayHeadersChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showMessageTimestampChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showUserNameChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    typingUsersChange: EventEmitter<Array<User>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    userChange: EventEmitter<User>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<(() => number | string) | number | string | undefined>;
    get alertsChildren(): QueryList<DxiChatAlertComponent>;
    set alertsChildren(value: QueryList<DxiChatAlertComponent>);
    get itemsChildren(): QueryList<DxiChatItemComponent>;
    set itemsChildren(value: QueryList<DxiChatItemComponent>);
    get typingUsersChildren(): QueryList<DxiChatTypingUserComponent>;
    set typingUsersChildren(value: QueryList<DxiChatTypingUserComponent>);
    get alertsLegacyChildren(): QueryList<DxiAlertComponent>;
    set alertsLegacyChildren(value: QueryList<DxiAlertComponent>);
    get itemsLegacyChildren(): QueryList<DxiItemComponent>;
    set itemsLegacyChildren(value: QueryList<DxiItemComponent>);
    get typingUsersLegacyChildren(): QueryList<DxiTypingUserComponent>;
    set typingUsersLegacyChildren(value: QueryList<DxiTypingUserComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxChat;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxChatComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxChatComponent, "dx-chat", never, { "accessKey": { "alias": "accessKey"; "required": false; }; "activeStateEnabled": { "alias": "activeStateEnabled"; "required": false; }; "alerts": { "alias": "alerts"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "dayHeaderFormat": { "alias": "dayHeaderFormat"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "focusStateEnabled": { "alias": "focusStateEnabled"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "items": { "alias": "items"; "required": false; }; "messageTemplate": { "alias": "messageTemplate"; "required": false; }; "messageTimestampFormat": { "alias": "messageTimestampFormat"; "required": false; }; "reloadOnChange": { "alias": "reloadOnChange"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "showAvatar": { "alias": "showAvatar"; "required": false; }; "showDayHeaders": { "alias": "showDayHeaders"; "required": false; }; "showMessageTimestamp": { "alias": "showMessageTimestamp"; "required": false; }; "showUserName": { "alias": "showUserName"; "required": false; }; "typingUsers": { "alias": "typingUsers"; "required": false; }; "user": { "alias": "user"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onMessageEntered": "onMessageEntered"; "onOptionChanged": "onOptionChanged"; "onTypingEnd": "onTypingEnd"; "onTypingStart": "onTypingStart"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "alertsChange": "alertsChange"; "dataSourceChange": "dataSourceChange"; "dayHeaderFormatChange": "dayHeaderFormatChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemsChange": "itemsChange"; "messageTemplateChange": "messageTemplateChange"; "messageTimestampFormatChange": "messageTimestampFormatChange"; "reloadOnChangeChange": "reloadOnChangeChange"; "rtlEnabledChange": "rtlEnabledChange"; "showAvatarChange": "showAvatarChange"; "showDayHeadersChange": "showDayHeadersChange"; "showMessageTimestampChange": "showMessageTimestampChange"; "showUserNameChange": "showUserNameChange"; "typingUsersChange": "typingUsersChange"; "userChange": "userChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["alertsChildren", "itemsChildren", "typingUsersChildren", "alertsLegacyChildren", "itemsLegacyChildren", "typingUsersLegacyChildren"], never, false, never>;
}
export declare class DxChatModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxChatModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxChatModule, [typeof DxChatComponent], [typeof i1.DxiAlertModule, typeof i1.DxoDayHeaderFormatModule, typeof i1.DxiItemModule, typeof i1.DxoAuthorModule, typeof i1.DxoMessageTimestampFormatModule, typeof i1.DxiTypingUserModule, typeof i1.DxoUserModule, typeof i2.DxiChatAlertModule, typeof i2.DxoChatAuthorModule, typeof i2.DxoChatDayHeaderFormatModule, typeof i2.DxiChatItemModule, typeof i2.DxoChatMessageTimestampFormatModule, typeof i2.DxiChatTypingUserModule, typeof i2.DxoChatUserModule, typeof i3.DxIntegrationModule, typeof i3.DxTemplateModule], [typeof DxChatComponent, typeof i1.DxiAlertModule, typeof i1.DxoDayHeaderFormatModule, typeof i1.DxiItemModule, typeof i1.DxoAuthorModule, typeof i1.DxoMessageTimestampFormatModule, typeof i1.DxiTypingUserModule, typeof i1.DxoUserModule, typeof i2.DxiChatAlertModule, typeof i2.DxoChatAuthorModule, typeof i2.DxoChatDayHeaderFormatModule, typeof i2.DxiChatItemModule, typeof i2.DxoChatMessageTimestampFormatModule, typeof i2.DxiChatTypingUserModule, typeof i2.DxoChatUserModule, typeof i3.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxChatModule>;
}
export { DxChatTypes };
