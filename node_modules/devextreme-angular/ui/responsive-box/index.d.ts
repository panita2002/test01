/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DataSource from 'devextreme/data/data_source';
import { dxResponsiveBoxItem, ContentReadyEvent, DisposingEvent, InitializedEvent, ItemClickEvent, ItemContextMenuEvent, ItemHoldEvent, ItemRenderedEvent, OptionChangedEvent } from 'devextreme/ui/responsive_box';
import { DataSourceOptions } from 'devextreme/data/data_source';
import { Store } from 'devextreme/data/store';
import DxResponsiveBox from 'devextreme/ui/responsive_box';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiColComponent } from 'devextreme-angular/ui/nested';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import { DxiRowComponent } from 'devextreme-angular/ui/nested';
import { DxiResponsiveBoxColComponent } from 'devextreme-angular/ui/responsive-box/nested';
import { DxiResponsiveBoxItemComponent } from 'devextreme-angular/ui/responsive-box/nested';
import { DxiResponsiveBoxRowComponent } from 'devextreme-angular/ui/responsive-box/nested';
import type * as DxResponsiveBoxTypes from "devextreme/ui/responsive_box_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/ui/responsive-box/nested";
import * as i3 from "devextreme-angular/core";
export { ExplicitTypes } from 'devextreme/ui/responsive_box';
/**
 * The ResponsiveBox UI component allows you to create an application or a website with a layout adapted to different screen sizes.

 */
export declare class DxResponsiveBoxComponent<TItem = any, TKey = any> extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxResponsiveBox<TItem, TKey>;
    /**
     * Specifies the collection of columns for the grid used to position layout elements.
    
     */
    get cols(): {
        baseSize?: number | string;
        ratio?: number;
        screen?: string | undefined;
        shrink?: number;
    }[];
    set cols(value: {
        baseSize?: number | string;
        ratio?: number;
        screen?: string | undefined;
        shrink?: number;
    }[]);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): Array<any | dxResponsiveBoxItem | string> | DataSource | DataSourceOptions | null | Store | string;
    set dataSource(value: Array<any | dxResponsiveBoxItem | string> | DataSource | DataSourceOptions | null | Store | string);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): Record<string, any>;
    set elementAttr(value: Record<string, any>);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): (() => number | string) | number | string;
    set height(value: (() => number | string) | number | string);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * The time period in milliseconds before the onItemHold event is raised.
    
     */
    get itemHoldTimeout(): number;
    set itemHoldTimeout(value: number);
    /**
     * An array of items displayed by the UI component.
    
     */
    get items(): Array<any | dxResponsiveBoxItem | string>;
    set items(value: Array<any | dxResponsiveBoxItem | string>);
    /**
     * Specifies a custom template for items.
    
     */
    get itemTemplate(): any;
    set itemTemplate(value: any);
    /**
     * Specifies the collection of rows for the grid used to position layout elements.
    
     */
    get rows(): {
        baseSize?: number | string;
        ratio?: number;
        screen?: string | undefined;
        shrink?: number;
    }[];
    set rows(value: {
        baseSize?: number | string;
        ratio?: number;
        screen?: string | undefined;
        shrink?: number;
    }[]);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies the function returning the size qualifier depending on the screen&apos;s width.
    
     */
    get screenByWidth(): Function;
    set screenByWidth(value: Function);
    /**
     * Specifies on which screens all layout elements should be arranged in a single column. Accepts a single or several size qualifiers separated by a space.
    
     */
    get singleColumnScreen(): string;
    set singleColumnScreen(value: string);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): (() => number | string) | number | string;
    set width(value: (() => number | string) | number | string);
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed when a collection item is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<ItemClickEvent>;
    /**
    
     * A function that is executed when a collection item is right-clicked or pressed.
    
    
     */
    onItemContextMenu: EventEmitter<ItemContextMenuEvent>;
    /**
    
     * A function that is executed when a collection item has been held for a specified period.
    
    
     */
    onItemHold: EventEmitter<ItemHoldEvent>;
    /**
    
     * A function that is executed after a collection item is rendered.
    
    
     */
    onItemRendered: EventEmitter<ItemRenderedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    colsChange: EventEmitter<{
        baseSize?: number | string;
        ratio?: number;
        screen?: string | undefined;
        shrink?: number;
    }[]>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<Array<any | dxResponsiveBoxItem | string> | DataSource | DataSourceOptions | null | Store | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<Record<string, any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<(() => number | string) | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemHoldTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<any | dxResponsiveBoxItem | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rowsChange: EventEmitter<{
        baseSize?: number | string;
        ratio?: number;
        screen?: string | undefined;
        shrink?: number;
    }[]>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    screenByWidthChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    singleColumnScreenChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<(() => number | string) | number | string>;
    get colsChildren(): QueryList<DxiResponsiveBoxColComponent>;
    set colsChildren(value: QueryList<DxiResponsiveBoxColComponent>);
    get itemsChildren(): QueryList<DxiResponsiveBoxItemComponent>;
    set itemsChildren(value: QueryList<DxiResponsiveBoxItemComponent>);
    get rowsChildren(): QueryList<DxiResponsiveBoxRowComponent>;
    set rowsChildren(value: QueryList<DxiResponsiveBoxRowComponent>);
    get colsLegacyChildren(): QueryList<DxiColComponent>;
    set colsLegacyChildren(value: QueryList<DxiColComponent>);
    get itemsLegacyChildren(): QueryList<DxiItemComponent>;
    set itemsLegacyChildren(value: QueryList<DxiItemComponent>);
    get rowsLegacyChildren(): QueryList<DxiRowComponent>;
    set rowsLegacyChildren(value: QueryList<DxiRowComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxResponsiveBox<any, any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxResponsiveBoxComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxResponsiveBoxComponent<any, any>, "dx-responsive-box", never, { "cols": { "alias": "cols"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "itemHoldTimeout": { "alias": "itemHoldTimeout"; "required": false; }; "items": { "alias": "items"; "required": false; }; "itemTemplate": { "alias": "itemTemplate"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "screenByWidth": { "alias": "screenByWidth"; "required": false; }; "singleColumnScreen": { "alias": "singleColumnScreen"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemContextMenu": "onItemContextMenu"; "onItemHold": "onItemHold"; "onItemRendered": "onItemRendered"; "onOptionChanged": "onOptionChanged"; "colsChange": "colsChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemHoldTimeoutChange": "itemHoldTimeoutChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "rowsChange": "rowsChange"; "rtlEnabledChange": "rtlEnabledChange"; "screenByWidthChange": "screenByWidthChange"; "singleColumnScreenChange": "singleColumnScreenChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["colsChildren", "itemsChildren", "rowsChildren", "colsLegacyChildren", "itemsLegacyChildren", "rowsLegacyChildren"], never, false, never>;
}
export declare class DxResponsiveBoxModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxResponsiveBoxModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxResponsiveBoxModule, [typeof DxResponsiveBoxComponent], [typeof i1.DxiColModule, typeof i1.DxiItemModule, typeof i1.DxiLocationModule, typeof i1.DxiRowModule, typeof i2.DxiResponsiveBoxColModule, typeof i2.DxiResponsiveBoxItemModule, typeof i2.DxiResponsiveBoxLocationModule, typeof i2.DxiResponsiveBoxRowModule, typeof i3.DxIntegrationModule, typeof i3.DxTemplateModule], [typeof DxResponsiveBoxComponent, typeof i1.DxiColModule, typeof i1.DxiItemModule, typeof i1.DxiLocationModule, typeof i1.DxiRowModule, typeof i2.DxiResponsiveBoxColModule, typeof i2.DxiResponsiveBoxItemModule, typeof i2.DxiResponsiveBoxLocationModule, typeof i2.DxiResponsiveBoxRowModule, typeof i3.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxResponsiveBoxModule>;
}
export { DxResponsiveBoxTypes };
