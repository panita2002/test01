/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { EventEmitter, QueryList } from '@angular/core';
import * as CommonTypes from 'devextreme/common';
import { HorizontalAlignment, DataType, SearchMode, SortOrder } from 'devextreme/common';
import { DataGridPredefinedColumnButton, dxDataGridColumnButton, dxDataGridColumn, DataGridCommandColumnType } from 'devextreme/ui/data_grid';
import { FilterOperation, FilterType, FixedPosition, HeaderFilterGroupInterval, ColumnHeaderFilterSearchConfig, SelectedFilterOperation } from 'devextreme/common/grids';
import { Format } from 'devextreme/common/core/localization';
import { dxFormSimpleItem } from 'devextreme/ui/form';
import { DataSourceOptions } from 'devextreme/data/data_source';
import { Store } from 'devextreme/data/store';
import { NestedOptionHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiDataGridAsyncRuleComponent } from './async-rule-dxi';
import { DxiDataGridButtonComponent } from './button-dxi';
import { DxiDataGridCompareRuleComponent } from './compare-rule-dxi';
import { DxiDataGridCustomRuleComponent } from './custom-rule-dxi';
import { DxiDataGridEmailRuleComponent } from './email-rule-dxi';
import { DxiDataGridNumericRuleComponent } from './numeric-rule-dxi';
import { DxiDataGridPatternRuleComponent } from './pattern-rule-dxi';
import { DxiDataGridRangeRuleComponent } from './range-rule-dxi';
import { DxiDataGridRequiredRuleComponent } from './required-rule-dxi';
import { DxiDataGridStringLengthRuleComponent } from './string-length-rule-dxi';
import { DxiDataGridValidationRuleComponent } from './validation-rule-dxi';
import * as i0 from "@angular/core";
export declare class DxiDataGridColumnComponent extends CollectionNestedOption {
    get alignment(): HorizontalAlignment | undefined;
    set alignment(value: HorizontalAlignment | undefined);
    get allowEditing(): boolean;
    set allowEditing(value: boolean);
    get allowExporting(): boolean;
    set allowExporting(value: boolean);
    get allowFiltering(): boolean;
    set allowFiltering(value: boolean);
    get allowFixing(): boolean;
    set allowFixing(value: boolean);
    get allowGrouping(): boolean;
    set allowGrouping(value: boolean);
    get allowHeaderFiltering(): boolean;
    set allowHeaderFiltering(value: boolean);
    get allowHiding(): boolean;
    set allowHiding(value: boolean);
    get allowReordering(): boolean;
    set allowReordering(value: boolean);
    get allowResizing(): boolean;
    set allowResizing(value: boolean);
    get allowSearch(): boolean;
    set allowSearch(value: boolean);
    get allowSorting(): boolean;
    set allowSorting(value: boolean);
    get autoExpandGroup(): boolean;
    set autoExpandGroup(value: boolean);
    get buttons(): Array<DataGridPredefinedColumnButton | dxDataGridColumnButton>;
    set buttons(value: Array<DataGridPredefinedColumnButton | dxDataGridColumnButton>);
    get calculateCellValue(): ((rowData: any) => any);
    set calculateCellValue(value: ((rowData: any) => any));
    get calculateDisplayValue(): ((rowData: any) => any) | string;
    set calculateDisplayValue(value: ((rowData: any) => any) | string);
    get calculateFilterExpression(): ((filterValue: any, selectedFilterOperation: string | null, target: string) => string | Function | Array<any>);
    set calculateFilterExpression(value: ((filterValue: any, selectedFilterOperation: string | null, target: string) => string | Function | Array<any>));
    get calculateGroupValue(): ((rowData: any) => any) | string;
    set calculateGroupValue(value: ((rowData: any) => any) | string);
    get calculateSortValue(): ((rowData: any) => any) | string;
    set calculateSortValue(value: ((rowData: any) => any) | string);
    get caption(): string | undefined;
    set caption(value: string | undefined);
    get cellTemplate(): any;
    set cellTemplate(value: any);
    get columns(): Array<dxDataGridColumn | string>;
    set columns(value: Array<dxDataGridColumn | string>);
    get cssClass(): string | undefined;
    set cssClass(value: string | undefined);
    get customizeText(): ((cellInfo: {
        groupInterval: string | number;
        target: string;
        value: any;
        valueText: string;
    }) => string);
    set customizeText(value: ((cellInfo: {
        groupInterval: string | number;
        target: string;
        value: any;
        valueText: string;
    }) => string));
    get dataField(): string | undefined;
    set dataField(value: string | undefined);
    get dataType(): DataType | undefined;
    set dataType(value: DataType | undefined);
    get editCellTemplate(): any;
    set editCellTemplate(value: any);
    get editorOptions(): any;
    set editorOptions(value: any);
    get encodeHtml(): boolean;
    set encodeHtml(value: boolean);
    get falseText(): string;
    set falseText(value: string);
    get filterOperations(): Array<FilterOperation | string>;
    set filterOperations(value: Array<FilterOperation | string>);
    get filterType(): FilterType;
    set filterType(value: FilterType);
    get filterValue(): any | undefined;
    set filterValue(value: any | undefined);
    get filterValues(): Array<any>;
    set filterValues(value: Array<any>);
    get fixed(): boolean;
    set fixed(value: boolean);
    get fixedPosition(): FixedPosition | undefined;
    set fixedPosition(value: FixedPosition | undefined);
    get format(): Format;
    set format(value: Format);
    get formItem(): dxFormSimpleItem;
    set formItem(value: dxFormSimpleItem);
    get groupCellTemplate(): any;
    set groupCellTemplate(value: any);
    get groupIndex(): number | undefined;
    set groupIndex(value: number | undefined);
    get headerCellTemplate(): any;
    set headerCellTemplate(value: any);
    get headerFilter(): {
        allowSearch?: boolean;
        allowSelectAll?: boolean;
        dataSource?: Array<any> | DataSourceOptions | ((options: {
            component: Record<string, any>;
            dataSource: DataSourceOptions | null;
        }) => void) | null | Store | undefined;
        groupInterval?: HeaderFilterGroupInterval | number | undefined;
        height?: number | string | undefined;
        search?: ColumnHeaderFilterSearchConfig;
        searchMode?: SearchMode;
        width?: number | string | undefined;
    };
    set headerFilter(value: {
        allowSearch?: boolean;
        allowSelectAll?: boolean;
        dataSource?: Array<any> | DataSourceOptions | ((options: {
            component: Record<string, any>;
            dataSource: DataSourceOptions | null;
        }) => void) | null | Store | undefined;
        groupInterval?: HeaderFilterGroupInterval | number | undefined;
        height?: number | string | undefined;
        search?: ColumnHeaderFilterSearchConfig;
        searchMode?: SearchMode;
        width?: number | string | undefined;
    });
    get hidingPriority(): number | undefined;
    set hidingPriority(value: number | undefined);
    get isBand(): boolean | undefined;
    set isBand(value: boolean | undefined);
    get lookup(): {
        allowClearing?: boolean;
        calculateCellValue?: ((rowData: any) => any);
        dataSource?: Array<any> | DataSourceOptions | ((options: {
            data: Record<string, any>;
            key: any;
        }) => Array<any> | Store | DataSourceOptions) | null | Store | undefined;
        displayExpr?: ((data: any) => string) | string | undefined;
        valueExpr?: string | undefined;
    };
    set lookup(value: {
        allowClearing?: boolean;
        calculateCellValue?: ((rowData: any) => any);
        dataSource?: Array<any> | DataSourceOptions | ((options: {
            data: Record<string, any>;
            key: any;
        }) => Array<any> | Store | DataSourceOptions) | null | Store | undefined;
        displayExpr?: ((data: any) => string) | string | undefined;
        valueExpr?: string | undefined;
    });
    get minWidth(): number | undefined;
    set minWidth(value: number | undefined);
    get name(): string | undefined;
    set name(value: string | undefined);
    get ownerBand(): number | undefined;
    set ownerBand(value: number | undefined);
    get renderAsync(): boolean;
    set renderAsync(value: boolean);
    get selectedFilterOperation(): SelectedFilterOperation | undefined;
    set selectedFilterOperation(value: SelectedFilterOperation | undefined);
    get setCellValue(): ((newData: any, value: any, currentRowData: any) => any);
    set setCellValue(value: ((newData: any, value: any, currentRowData: any) => any));
    get showEditorAlways(): boolean;
    set showEditorAlways(value: boolean);
    get showInColumnChooser(): boolean;
    set showInColumnChooser(value: boolean);
    get showWhenGrouped(): boolean;
    set showWhenGrouped(value: boolean);
    get sortIndex(): number | undefined;
    set sortIndex(value: number | undefined);
    get sortingMethod(): ((value1: any, value2: any) => number) | undefined;
    set sortingMethod(value: ((value1: any, value2: any) => number) | undefined);
    get sortOrder(): SortOrder | undefined;
    set sortOrder(value: SortOrder | undefined);
    get trueText(): string;
    set trueText(value: string);
    get type(): DataGridCommandColumnType;
    set type(value: DataGridCommandColumnType);
    get validationRules(): Array<CommonTypes.ValidationRule>;
    set validationRules(value: Array<CommonTypes.ValidationRule>);
    get visible(): boolean;
    set visible(value: boolean);
    get visibleIndex(): number | undefined;
    set visibleIndex(value: number | undefined);
    get width(): number | string | undefined;
    set width(value: number | string | undefined);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterValueChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterValuesChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupIndexChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedFilterOperationChange: EventEmitter<SelectedFilterOperation | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortIndexChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortOrderChange: EventEmitter<SortOrder | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleIndexChange: EventEmitter<number | undefined>;
    protected get _optionPath(): string;
    get asyncRulesChildren(): QueryList<DxiDataGridAsyncRuleComponent>;
    set asyncRulesChildren(value: QueryList<DxiDataGridAsyncRuleComponent>);
    get buttonsChildren(): QueryList<DxiDataGridButtonComponent>;
    set buttonsChildren(value: QueryList<DxiDataGridButtonComponent>);
    get compareRulesChildren(): QueryList<DxiDataGridCompareRuleComponent>;
    set compareRulesChildren(value: QueryList<DxiDataGridCompareRuleComponent>);
    get customRulesChildren(): QueryList<DxiDataGridCustomRuleComponent>;
    set customRulesChildren(value: QueryList<DxiDataGridCustomRuleComponent>);
    get emailRulesChildren(): QueryList<DxiDataGridEmailRuleComponent>;
    set emailRulesChildren(value: QueryList<DxiDataGridEmailRuleComponent>);
    get numericRulesChildren(): QueryList<DxiDataGridNumericRuleComponent>;
    set numericRulesChildren(value: QueryList<DxiDataGridNumericRuleComponent>);
    get patternRulesChildren(): QueryList<DxiDataGridPatternRuleComponent>;
    set patternRulesChildren(value: QueryList<DxiDataGridPatternRuleComponent>);
    get rangeRulesChildren(): QueryList<DxiDataGridRangeRuleComponent>;
    set rangeRulesChildren(value: QueryList<DxiDataGridRangeRuleComponent>);
    get requiredRulesChildren(): QueryList<DxiDataGridRequiredRuleComponent>;
    set requiredRulesChildren(value: QueryList<DxiDataGridRequiredRuleComponent>);
    get stringLengthRulesChildren(): QueryList<DxiDataGridStringLengthRuleComponent>;
    set stringLengthRulesChildren(value: QueryList<DxiDataGridStringLengthRuleComponent>);
    get validationRulesChildren(): QueryList<DxiDataGridValidationRuleComponent>;
    set validationRulesChildren(value: QueryList<DxiDataGridValidationRuleComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiDataGridColumnComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiDataGridColumnComponent, "dxi-data-grid-column", never, { "alignment": { "alias": "alignment"; "required": false; }; "allowEditing": { "alias": "allowEditing"; "required": false; }; "allowExporting": { "alias": "allowExporting"; "required": false; }; "allowFiltering": { "alias": "allowFiltering"; "required": false; }; "allowFixing": { "alias": "allowFixing"; "required": false; }; "allowGrouping": { "alias": "allowGrouping"; "required": false; }; "allowHeaderFiltering": { "alias": "allowHeaderFiltering"; "required": false; }; "allowHiding": { "alias": "allowHiding"; "required": false; }; "allowReordering": { "alias": "allowReordering"; "required": false; }; "allowResizing": { "alias": "allowResizing"; "required": false; }; "allowSearch": { "alias": "allowSearch"; "required": false; }; "allowSorting": { "alias": "allowSorting"; "required": false; }; "autoExpandGroup": { "alias": "autoExpandGroup"; "required": false; }; "buttons": { "alias": "buttons"; "required": false; }; "calculateCellValue": { "alias": "calculateCellValue"; "required": false; }; "calculateDisplayValue": { "alias": "calculateDisplayValue"; "required": false; }; "calculateFilterExpression": { "alias": "calculateFilterExpression"; "required": false; }; "calculateGroupValue": { "alias": "calculateGroupValue"; "required": false; }; "calculateSortValue": { "alias": "calculateSortValue"; "required": false; }; "caption": { "alias": "caption"; "required": false; }; "cellTemplate": { "alias": "cellTemplate"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "cssClass": { "alias": "cssClass"; "required": false; }; "customizeText": { "alias": "customizeText"; "required": false; }; "dataField": { "alias": "dataField"; "required": false; }; "dataType": { "alias": "dataType"; "required": false; }; "editCellTemplate": { "alias": "editCellTemplate"; "required": false; }; "editorOptions": { "alias": "editorOptions"; "required": false; }; "encodeHtml": { "alias": "encodeHtml"; "required": false; }; "falseText": { "alias": "falseText"; "required": false; }; "filterOperations": { "alias": "filterOperations"; "required": false; }; "filterType": { "alias": "filterType"; "required": false; }; "filterValue": { "alias": "filterValue"; "required": false; }; "filterValues": { "alias": "filterValues"; "required": false; }; "fixed": { "alias": "fixed"; "required": false; }; "fixedPosition": { "alias": "fixedPosition"; "required": false; }; "format": { "alias": "format"; "required": false; }; "formItem": { "alias": "formItem"; "required": false; }; "groupCellTemplate": { "alias": "groupCellTemplate"; "required": false; }; "groupIndex": { "alias": "groupIndex"; "required": false; }; "headerCellTemplate": { "alias": "headerCellTemplate"; "required": false; }; "headerFilter": { "alias": "headerFilter"; "required": false; }; "hidingPriority": { "alias": "hidingPriority"; "required": false; }; "isBand": { "alias": "isBand"; "required": false; }; "lookup": { "alias": "lookup"; "required": false; }; "minWidth": { "alias": "minWidth"; "required": false; }; "name": { "alias": "name"; "required": false; }; "ownerBand": { "alias": "ownerBand"; "required": false; }; "renderAsync": { "alias": "renderAsync"; "required": false; }; "selectedFilterOperation": { "alias": "selectedFilterOperation"; "required": false; }; "setCellValue": { "alias": "setCellValue"; "required": false; }; "showEditorAlways": { "alias": "showEditorAlways"; "required": false; }; "showInColumnChooser": { "alias": "showInColumnChooser"; "required": false; }; "showWhenGrouped": { "alias": "showWhenGrouped"; "required": false; }; "sortIndex": { "alias": "sortIndex"; "required": false; }; "sortingMethod": { "alias": "sortingMethod"; "required": false; }; "sortOrder": { "alias": "sortOrder"; "required": false; }; "trueText": { "alias": "trueText"; "required": false; }; "type": { "alias": "type"; "required": false; }; "validationRules": { "alias": "validationRules"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "visibleIndex": { "alias": "visibleIndex"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "filterValueChange": "filterValueChange"; "filterValuesChange": "filterValuesChange"; "groupIndexChange": "groupIndexChange"; "selectedFilterOperationChange": "selectedFilterOperationChange"; "sortIndexChange": "sortIndexChange"; "sortOrderChange": "sortOrderChange"; "visibleChange": "visibleChange"; "visibleIndexChange": "visibleIndexChange"; }, ["asyncRulesChildren", "buttonsChildren", "compareRulesChildren", "customRulesChildren", "emailRulesChildren", "numericRulesChildren", "patternRulesChildren", "rangeRulesChildren", "requiredRulesChildren", "stringLengthRulesChildren", "validationRulesChildren"], never, false, never>;
}
export declare class DxiDataGridColumnModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiDataGridColumnModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiDataGridColumnModule, [typeof DxiDataGridColumnComponent], never, [typeof DxiDataGridColumnComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiDataGridColumnModule>;
}
