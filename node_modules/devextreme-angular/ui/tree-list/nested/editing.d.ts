/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter, QueryList } from '@angular/core';
import dxTreeList from 'devextreme/ui/tree_list';
import { dxTreeListRowObject } from 'devextreme/ui/tree_list';
import { DataChange, GridsEditMode, GridsEditRefreshMode, StartEditAction } from 'devextreme/common/grids';
import { dxFormOptions } from 'devextreme/ui/form';
import { dxPopupOptions } from 'devextreme/ui/popup';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiTreeListChangeComponent } from './change-dxi';
import * as i0 from "@angular/core";
export declare class DxoTreeListEditingComponent extends NestedOption implements OnDestroy, OnInit {
    get allowAdding(): boolean | ((options: {
        component: dxTreeList;
        row: dxTreeListRowObject;
    }) => boolean);
    set allowAdding(value: boolean | ((options: {
        component: dxTreeList;
        row: dxTreeListRowObject;
    }) => boolean));
    get allowDeleting(): boolean | ((options: {
        component: dxTreeList;
        row: dxTreeListRowObject;
    }) => boolean);
    set allowDeleting(value: boolean | ((options: {
        component: dxTreeList;
        row: dxTreeListRowObject;
    }) => boolean));
    get allowUpdating(): boolean | ((options: {
        component: dxTreeList;
        row: dxTreeListRowObject;
    }) => boolean);
    set allowUpdating(value: boolean | ((options: {
        component: dxTreeList;
        row: dxTreeListRowObject;
    }) => boolean));
    get changes(): Array<DataChange>;
    set changes(value: Array<DataChange>);
    get confirmDelete(): boolean;
    set confirmDelete(value: boolean);
    get editColumnName(): string;
    set editColumnName(value: string);
    get editRowKey(): any;
    set editRowKey(value: any);
    get form(): dxFormOptions;
    set form(value: dxFormOptions);
    get mode(): GridsEditMode;
    set mode(value: GridsEditMode);
    get popup(): dxPopupOptions<any>;
    set popup(value: dxPopupOptions<any>);
    get refreshMode(): GridsEditRefreshMode;
    set refreshMode(value: GridsEditRefreshMode);
    get selectTextOnEditStart(): boolean;
    set selectTextOnEditStart(value: boolean);
    get startEditAction(): StartEditAction;
    set startEditAction(value: StartEditAction);
    get texts(): {
        addRow?: string;
        addRowToNode?: string;
        cancelAllChanges?: string;
        cancelRowChanges?: string;
        confirmDeleteMessage?: string;
        confirmDeleteTitle?: string;
        deleteRow?: string;
        editRow?: string;
        saveAllChanges?: string;
        saveRowChanges?: string;
        undeleteRow?: string;
        validationCancelChanges?: string;
    };
    set texts(value: {
        addRow?: string;
        addRowToNode?: string;
        cancelAllChanges?: string;
        cancelRowChanges?: string;
        confirmDeleteMessage?: string;
        confirmDeleteTitle?: string;
        deleteRow?: string;
        editRow?: string;
        saveAllChanges?: string;
        saveRowChanges?: string;
        undeleteRow?: string;
        validationCancelChanges?: string;
    });
    get useIcons(): boolean;
    set useIcons(value: boolean);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    changesChange: EventEmitter<Array<DataChange>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editColumnNameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editRowKeyChange: EventEmitter<any>;
    protected get _optionPath(): string;
    get changesChildren(): QueryList<DxiTreeListChangeComponent>;
    set changesChildren(value: QueryList<DxiTreeListChangeComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoTreeListEditingComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoTreeListEditingComponent, "dxo-tree-list-editing", never, { "allowAdding": { "alias": "allowAdding"; "required": false; }; "allowDeleting": { "alias": "allowDeleting"; "required": false; }; "allowUpdating": { "alias": "allowUpdating"; "required": false; }; "changes": { "alias": "changes"; "required": false; }; "confirmDelete": { "alias": "confirmDelete"; "required": false; }; "editColumnName": { "alias": "editColumnName"; "required": false; }; "editRowKey": { "alias": "editRowKey"; "required": false; }; "form": { "alias": "form"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "popup": { "alias": "popup"; "required": false; }; "refreshMode": { "alias": "refreshMode"; "required": false; }; "selectTextOnEditStart": { "alias": "selectTextOnEditStart"; "required": false; }; "startEditAction": { "alias": "startEditAction"; "required": false; }; "texts": { "alias": "texts"; "required": false; }; "useIcons": { "alias": "useIcons"; "required": false; }; }, { "changesChange": "changesChange"; "editColumnNameChange": "editColumnNameChange"; "editRowKeyChange": "editRowKeyChange"; }, ["changesChildren"], never, false, never>;
}
export declare class DxoTreeListEditingModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoTreeListEditingModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoTreeListEditingModule, [typeof DxoTreeListEditingComponent], never, [typeof DxoTreeListEditingComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoTreeListEditingModule>;
}
