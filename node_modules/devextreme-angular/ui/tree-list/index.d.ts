/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DataSource from 'devextreme/data/data_source';
import dxTreeList from 'devextreme/ui/tree_list';
import dxSortable from 'devextreme/ui/sortable';
import dxDraggable from 'devextreme/ui/draggable';
import { ColumnChooserMode, ColumnChooserSearchConfig, ColumnChooserSelectionConfig, ColumnResizeMode, DataChange, GridsEditMode, GridsEditRefreshMode, StartEditAction, GridBase, ApplyFilterMode, HeaderFilterSearchConfig, EnterKeyAction, EnterKeyDirection, Pager, DataRenderMode, StateStoreType } from 'devextreme/common/grids';
import { PositionConfig } from 'devextreme/common/core/animation';
import { SortOrder, Mode, DataStructure, DragDirection, DragHighlight, ScrollMode, ScrollbarMode, SingleMultipleOrNone } from 'devextreme/common';
import { dxTreeListColumn, dxTreeListRowObject, TreeListFilterMode, AdaptiveDetailRowPreparingEvent, CellClickEvent, CellDblClickEvent, CellHoverChangedEvent, CellPreparedEvent, ContentReadyEvent, ContextMenuPreparingEvent, DataErrorOccurredEvent, DisposingEvent, EditCanceledEvent, EditCancelingEvent, EditingStartEvent, EditorPreparedEvent, EditorPreparingEvent, FocusedCellChangedEvent, FocusedCellChangingEvent, FocusedRowChangedEvent, FocusedRowChangingEvent, InitializedEvent, InitNewRowEvent, KeyDownEvent, NodesInitializedEvent, OptionChangedEvent, RowClickEvent, RowCollapsedEvent, RowCollapsingEvent, RowDblClickEvent, RowExpandedEvent, RowExpandingEvent, RowInsertedEvent, RowInsertingEvent, RowPreparedEvent, RowRemovedEvent, RowRemovingEvent, RowUpdatedEvent, RowUpdatingEvent, RowValidatingEvent, SavedEvent, SavingEvent, SelectionChangedEvent, ToolbarPreparingEvent, dxTreeListToolbar } from 'devextreme/ui/tree_list';
import { DataSourceOptions } from 'devextreme/data/data_source';
import { Store } from 'devextreme/data/store';
import { dxFormOptions } from 'devextreme/ui/form';
import { dxPopupOptions } from 'devextreme/ui/popup';
import { dxFilterBuilderOptions } from 'devextreme/ui/filter_builder';
import { event } from 'devextreme/events/events.types';
import DxTreeList from 'devextreme/ui/tree_list';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiColumnComponent } from 'devextreme-angular/ui/nested';
import { DxiTreeListColumnComponent } from 'devextreme-angular/ui/tree-list/nested';
import type * as DxTreeListTypes from "devextreme/ui/tree_list_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/ui/tree-list/nested";
import * as i3 from "devextreme-angular/core";
export { ExplicitTypes } from 'devextreme/ui/tree_list';
/**
 * The TreeList is a UI component that represents data from a local or remote source in the form of a multi-column tree view. This UI component offers such features as sorting, filtering, editing, selection, etc.

 */
export declare class DxTreeListComponent<TRowData = any, TKey = any> extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxTreeList<TRowData, TKey>;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * Specifies whether a user can reorder columns.
    
     */
    get allowColumnReordering(): boolean;
    set allowColumnReordering(value: boolean);
    /**
     * Specifies whether a user can resize columns.
    
     */
    get allowColumnResizing(): boolean;
    set allowColumnResizing(value: boolean);
    /**
     * Specifies whether all rows are expanded initially.
    
     */
    get autoExpandAll(): boolean;
    set autoExpandAll(value: boolean);
    /**
     * Automatically scrolls the component to the focused row when the focusedRowKey is changed.
    
     */
    get autoNavigateToFocusedRow(): boolean;
    set autoNavigateToFocusedRow(value: boolean);
    /**
     * Specifies whether data should be cached.
    
     */
    get cacheEnabled(): boolean;
    set cacheEnabled(value: boolean);
    /**
     * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.
    
     */
    get cellHintEnabled(): boolean;
    set cellHintEnabled(value: boolean);
    /**
     * Specifies whether columns should adjust their widths to the content.
    
     */
    get columnAutoWidth(): boolean;
    set columnAutoWidth(value: boolean);
    /**
     * Configures the column chooser.
    
     */
    get columnChooser(): {
        allowSearch?: boolean;
        container?: any | string | undefined;
        emptyPanelText?: string;
        enabled?: boolean;
        height?: number | string;
        mode?: ColumnChooserMode;
        position?: PositionConfig | undefined;
        search?: ColumnChooserSearchConfig;
        searchTimeout?: number;
        selection?: ColumnChooserSelectionConfig;
        sortOrder?: SortOrder | undefined;
        title?: string;
        width?: number | string;
    };
    set columnChooser(value: {
        allowSearch?: boolean;
        container?: any | string | undefined;
        emptyPanelText?: string;
        enabled?: boolean;
        height?: number | string;
        mode?: ColumnChooserMode;
        position?: PositionConfig | undefined;
        search?: ColumnChooserSearchConfig;
        searchTimeout?: number;
        selection?: ColumnChooserSelectionConfig;
        sortOrder?: SortOrder | undefined;
        title?: string;
        width?: number | string;
    });
    /**
     * Configures column fixing.
    
     */
    get columnFixing(): {
        enabled?: boolean;
        icons?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            stickyPosition?: string;
            unfix?: string;
        };
        texts?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            stickyPosition?: string;
            unfix?: string;
        };
    };
    set columnFixing(value: {
        enabled?: boolean;
        icons?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            stickyPosition?: string;
            unfix?: string;
        };
        texts?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            stickyPosition?: string;
            unfix?: string;
        };
    });
    /**
     * Specifies whether the UI component should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is &apos;widget&apos;.
    
     */
    get columnHidingEnabled(): boolean;
    set columnHidingEnabled(value: boolean);
    /**
     * Specifies the minimum width of columns.
    
     */
    get columnMinWidth(): number | undefined;
    set columnMinWidth(value: number | undefined);
    /**
     * Specifies how the UI component resizes columns. Applies only if allowColumnResizing is true.
    
     */
    get columnResizingMode(): ColumnResizeMode;
    set columnResizingMode(value: ColumnResizeMode);
    /**
     * Configures columns.
    
     */
    get columns(): Array<dxTreeListColumn | string>;
    set columns(value: Array<dxTreeListColumn | string>);
    /**
     * Specifies the width for all data columns. Has a lower priority than the column.width property.
    
     */
    get columnWidth(): Mode | number | undefined;
    set columnWidth(value: Mode | number | undefined);
    /**
     * Customizes columns after they are created.
    
     */
    get customizeColumns(): ((columns: Array<dxTreeListColumn>) => void);
    set customizeColumns(value: ((columns: Array<dxTreeListColumn>) => void));
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): Array<any> | DataSource | DataSourceOptions | null | Store | string;
    set dataSource(value: Array<any> | DataSource | DataSourceOptions | null | Store | string);
    /**
     * Notifies the UI component of the used data structure.
    
     */
    get dataStructure(): DataStructure;
    set dataStructure(value: DataStructure);
    /**
     * Specifies the format in which date-time values should be sent to the server.
    
     */
    get dateSerializationFormat(): string;
    set dateSerializationFormat(value: string);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Configures editing.
    
     */
    get editing(): {
        allowAdding?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        allowDeleting?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        allowUpdating?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        changes?: Array<DataChange>;
        confirmDelete?: boolean;
        editColumnName?: string;
        editRowKey?: any;
        form?: dxFormOptions;
        mode?: GridsEditMode;
        popup?: dxPopupOptions<any>;
        refreshMode?: GridsEditRefreshMode;
        selectTextOnEditStart?: boolean;
        startEditAction?: StartEditAction;
        texts?: {
            addRow?: string;
            addRowToNode?: string;
            cancelAllChanges?: string;
            cancelRowChanges?: string;
            confirmDeleteMessage?: string;
            confirmDeleteTitle?: string;
            deleteRow?: string;
            editRow?: string;
            saveAllChanges?: string;
            saveRowChanges?: string;
            undeleteRow?: string;
            validationCancelChanges?: string;
        };
        useIcons?: boolean;
    };
    set editing(value: {
        allowAdding?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        allowDeleting?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        allowUpdating?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        changes?: Array<DataChange>;
        confirmDelete?: boolean;
        editColumnName?: string;
        editRowKey?: any;
        form?: dxFormOptions;
        mode?: GridsEditMode;
        popup?: dxPopupOptions<any>;
        refreshMode?: GridsEditRefreshMode;
        selectTextOnEditStart?: boolean;
        startEditAction?: StartEditAction;
        texts?: {
            addRow?: string;
            addRowToNode?: string;
            cancelAllChanges?: string;
            cancelRowChanges?: string;
            confirmDeleteMessage?: string;
            confirmDeleteTitle?: string;
            deleteRow?: string;
            editRow?: string;
            saveAllChanges?: string;
            saveRowChanges?: string;
            undeleteRow?: string;
            validationCancelChanges?: string;
        };
        useIcons?: boolean;
    });
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): Record<string, any>;
    set elementAttr(value: Record<string, any>);
    /**
     * Indicates whether to show the error row.
    
     */
    get errorRowEnabled(): boolean;
    set errorRowEnabled(value: boolean);
    /**
     * Specifies keys of the initially expanded rows.
    
     */
    get expandedRowKeys(): Array<any>;
    set expandedRowKeys(value: Array<any>);
    /**
     * Specifies whether nodes appear expanded or collapsed after filtering is applied.
    
     */
    get expandNodesOnFiltering(): boolean;
    set expandNodesOnFiltering(value: boolean);
    /**
     * Configures the integrated filter builder.
    
     */
    get filterBuilder(): dxFilterBuilderOptions;
    set filterBuilder(value: dxFilterBuilderOptions);
    /**
     * Configures the popup in which the integrated filter builder is shown.
    
     */
    get filterBuilderPopup(): dxPopupOptions<any>;
    set filterBuilderPopup(value: dxPopupOptions<any>);
    /**
     * Specifies whether filter and search results should include matching rows only, matching rows with ancestors, or matching rows with ancestors and descendants (full branch).
    
     */
    get filterMode(): TreeListFilterMode;
    set filterMode(value: TreeListFilterMode);
    /**
     * Configures the filter panel.
    
     */
    get filterPanel(): {
        customizeText?: ((e: {
            component: GridBase;
            filterValue: Record<string, any>;
            text: string;
        }) => string);
        filterEnabled?: boolean;
        texts?: {
            clearFilter?: string;
            createFilter?: string;
            filterEnabledHint?: string;
        };
        visible?: boolean;
    };
    set filterPanel(value: {
        customizeText?: ((e: {
            component: GridBase;
            filterValue: Record<string, any>;
            text: string;
        }) => string);
        filterEnabled?: boolean;
        texts?: {
            clearFilter?: string;
            createFilter?: string;
            filterEnabledHint?: string;
        };
        visible?: boolean;
    });
    /**
     * Configures the filter row.
    
     */
    get filterRow(): {
        applyFilter?: ApplyFilterMode;
        applyFilterText?: string;
        betweenEndText?: string;
        betweenStartText?: string;
        operationDescriptions?: {
            between?: string;
            contains?: string;
            endsWith?: string;
            equal?: string;
            greaterThan?: string;
            greaterThanOrEqual?: string;
            lessThan?: string;
            lessThanOrEqual?: string;
            notContains?: string;
            notEqual?: string;
            startsWith?: string;
        };
        resetOperationText?: string;
        showAllText?: string;
        showOperationChooser?: boolean;
        visible?: boolean;
    };
    set filterRow(value: {
        applyFilter?: ApplyFilterMode;
        applyFilterText?: string;
        betweenEndText?: string;
        betweenStartText?: string;
        operationDescriptions?: {
            between?: string;
            contains?: string;
            endsWith?: string;
            equal?: string;
            greaterThan?: string;
            greaterThanOrEqual?: string;
            lessThan?: string;
            lessThanOrEqual?: string;
            notContains?: string;
            notEqual?: string;
            startsWith?: string;
        };
        resetOperationText?: string;
        showAllText?: string;
        showOperationChooser?: boolean;
        visible?: boolean;
    });
    /**
     * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue property.
    
     */
    get filterSyncEnabled(): boolean | Mode;
    set filterSyncEnabled(value: boolean | Mode);
    /**
     * Specifies a filter expression.
    
     */
    get filterValue(): Array<any> | Function | string;
    set filterValue(value: Array<any> | Function | string);
    /**
     * The index of the column that contains the focused data cell. This index is taken from the columns array.
    
     */
    get focusedColumnIndex(): number;
    set focusedColumnIndex(value: number);
    /**
     * Specifies whether the focused row feature is enabled.
    
     */
    get focusedRowEnabled(): boolean;
    set focusedRowEnabled(value: boolean);
    /**
     * Specifies or indicates the focused data row&apos;s index.
    
     */
    get focusedRowIndex(): number;
    set focusedRowIndex(value: number);
    /**
     * Specifies initially or currently focused grid row&apos;s key.
    
     */
    get focusedRowKey(): any | undefined;
    set focusedRowKey(value: any | undefined);
    /**
     * Specifies which data field defines whether the node has children.
    
     */
    get hasItemsExpr(): Function | string;
    set hasItemsExpr(value: Function | string);
    /**
     * Configures the header filter feature.
    
     */
    get headerFilter(): {
        allowSearch?: boolean;
        allowSelectAll?: boolean;
        height?: number | string;
        search?: HeaderFilterSearchConfig;
        searchTimeout?: number;
        texts?: {
            cancel?: string;
            emptyValue?: string;
            ok?: string;
        };
        visible?: boolean;
        width?: number | string;
    };
    set headerFilter(value: {
        allowSearch?: boolean;
        allowSelectAll?: boolean;
        height?: number | string;
        search?: HeaderFilterSearchConfig;
        searchTimeout?: number;
        texts?: {
            cancel?: string;
            emptyValue?: string;
            ok?: string;
        };
        visible?: boolean;
        width?: number | string;
    });
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): (() => number | string) | number | string | undefined;
    set height(value: (() => number | string) | number | string | undefined);
    /**
     * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.
    
     */
    get highlightChanges(): boolean;
    set highlightChanges(value: boolean);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Specifies which data field contains nested items. Set this property when your data has a hierarchical structure.
    
     */
    get itemsExpr(): Function | string;
    set itemsExpr(value: Function | string);
    /**
     * Configures keyboard navigation.
    
     */
    get keyboardNavigation(): {
        editOnKeyPress?: boolean;
        enabled?: boolean;
        enterKeyAction?: EnterKeyAction;
        enterKeyDirection?: EnterKeyDirection;
    };
    set keyboardNavigation(value: {
        editOnKeyPress?: boolean;
        enabled?: boolean;
        enterKeyAction?: EnterKeyAction;
        enterKeyDirection?: EnterKeyDirection;
    });
    /**
     * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique.
    
     */
    get keyExpr(): Function | string;
    set keyExpr(value: Function | string);
    /**
     * Configures the load panel.
    
     */
    get loadPanel(): {
        enabled?: boolean | Mode;
        height?: number | string;
        indicatorSrc?: string;
        shading?: boolean;
        shadingColor?: string;
        showIndicator?: boolean;
        showPane?: boolean;
        text?: string;
        width?: number | string;
    };
    set loadPanel(value: {
        enabled?: boolean | Mode;
        height?: number | string;
        indicatorSrc?: string;
        shading?: boolean;
        shadingColor?: string;
        showIndicator?: boolean;
        showPane?: boolean;
        text?: string;
        width?: number | string;
    });
    /**
     * Specifies a text string shown when the widget does not display any data.
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * Configures the pager.
    
     */
    get pager(): Pager;
    set pager(value: Pager);
    /**
     * Configures paging.
    
     */
    get paging(): {
        enabled?: boolean;
        pageIndex?: number;
        pageSize?: number;
    };
    set paging(value: {
        enabled?: boolean;
        pageIndex?: number;
        pageSize?: number;
    });
    /**
     * Specifies which data field provides parent keys.
    
     */
    get parentIdExpr(): Function | string;
    set parentIdExpr(value: Function | string);
    /**
     * Notifies the TreeList of the server&apos;s data processing operations. Applies only if data has a plain structure.
    
     */
    get remoteOperations(): Mode | {
        filtering?: boolean;
        grouping?: boolean;
        sorting?: boolean;
    };
    set remoteOperations(value: Mode | {
        filtering?: boolean;
        grouping?: boolean;
        sorting?: boolean;
    });
    /**
     * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.
    
     */
    get renderAsync(): boolean;
    set renderAsync(value: boolean);
    /**
     * Specifies whether to repaint only those cells whose data changed.
    
     */
    get repaintChangesOnly(): boolean;
    set repaintChangesOnly(value: boolean);
    /**
     * Specifies the root node&apos;s identifier. Applies if dataStructure is &apos;plain&apos;.
    
     */
    get rootValue(): any;
    set rootValue(value: any);
    /**
     * Specifies whether rows should be shaded differently.
    
     */
    get rowAlternationEnabled(): boolean;
    set rowAlternationEnabled(value: boolean);
    /**
     * Configures row reordering using drag and drop gestures.
    
     */
    get rowDragging(): {
        allowDropInsideItem?: boolean;
        allowReordering?: boolean;
        autoScroll?: boolean;
        boundary?: any | string | undefined;
        container?: any | string | undefined;
        cursorOffset?: string | {
            x?: number;
            y?: number;
        };
        data?: any | undefined;
        dragDirection?: DragDirection;
        dragTemplate?: any;
        dropFeedbackMode?: DragHighlight;
        filter?: string;
        group?: string | undefined;
        handle?: string;
        onAdd?: ((e: {
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragChange?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragEnd?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragMove?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragStart?: ((e: {
            cancel: boolean;
            component: GridBase;
            event: event;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
        }) => void);
        onRemove?: ((e: {
            component: GridBase;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onReorder?: ((e: {
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            promise: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        scrollSensitivity?: number;
        scrollSpeed?: number;
        showDragIcons?: boolean;
    };
    set rowDragging(value: {
        allowDropInsideItem?: boolean;
        allowReordering?: boolean;
        autoScroll?: boolean;
        boundary?: any | string | undefined;
        container?: any | string | undefined;
        cursorOffset?: string | {
            x?: number;
            y?: number;
        };
        data?: any | undefined;
        dragDirection?: DragDirection;
        dragTemplate?: any;
        dropFeedbackMode?: DragHighlight;
        filter?: string;
        group?: string | undefined;
        handle?: string;
        onAdd?: ((e: {
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragChange?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragEnd?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragMove?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragStart?: ((e: {
            cancel: boolean;
            component: GridBase;
            event: event;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
        }) => void);
        onRemove?: ((e: {
            component: GridBase;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onReorder?: ((e: {
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            promise: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        scrollSensitivity?: number;
        scrollSpeed?: number;
        showDragIcons?: boolean;
    });
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Configures scrolling.
    
     */
    get scrolling(): {
        columnRenderingMode?: DataRenderMode;
        mode?: ScrollMode;
        preloadEnabled?: boolean;
        renderAsync?: boolean | undefined;
        rowRenderingMode?: DataRenderMode;
        scrollByContent?: boolean;
        scrollByThumb?: boolean;
        showScrollbar?: ScrollbarMode;
        useNative?: boolean | Mode;
    };
    set scrolling(value: {
        columnRenderingMode?: DataRenderMode;
        mode?: ScrollMode;
        preloadEnabled?: boolean;
        renderAsync?: boolean | undefined;
        rowRenderingMode?: DataRenderMode;
        scrollByContent?: boolean;
        scrollByThumb?: boolean;
        showScrollbar?: ScrollbarMode;
        useNative?: boolean | Mode;
    });
    /**
     * Configures the search panel.
    
     */
    get searchPanel(): {
        highlightCaseSensitive?: boolean;
        highlightSearchText?: boolean;
        placeholder?: string;
        searchVisibleColumnsOnly?: boolean;
        text?: string;
        visible?: boolean;
        width?: number | string;
    };
    set searchPanel(value: {
        highlightCaseSensitive?: boolean;
        highlightSearchText?: boolean;
        placeholder?: string;
        searchVisibleColumnsOnly?: boolean;
        text?: string;
        visible?: boolean;
        width?: number | string;
    });
    /**
     * Allows you to select rows or determine which rows are selected.
    
     */
    get selectedRowKeys(): Array<any>;
    set selectedRowKeys(value: Array<any>);
    /**
     * Configures runtime selection.
    
     */
    get selection(): {
        allowSelectAll?: boolean;
        mode?: SingleMultipleOrNone;
        recursive?: boolean;
    };
    set selection(value: {
        allowSelectAll?: boolean;
        mode?: SingleMultipleOrNone;
        recursive?: boolean;
    });
    /**
     * Specifies whether the outer borders of the UI component are visible.
    
     */
    get showBorders(): boolean;
    set showBorders(value: boolean);
    /**
     * Specifies whether column headers are visible.
    
     */
    get showColumnHeaders(): boolean;
    set showColumnHeaders(value: boolean);
    /**
     * Specifies whether vertical lines that separate one column from another are visible.
    
     */
    get showColumnLines(): boolean;
    set showColumnLines(value: boolean);
    /**
     * Specifies whether horizontal lines that separate one row from another are visible.
    
     */
    get showRowLines(): boolean;
    set showRowLines(value: boolean);
    /**
     * Configures runtime sorting.
    
     */
    get sorting(): {
        ascendingText?: string;
        clearText?: string;
        descendingText?: string;
        mode?: SingleMultipleOrNone;
        showSortIndexes?: boolean;
    };
    set sorting(value: {
        ascendingText?: string;
        clearText?: string;
        descendingText?: string;
        mode?: SingleMultipleOrNone;
        showSortIndexes?: boolean;
    });
    /**
     * Configures state storing.
    
     */
    get stateStoring(): {
        customLoad?: Function;
        customSave?: ((gridState: any) => void);
        enabled?: boolean;
        savingTimeout?: number;
        storageKey?: string;
        type?: StateStoreType;
    };
    set stateStoring(value: {
        customLoad?: Function;
        customSave?: ((gridState: any) => void);
        enabled?: boolean;
        savingTimeout?: number;
        storageKey?: string;
        type?: StateStoreType;
    });
    /**
     * Specifies whether to show only relevant values in the header filter and filter row.
    
     */
    get syncLookupFilterValues(): boolean;
    set syncLookupFilterValues(value: boolean);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * Configures the toolbar.
    
     */
    get toolbar(): dxTreeListToolbar | undefined;
    set toolbar(value: dxTreeListToolbar | undefined);
    /**
     * Specifies whether to enable two-way data binding.
    
     */
    get twoWayBindingEnabled(): boolean;
    set twoWayBindingEnabled(value: boolean);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): (() => number | string) | number | string | undefined;
    set width(value: (() => number | string) | number | string | undefined);
    /**
     * Specifies whether text that does not fit into a column should be wrapped.
    
     */
    get wordWrapEnabled(): boolean;
    set wordWrapEnabled(value: boolean);
    /**
    
     * A function that is executed before an adaptive detail row is rendered.
    
    
     */
    onAdaptiveDetailRowPreparing: EventEmitter<AdaptiveDetailRowPreparingEvent>;
    /**
    
     * A function that is executed when a cell is clicked or tapped. Executed before onRowClick.
    
    
     */
    onCellClick: EventEmitter<CellClickEvent>;
    /**
    
     * A function that is executed when a cell is double-clicked or double-tapped. Executed before onRowDblClick.
    
    
     */
    onCellDblClick: EventEmitter<CellDblClickEvent>;
    /**
    
     * A function that is executed after the pointer enters or leaves a cell.
    
    
     */
    onCellHoverChanged: EventEmitter<CellHoverChangedEvent>;
    /**
    
     * A function that is executed after a grid cell is created.
    
    
     */
    onCellPrepared: EventEmitter<CellPreparedEvent>;
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * A function that is executed before the context menu is rendered.
    
    
     */
    onContextMenuPreparing: EventEmitter<ContextMenuPreparingEvent>;
    /**
    
     * A function that is executed when an error occurs in the data source.
    
    
     */
    onDataErrorOccurred: EventEmitter<DataErrorOccurredEvent>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function that is executed after row changes are discarded.
    
    
     */
    onEditCanceled: EventEmitter<EditCanceledEvent>;
    /**
    
     * A function that is executed when the edit operation is canceled, but row changes are not yet discarded.
    
    
     */
    onEditCanceling: EventEmitter<EditCancelingEvent>;
    /**
    
     * A function that is executed before a cell or row switches to the editing state.
    
    
     */
    onEditingStart: EventEmitter<EditingStartEvent>;
    /**
    
     * A function that is executed after an editor is created. Not executed for cells with an editCellTemplate.
    
    
     */
    onEditorPrepared: EventEmitter<EditorPreparedEvent>;
    /**
    
     * A function used to customize a cell&apos;s editor. Not executed for cells with an editCellTemplate.
    
    
     */
    onEditorPreparing: EventEmitter<EditorPreparingEvent>;
    /**
    
     * A function that is executed after the focused cell changes. Applies only to cells in data rows.
    
    
     */
    onFocusedCellChanged: EventEmitter<FocusedCellChangedEvent>;
    /**
    
     * A function that is executed before the focused cell changes. Applies only to cells in data rows.
    
    
     */
    onFocusedCellChanging: EventEmitter<FocusedCellChangingEvent>;
    /**
    
     * A function that executed when the focused row changes. Applies only to data rows. focusedRowEnabled should be true.
    
    
     */
    onFocusedRowChanged: EventEmitter<FocusedRowChangedEvent>;
    /**
    
     * A function that is executed before the focused row changes. Applies only to data rows. focusedRowEnabled should be true.
    
    
     */
    onFocusedRowChanging: EventEmitter<FocusedRowChangingEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed before a new row is added to the UI component.
    
    
     */
    onInitNewRow: EventEmitter<InitNewRowEvent>;
    /**
    
     * A function that is executed when the UI component is in focus and a key has been pressed down.
    
    
     */
    onKeyDown: EventEmitter<KeyDownEvent>;
    /**
    
     * A function that is executed after the loaded nodes are initialized.
    
    
     */
    onNodesInitialized: EventEmitter<NodesInitializedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is executed when a grid row is clicked or tapped.
    
    
     */
    onRowClick: EventEmitter<RowClickEvent>;
    /**
    
     * A function that is executed after a row is collapsed.
    
    
     */
    onRowCollapsed: EventEmitter<RowCollapsedEvent>;
    /**
    
     * A function that is executed before a row is collapsed.
    
    
     */
    onRowCollapsing: EventEmitter<RowCollapsingEvent>;
    /**
    
     * A function that is executed when a row is double-clicked or double-tapped. Executed after onCellDblClick.
    
    
     */
    onRowDblClick: EventEmitter<RowDblClickEvent>;
    /**
    
     * A function that is executed after a row is expanded.
    
    
     */
    onRowExpanded: EventEmitter<RowExpandedEvent>;
    /**
    
     * A function that is executed before a row is expanded.
    
    
     */
    onRowExpanding: EventEmitter<RowExpandingEvent>;
    /**
    
     * A function that is executed after a new row has been inserted into the data source.
    
    
     */
    onRowInserted: EventEmitter<RowInsertedEvent>;
    /**
    
     * A function that is executed before a new row is inserted into the data source.
    
    
     */
    onRowInserting: EventEmitter<RowInsertingEvent>;
    /**
    
     * A function that is executed after a row is created.
    
    
     */
    onRowPrepared: EventEmitter<RowPreparedEvent>;
    /**
    
     * A function that is executed after a row has been removed from the data source.
    
    
     */
    onRowRemoved: EventEmitter<RowRemovedEvent>;
    /**
    
     * A function that is executed before a row is removed from the data source.
    
    
     */
    onRowRemoving: EventEmitter<RowRemovingEvent>;
    /**
    
     * A function that is executed after a row has been updated in the data source.
    
    
     */
    onRowUpdated: EventEmitter<RowUpdatedEvent>;
    /**
    
     * A function that is executed before a row is updated in the data source.
    
    
     */
    onRowUpdating: EventEmitter<RowUpdatingEvent>;
    /**
    
     * A function that is executed after cells in a row are validated against validation rules.
    
    
     */
    onRowValidating: EventEmitter<RowValidatingEvent>;
    /**
    
     * A function that is executed after row changes are saved.
    
    
     */
    onSaved: EventEmitter<SavedEvent>;
    /**
    
     * A function that is executed before pending row changes are saved.
    
    
     */
    onSaving: EventEmitter<SavingEvent>;
    /**
    
     * A function that is executed after selecting a row or clearing its selection.
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * A function that is executed before the toolbar is created.
    
    
     */
    onToolbarPreparing: EventEmitter<ToolbarPreparingEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowColumnReorderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowColumnResizingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoExpandAllChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoNavigateToFocusedRowChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cacheEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cellHintEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnAutoWidthChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnChooserChange: EventEmitter<{
        allowSearch?: boolean;
        container?: any | string | undefined;
        emptyPanelText?: string;
        enabled?: boolean;
        height?: number | string;
        mode?: ColumnChooserMode;
        position?: PositionConfig | undefined;
        search?: ColumnChooserSearchConfig;
        searchTimeout?: number;
        selection?: ColumnChooserSelectionConfig;
        sortOrder?: SortOrder | undefined;
        title?: string;
        width?: number | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnFixingChange: EventEmitter<{
        enabled?: boolean;
        icons?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            stickyPosition?: string;
            unfix?: string;
        };
        texts?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            stickyPosition?: string;
            unfix?: string;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnHidingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnMinWidthChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnResizingModeChange: EventEmitter<ColumnResizeMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnsChange: EventEmitter<Array<dxTreeListColumn | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnWidthChange: EventEmitter<Mode | number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeColumnsChange: EventEmitter<((columns: Array<dxTreeListColumn>) => void)>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<Array<any> | DataSource | DataSourceOptions | null | Store | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataStructureChange: EventEmitter<DataStructure>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dateSerializationFormatChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<{
        allowAdding?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        allowDeleting?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        allowUpdating?: boolean | ((options: {
            component: dxTreeList;
            row: dxTreeListRowObject;
        }) => boolean);
        changes?: Array<DataChange>;
        confirmDelete?: boolean;
        editColumnName?: string;
        editRowKey?: any;
        form?: dxFormOptions;
        mode?: GridsEditMode;
        popup?: dxPopupOptions<any>;
        refreshMode?: GridsEditRefreshMode;
        selectTextOnEditStart?: boolean;
        startEditAction?: StartEditAction;
        texts?: {
            addRow?: string;
            addRowToNode?: string;
            cancelAllChanges?: string;
            cancelRowChanges?: string;
            confirmDeleteMessage?: string;
            confirmDeleteTitle?: string;
            deleteRow?: string;
            editRow?: string;
            saveAllChanges?: string;
            saveRowChanges?: string;
            undeleteRow?: string;
            validationCancelChanges?: string;
        };
        useIcons?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<Record<string, any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    errorRowEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandedRowKeysChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandNodesOnFilteringChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterBuilderChange: EventEmitter<dxFilterBuilderOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterBuilderPopupChange: EventEmitter<dxPopupOptions<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterModeChange: EventEmitter<TreeListFilterMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterPanelChange: EventEmitter<{
        customizeText?: ((e: {
            component: GridBase;
            filterValue: Record<string, any>;
            text: string;
        }) => string);
        filterEnabled?: boolean;
        texts?: {
            clearFilter?: string;
            createFilter?: string;
            filterEnabledHint?: string;
        };
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterRowChange: EventEmitter<{
        applyFilter?: ApplyFilterMode;
        applyFilterText?: string;
        betweenEndText?: string;
        betweenStartText?: string;
        operationDescriptions?: {
            between?: string;
            contains?: string;
            endsWith?: string;
            equal?: string;
            greaterThan?: string;
            greaterThanOrEqual?: string;
            lessThan?: string;
            lessThanOrEqual?: string;
            notContains?: string;
            notEqual?: string;
            startsWith?: string;
        };
        resetOperationText?: string;
        showAllText?: string;
        showOperationChooser?: boolean;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterSyncEnabledChange: EventEmitter<boolean | Mode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterValueChange: EventEmitter<Array<any> | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedColumnIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedRowEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedRowIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedRowKeyChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hasItemsExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    headerFilterChange: EventEmitter<{
        allowSearch?: boolean;
        allowSelectAll?: boolean;
        height?: number | string;
        search?: HeaderFilterSearchConfig;
        searchTimeout?: number;
        texts?: {
            cancel?: string;
            emptyValue?: string;
            ok?: string;
        };
        visible?: boolean;
        width?: number | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<(() => number | string) | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    highlightChangesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyboardNavigationChange: EventEmitter<{
        editOnKeyPress?: boolean;
        enabled?: boolean;
        enterKeyAction?: EnterKeyAction;
        enterKeyDirection?: EnterKeyDirection;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadPanelChange: EventEmitter<{
        enabled?: boolean | Mode;
        height?: number | string;
        indicatorSrc?: string;
        shading?: boolean;
        shadingColor?: string;
        showIndicator?: boolean;
        showPane?: boolean;
        text?: string;
        width?: number | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pagerChange: EventEmitter<Pager>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pagingChange: EventEmitter<{
        enabled?: boolean;
        pageIndex?: number;
        pageSize?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    parentIdExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    remoteOperationsChange: EventEmitter<Mode | {
        filtering?: boolean;
        grouping?: boolean;
        sorting?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    renderAsyncChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    repaintChangesOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rootValueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rowAlternationEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rowDraggingChange: EventEmitter<{
        allowDropInsideItem?: boolean;
        allowReordering?: boolean;
        autoScroll?: boolean;
        boundary?: any | string | undefined;
        container?: any | string | undefined;
        cursorOffset?: string | {
            x?: number;
            y?: number;
        };
        data?: any | undefined;
        dragDirection?: DragDirection;
        dragTemplate?: any;
        dropFeedbackMode?: DragHighlight;
        filter?: string;
        group?: string | undefined;
        handle?: string;
        onAdd?: ((e: {
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragChange?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragEnd?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragMove?: ((e: {
            cancel: boolean;
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onDragStart?: ((e: {
            cancel: boolean;
            component: GridBase;
            event: event;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
        }) => void);
        onRemove?: ((e: {
            component: GridBase;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        onReorder?: ((e: {
            component: GridBase;
            dropInsideItem: boolean;
            event: event;
            fromComponent: dxSortable | dxDraggable;
            fromData: any;
            fromIndex: number;
            itemData: any;
            itemElement: any;
            promise: any;
            toComponent: dxSortable | dxDraggable;
            toData: any;
            toIndex: number;
        }) => void);
        scrollSensitivity?: number;
        scrollSpeed?: number;
        showDragIcons?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollingChange: EventEmitter<{
        columnRenderingMode?: DataRenderMode;
        mode?: ScrollMode;
        preloadEnabled?: boolean;
        renderAsync?: boolean | undefined;
        rowRenderingMode?: DataRenderMode;
        scrollByContent?: boolean;
        scrollByThumb?: boolean;
        showScrollbar?: ScrollbarMode;
        useNative?: boolean | Mode;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchPanelChange: EventEmitter<{
        highlightCaseSensitive?: boolean;
        highlightSearchText?: boolean;
        placeholder?: string;
        searchVisibleColumnsOnly?: boolean;
        text?: string;
        visible?: boolean;
        width?: number | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedRowKeysChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionChange: EventEmitter<{
        allowSelectAll?: boolean;
        mode?: SingleMultipleOrNone;
        recursive?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showBordersChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showColumnHeadersChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showColumnLinesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showRowLinesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortingChange: EventEmitter<{
        ascendingText?: string;
        clearText?: string;
        descendingText?: string;
        mode?: SingleMultipleOrNone;
        showSortIndexes?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stateStoringChange: EventEmitter<{
        customLoad?: Function;
        customSave?: ((gridState: any) => void);
        enabled?: boolean;
        savingTimeout?: number;
        storageKey?: string;
        type?: StateStoreType;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    syncLookupFilterValuesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<dxTreeListToolbar | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    twoWayBindingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<(() => number | string) | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wordWrapEnabledChange: EventEmitter<boolean>;
    get columnsChildren(): QueryList<DxiTreeListColumnComponent>;
    set columnsChildren(value: QueryList<DxiTreeListColumnComponent>);
    get columnsLegacyChildren(): QueryList<DxiColumnComponent>;
    set columnsLegacyChildren(value: QueryList<DxiColumnComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): dxTreeList<any, any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxTreeListComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxTreeListComponent<any, any>, "dx-tree-list", never, { "accessKey": { "alias": "accessKey"; "required": false; }; "activeStateEnabled": { "alias": "activeStateEnabled"; "required": false; }; "allowColumnReordering": { "alias": "allowColumnReordering"; "required": false; }; "allowColumnResizing": { "alias": "allowColumnResizing"; "required": false; }; "autoExpandAll": { "alias": "autoExpandAll"; "required": false; }; "autoNavigateToFocusedRow": { "alias": "autoNavigateToFocusedRow"; "required": false; }; "cacheEnabled": { "alias": "cacheEnabled"; "required": false; }; "cellHintEnabled": { "alias": "cellHintEnabled"; "required": false; }; "columnAutoWidth": { "alias": "columnAutoWidth"; "required": false; }; "columnChooser": { "alias": "columnChooser"; "required": false; }; "columnFixing": { "alias": "columnFixing"; "required": false; }; "columnHidingEnabled": { "alias": "columnHidingEnabled"; "required": false; }; "columnMinWidth": { "alias": "columnMinWidth"; "required": false; }; "columnResizingMode": { "alias": "columnResizingMode"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "columnWidth": { "alias": "columnWidth"; "required": false; }; "customizeColumns": { "alias": "customizeColumns"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "dataStructure": { "alias": "dataStructure"; "required": false; }; "dateSerializationFormat": { "alias": "dateSerializationFormat"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "editing": { "alias": "editing"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "errorRowEnabled": { "alias": "errorRowEnabled"; "required": false; }; "expandedRowKeys": { "alias": "expandedRowKeys"; "required": false; }; "expandNodesOnFiltering": { "alias": "expandNodesOnFiltering"; "required": false; }; "filterBuilder": { "alias": "filterBuilder"; "required": false; }; "filterBuilderPopup": { "alias": "filterBuilderPopup"; "required": false; }; "filterMode": { "alias": "filterMode"; "required": false; }; "filterPanel": { "alias": "filterPanel"; "required": false; }; "filterRow": { "alias": "filterRow"; "required": false; }; "filterSyncEnabled": { "alias": "filterSyncEnabled"; "required": false; }; "filterValue": { "alias": "filterValue"; "required": false; }; "focusedColumnIndex": { "alias": "focusedColumnIndex"; "required": false; }; "focusedRowEnabled": { "alias": "focusedRowEnabled"; "required": false; }; "focusedRowIndex": { "alias": "focusedRowIndex"; "required": false; }; "focusedRowKey": { "alias": "focusedRowKey"; "required": false; }; "hasItemsExpr": { "alias": "hasItemsExpr"; "required": false; }; "headerFilter": { "alias": "headerFilter"; "required": false; }; "height": { "alias": "height"; "required": false; }; "highlightChanges": { "alias": "highlightChanges"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "itemsExpr": { "alias": "itemsExpr"; "required": false; }; "keyboardNavigation": { "alias": "keyboardNavigation"; "required": false; }; "keyExpr": { "alias": "keyExpr"; "required": false; }; "loadPanel": { "alias": "loadPanel"; "required": false; }; "noDataText": { "alias": "noDataText"; "required": false; }; "pager": { "alias": "pager"; "required": false; }; "paging": { "alias": "paging"; "required": false; }; "parentIdExpr": { "alias": "parentIdExpr"; "required": false; }; "remoteOperations": { "alias": "remoteOperations"; "required": false; }; "renderAsync": { "alias": "renderAsync"; "required": false; }; "repaintChangesOnly": { "alias": "repaintChangesOnly"; "required": false; }; "rootValue": { "alias": "rootValue"; "required": false; }; "rowAlternationEnabled": { "alias": "rowAlternationEnabled"; "required": false; }; "rowDragging": { "alias": "rowDragging"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "scrolling": { "alias": "scrolling"; "required": false; }; "searchPanel": { "alias": "searchPanel"; "required": false; }; "selectedRowKeys": { "alias": "selectedRowKeys"; "required": false; }; "selection": { "alias": "selection"; "required": false; }; "showBorders": { "alias": "showBorders"; "required": false; }; "showColumnHeaders": { "alias": "showColumnHeaders"; "required": false; }; "showColumnLines": { "alias": "showColumnLines"; "required": false; }; "showRowLines": { "alias": "showRowLines"; "required": false; }; "sorting": { "alias": "sorting"; "required": false; }; "stateStoring": { "alias": "stateStoring"; "required": false; }; "syncLookupFilterValues": { "alias": "syncLookupFilterValues"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "toolbar": { "alias": "toolbar"; "required": false; }; "twoWayBindingEnabled": { "alias": "twoWayBindingEnabled"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; "wordWrapEnabled": { "alias": "wordWrapEnabled"; "required": false; }; }, { "onAdaptiveDetailRowPreparing": "onAdaptiveDetailRowPreparing"; "onCellClick": "onCellClick"; "onCellDblClick": "onCellDblClick"; "onCellHoverChanged": "onCellHoverChanged"; "onCellPrepared": "onCellPrepared"; "onContentReady": "onContentReady"; "onContextMenuPreparing": "onContextMenuPreparing"; "onDataErrorOccurred": "onDataErrorOccurred"; "onDisposing": "onDisposing"; "onEditCanceled": "onEditCanceled"; "onEditCanceling": "onEditCanceling"; "onEditingStart": "onEditingStart"; "onEditorPrepared": "onEditorPrepared"; "onEditorPreparing": "onEditorPreparing"; "onFocusedCellChanged": "onFocusedCellChanged"; "onFocusedCellChanging": "onFocusedCellChanging"; "onFocusedRowChanged": "onFocusedRowChanged"; "onFocusedRowChanging": "onFocusedRowChanging"; "onInitialized": "onInitialized"; "onInitNewRow": "onInitNewRow"; "onKeyDown": "onKeyDown"; "onNodesInitialized": "onNodesInitialized"; "onOptionChanged": "onOptionChanged"; "onRowClick": "onRowClick"; "onRowCollapsed": "onRowCollapsed"; "onRowCollapsing": "onRowCollapsing"; "onRowDblClick": "onRowDblClick"; "onRowExpanded": "onRowExpanded"; "onRowExpanding": "onRowExpanding"; "onRowInserted": "onRowInserted"; "onRowInserting": "onRowInserting"; "onRowPrepared": "onRowPrepared"; "onRowRemoved": "onRowRemoved"; "onRowRemoving": "onRowRemoving"; "onRowUpdated": "onRowUpdated"; "onRowUpdating": "onRowUpdating"; "onRowValidating": "onRowValidating"; "onSaved": "onSaved"; "onSaving": "onSaving"; "onSelectionChanged": "onSelectionChanged"; "onToolbarPreparing": "onToolbarPreparing"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowColumnReorderingChange": "allowColumnReorderingChange"; "allowColumnResizingChange": "allowColumnResizingChange"; "autoExpandAllChange": "autoExpandAllChange"; "autoNavigateToFocusedRowChange": "autoNavigateToFocusedRowChange"; "cacheEnabledChange": "cacheEnabledChange"; "cellHintEnabledChange": "cellHintEnabledChange"; "columnAutoWidthChange": "columnAutoWidthChange"; "columnChooserChange": "columnChooserChange"; "columnFixingChange": "columnFixingChange"; "columnHidingEnabledChange": "columnHidingEnabledChange"; "columnMinWidthChange": "columnMinWidthChange"; "columnResizingModeChange": "columnResizingModeChange"; "columnsChange": "columnsChange"; "columnWidthChange": "columnWidthChange"; "customizeColumnsChange": "customizeColumnsChange"; "dataSourceChange": "dataSourceChange"; "dataStructureChange": "dataStructureChange"; "dateSerializationFormatChange": "dateSerializationFormatChange"; "disabledChange": "disabledChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "errorRowEnabledChange": "errorRowEnabledChange"; "expandedRowKeysChange": "expandedRowKeysChange"; "expandNodesOnFilteringChange": "expandNodesOnFilteringChange"; "filterBuilderChange": "filterBuilderChange"; "filterBuilderPopupChange": "filterBuilderPopupChange"; "filterModeChange": "filterModeChange"; "filterPanelChange": "filterPanelChange"; "filterRowChange": "filterRowChange"; "filterSyncEnabledChange": "filterSyncEnabledChange"; "filterValueChange": "filterValueChange"; "focusedColumnIndexChange": "focusedColumnIndexChange"; "focusedRowEnabledChange": "focusedRowEnabledChange"; "focusedRowIndexChange": "focusedRowIndexChange"; "focusedRowKeyChange": "focusedRowKeyChange"; "hasItemsExprChange": "hasItemsExprChange"; "headerFilterChange": "headerFilterChange"; "heightChange": "heightChange"; "highlightChangesChange": "highlightChangesChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemsExprChange": "itemsExprChange"; "keyboardNavigationChange": "keyboardNavigationChange"; "keyExprChange": "keyExprChange"; "loadPanelChange": "loadPanelChange"; "noDataTextChange": "noDataTextChange"; "pagerChange": "pagerChange"; "pagingChange": "pagingChange"; "parentIdExprChange": "parentIdExprChange"; "remoteOperationsChange": "remoteOperationsChange"; "renderAsyncChange": "renderAsyncChange"; "repaintChangesOnlyChange": "repaintChangesOnlyChange"; "rootValueChange": "rootValueChange"; "rowAlternationEnabledChange": "rowAlternationEnabledChange"; "rowDraggingChange": "rowDraggingChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollingChange": "scrollingChange"; "searchPanelChange": "searchPanelChange"; "selectedRowKeysChange": "selectedRowKeysChange"; "selectionChange": "selectionChange"; "showBordersChange": "showBordersChange"; "showColumnHeadersChange": "showColumnHeadersChange"; "showColumnLinesChange": "showColumnLinesChange"; "showRowLinesChange": "showRowLinesChange"; "sortingChange": "sortingChange"; "stateStoringChange": "stateStoringChange"; "syncLookupFilterValuesChange": "syncLookupFilterValuesChange"; "tabIndexChange": "tabIndexChange"; "toolbarChange": "toolbarChange"; "twoWayBindingEnabledChange": "twoWayBindingEnabledChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "wordWrapEnabledChange": "wordWrapEnabledChange"; }, ["columnsChildren", "columnsLegacyChildren"], never, false, never>;
}
export declare class DxTreeListModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxTreeListModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxTreeListModule, [typeof DxTreeListComponent], [typeof i1.DxoColumnChooserModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoSearchModule, typeof i1.DxoSelectionModule, typeof i1.DxoColumnFixingModule, typeof i1.DxoIconsModule, typeof i1.DxoTextsModule, typeof i1.DxiColumnModule, typeof i1.DxiButtonModule, typeof i1.DxoHeaderFilterModule, typeof i1.DxoLookupModule, typeof i1.DxoFormatModule, typeof i1.DxoFormItemModule, typeof i1.DxoLabelModule, typeof i1.DxiValidationRuleModule, typeof i1.DxoEditingModule, typeof i1.DxiChangeModule, typeof i1.DxoFormModule, typeof i1.DxoColCountByScreenModule, typeof i1.DxiItemModule, typeof i1.DxoTabPanelOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoButtonOptionsModule, typeof i1.DxoPopupModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxoFilterBuilderModule, typeof i1.DxiCustomOperationModule, typeof i1.DxiFieldModule, typeof i1.DxoFilterOperationDescriptionsModule, typeof i1.DxoGroupOperationDescriptionsModule, typeof i1.DxoFilterBuilderPopupModule, typeof i1.DxoFilterPanelModule, typeof i1.DxoFilterRowModule, typeof i1.DxoOperationDescriptionsModule, typeof i1.DxoKeyboardNavigationModule, typeof i1.DxoLoadPanelModule, typeof i1.DxoPagerModule, typeof i1.DxoPagingModule, typeof i1.DxoRemoteOperationsModule, typeof i1.DxoRowDraggingModule, typeof i1.DxoCursorOffsetModule, typeof i1.DxoScrollingModule, typeof i1.DxoSearchPanelModule, typeof i1.DxoSortingModule, typeof i1.DxoStateStoringModule, typeof i1.DxoToolbarModule, typeof i2.DxoTreeListAnimationModule, typeof i2.DxiTreeListAsyncRuleModule, typeof i2.DxoTreeListAtModule, typeof i2.DxoTreeListBoundaryOffsetModule, typeof i2.DxiTreeListButtonModule, typeof i2.DxiTreeListChangeModule, typeof i2.DxoTreeListColCountByScreenModule, typeof i2.DxoTreeListCollisionModule, typeof i2.DxiTreeListColumnModule, typeof i2.DxoTreeListColumnChooserModule, typeof i2.DxoTreeListColumnChooserSearchModule, typeof i2.DxoTreeListColumnChooserSelectionModule, typeof i2.DxoTreeListColumnFixingModule, typeof i2.DxoTreeListColumnFixingTextsModule, typeof i2.DxoTreeListColumnHeaderFilterModule, typeof i2.DxoTreeListColumnHeaderFilterSearchModule, typeof i2.DxoTreeListColumnLookupModule, typeof i2.DxiTreeListCompareRuleModule, typeof i2.DxoTreeListCursorOffsetModule, typeof i2.DxiTreeListCustomOperationModule, typeof i2.DxiTreeListCustomRuleModule, typeof i2.DxoTreeListEditingModule, typeof i2.DxoTreeListEditingTextsModule, typeof i2.DxiTreeListEmailRuleModule, typeof i2.DxiTreeListFieldModule, typeof i2.DxoTreeListFieldLookupModule, typeof i2.DxoTreeListFilterBuilderModule, typeof i2.DxoTreeListFilterBuilderPopupModule, typeof i2.DxoTreeListFilterOperationDescriptionsModule, typeof i2.DxoTreeListFilterPanelModule, typeof i2.DxoTreeListFilterPanelTextsModule, typeof i2.DxoTreeListFilterRowModule, typeof i2.DxoTreeListFormModule, typeof i2.DxoTreeListFormatModule, typeof i2.DxoTreeListFormItemModule, typeof i2.DxoTreeListFromModule, typeof i2.DxoTreeListGroupOperationDescriptionsModule, typeof i2.DxoTreeListHeaderFilterModule, typeof i2.DxoTreeListHideModule, typeof i2.DxoTreeListIconsModule, typeof i2.DxiTreeListItemModule, typeof i2.DxoTreeListKeyboardNavigationModule, typeof i2.DxoTreeListLabelModule, typeof i2.DxoTreeListLoadPanelModule, typeof i2.DxoTreeListLookupModule, typeof i2.DxoTreeListMyModule, typeof i2.DxiTreeListNumericRuleModule, typeof i2.DxoTreeListOffsetModule, typeof i2.DxoTreeListOperationDescriptionsModule, typeof i2.DxoTreeListPagerModule, typeof i2.DxoTreeListPagingModule, typeof i2.DxiTreeListPatternRuleModule, typeof i2.DxoTreeListPopupModule, typeof i2.DxoTreeListPositionModule, typeof i2.DxiTreeListRangeRuleModule, typeof i2.DxoTreeListRemoteOperationsModule, typeof i2.DxiTreeListRequiredRuleModule, typeof i2.DxoTreeListRowDraggingModule, typeof i2.DxoTreeListScrollingModule, typeof i2.DxoTreeListSearchModule, typeof i2.DxoTreeListSearchPanelModule, typeof i2.DxoTreeListSelectionModule, typeof i2.DxoTreeListShowModule, typeof i2.DxoTreeListSortingModule, typeof i2.DxoTreeListStateStoringModule, typeof i2.DxiTreeListStringLengthRuleModule, typeof i2.DxoTreeListTextsModule, typeof i2.DxoTreeListToModule, typeof i2.DxoTreeListToolbarModule, typeof i2.DxiTreeListToolbarItemModule, typeof i2.DxoTreeListTreeListHeaderFilterModule, typeof i2.DxoTreeListTreeListHeaderFilterSearchModule, typeof i2.DxoTreeListTreeListHeaderFilterTextsModule, typeof i2.DxoTreeListTreeListSelectionModule, typeof i2.DxiTreeListValidationRuleModule, typeof i3.DxIntegrationModule, typeof i3.DxTemplateModule], [typeof DxTreeListComponent, typeof i1.DxoColumnChooserModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoSearchModule, typeof i1.DxoSelectionModule, typeof i1.DxoColumnFixingModule, typeof i1.DxoIconsModule, typeof i1.DxoTextsModule, typeof i1.DxiColumnModule, typeof i1.DxiButtonModule, typeof i1.DxoHeaderFilterModule, typeof i1.DxoLookupModule, typeof i1.DxoFormatModule, typeof i1.DxoFormItemModule, typeof i1.DxoLabelModule, typeof i1.DxiValidationRuleModule, typeof i1.DxoEditingModule, typeof i1.DxiChangeModule, typeof i1.DxoFormModule, typeof i1.DxoColCountByScreenModule, typeof i1.DxiItemModule, typeof i1.DxoTabPanelOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoButtonOptionsModule, typeof i1.DxoPopupModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxoFilterBuilderModule, typeof i1.DxiCustomOperationModule, typeof i1.DxiFieldModule, typeof i1.DxoFilterOperationDescriptionsModule, typeof i1.DxoGroupOperationDescriptionsModule, typeof i1.DxoFilterBuilderPopupModule, typeof i1.DxoFilterPanelModule, typeof i1.DxoFilterRowModule, typeof i1.DxoOperationDescriptionsModule, typeof i1.DxoKeyboardNavigationModule, typeof i1.DxoLoadPanelModule, typeof i1.DxoPagerModule, typeof i1.DxoPagingModule, typeof i1.DxoRemoteOperationsModule, typeof i1.DxoRowDraggingModule, typeof i1.DxoCursorOffsetModule, typeof i1.DxoScrollingModule, typeof i1.DxoSearchPanelModule, typeof i1.DxoSortingModule, typeof i1.DxoStateStoringModule, typeof i1.DxoToolbarModule, typeof i2.DxoTreeListAnimationModule, typeof i2.DxiTreeListAsyncRuleModule, typeof i2.DxoTreeListAtModule, typeof i2.DxoTreeListBoundaryOffsetModule, typeof i2.DxiTreeListButtonModule, typeof i2.DxiTreeListChangeModule, typeof i2.DxoTreeListColCountByScreenModule, typeof i2.DxoTreeListCollisionModule, typeof i2.DxiTreeListColumnModule, typeof i2.DxoTreeListColumnChooserModule, typeof i2.DxoTreeListColumnChooserSearchModule, typeof i2.DxoTreeListColumnChooserSelectionModule, typeof i2.DxoTreeListColumnFixingModule, typeof i2.DxoTreeListColumnFixingTextsModule, typeof i2.DxoTreeListColumnHeaderFilterModule, typeof i2.DxoTreeListColumnHeaderFilterSearchModule, typeof i2.DxoTreeListColumnLookupModule, typeof i2.DxiTreeListCompareRuleModule, typeof i2.DxoTreeListCursorOffsetModule, typeof i2.DxiTreeListCustomOperationModule, typeof i2.DxiTreeListCustomRuleModule, typeof i2.DxoTreeListEditingModule, typeof i2.DxoTreeListEditingTextsModule, typeof i2.DxiTreeListEmailRuleModule, typeof i2.DxiTreeListFieldModule, typeof i2.DxoTreeListFieldLookupModule, typeof i2.DxoTreeListFilterBuilderModule, typeof i2.DxoTreeListFilterBuilderPopupModule, typeof i2.DxoTreeListFilterOperationDescriptionsModule, typeof i2.DxoTreeListFilterPanelModule, typeof i2.DxoTreeListFilterPanelTextsModule, typeof i2.DxoTreeListFilterRowModule, typeof i2.DxoTreeListFormModule, typeof i2.DxoTreeListFormatModule, typeof i2.DxoTreeListFormItemModule, typeof i2.DxoTreeListFromModule, typeof i2.DxoTreeListGroupOperationDescriptionsModule, typeof i2.DxoTreeListHeaderFilterModule, typeof i2.DxoTreeListHideModule, typeof i2.DxoTreeListIconsModule, typeof i2.DxiTreeListItemModule, typeof i2.DxoTreeListKeyboardNavigationModule, typeof i2.DxoTreeListLabelModule, typeof i2.DxoTreeListLoadPanelModule, typeof i2.DxoTreeListLookupModule, typeof i2.DxoTreeListMyModule, typeof i2.DxiTreeListNumericRuleModule, typeof i2.DxoTreeListOffsetModule, typeof i2.DxoTreeListOperationDescriptionsModule, typeof i2.DxoTreeListPagerModule, typeof i2.DxoTreeListPagingModule, typeof i2.DxiTreeListPatternRuleModule, typeof i2.DxoTreeListPopupModule, typeof i2.DxoTreeListPositionModule, typeof i2.DxiTreeListRangeRuleModule, typeof i2.DxoTreeListRemoteOperationsModule, typeof i2.DxiTreeListRequiredRuleModule, typeof i2.DxoTreeListRowDraggingModule, typeof i2.DxoTreeListScrollingModule, typeof i2.DxoTreeListSearchModule, typeof i2.DxoTreeListSearchPanelModule, typeof i2.DxoTreeListSelectionModule, typeof i2.DxoTreeListShowModule, typeof i2.DxoTreeListSortingModule, typeof i2.DxoTreeListStateStoringModule, typeof i2.DxiTreeListStringLengthRuleModule, typeof i2.DxoTreeListTextsModule, typeof i2.DxoTreeListToModule, typeof i2.DxoTreeListToolbarModule, typeof i2.DxiTreeListToolbarItemModule, typeof i2.DxoTreeListTreeListHeaderFilterModule, typeof i2.DxoTreeListTreeListHeaderFilterSearchModule, typeof i2.DxoTreeListTreeListHeaderFilterTextsModule, typeof i2.DxoTreeListTreeListSelectionModule, typeof i2.DxiTreeListValidationRuleModule, typeof i3.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxTreeListModule>;
}
export { DxTreeListTypes };
