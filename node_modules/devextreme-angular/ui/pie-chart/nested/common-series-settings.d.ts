/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { ChartsDataType, DashStyle, ChartsColor, HatchDirection, Font, LabelPosition, TextOverflow, WordWrap } from 'devextreme/common/charts';
import { PieChartSeriesInteractionMode, SmallValuesGroupingMode } from 'devextreme/viz/pie_chart';
import { Format } from 'devextreme/common/core/localization';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoPieChartCommonSeriesSettingsComponent extends NestedOption implements OnDestroy, OnInit {
    get argumentField(): string;
    set argumentField(value: string);
    get argumentType(): ChartsDataType | undefined;
    set argumentType(value: ChartsDataType | undefined);
    get border(): {
        color?: string | undefined;
        dashStyle?: DashStyle | undefined;
        visible?: boolean;
        width?: number;
    };
    set border(value: {
        color?: string | undefined;
        dashStyle?: DashStyle | undefined;
        visible?: boolean;
        width?: number;
    });
    get color(): ChartsColor | string | undefined;
    set color(value: ChartsColor | string | undefined);
    get hoverMode(): PieChartSeriesInteractionMode;
    set hoverMode(value: PieChartSeriesInteractionMode);
    get hoverStyle(): {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
    };
    set hoverStyle(value: {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
    });
    get label(): {
        argumentFormat?: Format | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: ((pointInfo: any) => string);
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | undefined;
        position?: LabelPosition;
        radialOffset?: number;
        rotationAngle?: number;
        textOverflow?: TextOverflow;
        visible?: boolean;
        wordWrap?: WordWrap;
    };
    set label(value: {
        argumentFormat?: Format | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: ((pointInfo: any) => string);
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | undefined;
        position?: LabelPosition;
        radialOffset?: number;
        rotationAngle?: number;
        textOverflow?: TextOverflow;
        visible?: boolean;
        wordWrap?: WordWrap;
    });
    get maxLabelCount(): number | undefined;
    set maxLabelCount(value: number | undefined);
    get minSegmentSize(): number | undefined;
    set minSegmentSize(value: number | undefined);
    get selectionMode(): PieChartSeriesInteractionMode;
    set selectionMode(value: PieChartSeriesInteractionMode);
    get selectionStyle(): {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
    };
    set selectionStyle(value: {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
    });
    get smallValuesGrouping(): {
        groupName?: string;
        mode?: SmallValuesGroupingMode;
        threshold?: number | undefined;
        topCount?: number | undefined;
    };
    set smallValuesGrouping(value: {
        groupName?: string;
        mode?: SmallValuesGroupingMode;
        threshold?: number | undefined;
        topCount?: number | undefined;
    });
    get tagField(): string;
    set tagField(value: string);
    get valueField(): string;
    set valueField(value: string);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoPieChartCommonSeriesSettingsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoPieChartCommonSeriesSettingsComponent, "dxo-pie-chart-common-series-settings", never, { "argumentField": { "alias": "argumentField"; "required": false; }; "argumentType": { "alias": "argumentType"; "required": false; }; "border": { "alias": "border"; "required": false; }; "color": { "alias": "color"; "required": false; }; "hoverMode": { "alias": "hoverMode"; "required": false; }; "hoverStyle": { "alias": "hoverStyle"; "required": false; }; "label": { "alias": "label"; "required": false; }; "maxLabelCount": { "alias": "maxLabelCount"; "required": false; }; "minSegmentSize": { "alias": "minSegmentSize"; "required": false; }; "selectionMode": { "alias": "selectionMode"; "required": false; }; "selectionStyle": { "alias": "selectionStyle"; "required": false; }; "smallValuesGrouping": { "alias": "smallValuesGrouping"; "required": false; }; "tagField": { "alias": "tagField"; "required": false; }; "valueField": { "alias": "valueField"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class DxoPieChartCommonSeriesSettingsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoPieChartCommonSeriesSettingsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoPieChartCommonSeriesSettingsModule, [typeof DxoPieChartCommonSeriesSettingsComponent], never, [typeof DxoPieChartCommonSeriesSettingsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoPieChartCommonSeriesSettingsModule>;
}
