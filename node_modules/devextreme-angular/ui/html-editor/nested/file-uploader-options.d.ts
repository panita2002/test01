/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import UploadInfo from 'devextreme/file_management/upload_info';
import { BeforeSendEvent, ContentReadyEvent, DisposingEvent, DropZoneEnterEvent, DropZoneLeaveEvent, FilesUploadedEvent, InitializedEvent, OptionChangedEvent, ProgressEvent, UploadAbortedEvent, UploadedEvent, UploadErrorEvent, UploadStartedEvent, ValueChangedEvent, UploadHttpMethod, FileUploadMode } from 'devextreme/ui/file_uploader';
import { ValidationStatus } from 'devextreme/common';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoHtmlEditorFileUploaderOptionsComponent extends NestedOption implements OnDestroy, OnInit {
    get abortUpload(): ((file: any, uploadInfo?: UploadInfo) => any);
    set abortUpload(value: ((file: any, uploadInfo?: UploadInfo) => any));
    get accept(): string;
    set accept(value: string);
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    get allowCanceling(): boolean;
    set allowCanceling(value: boolean);
    get allowedFileExtensions(): Array<string>;
    set allowedFileExtensions(value: Array<string>);
    get chunkSize(): number;
    set chunkSize(value: number);
    get dialogTrigger(): any | string | undefined;
    set dialogTrigger(value: any | string | undefined);
    get disabled(): boolean;
    set disabled(value: boolean);
    get dropZone(): any | string | undefined;
    set dropZone(value: any | string | undefined);
    get elementAttr(): Record<string, any>;
    set elementAttr(value: Record<string, any>);
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    get height(): (() => number | string) | number | string | undefined;
    set height(value: (() => number | string) | number | string | undefined);
    get hint(): string | undefined;
    set hint(value: string | undefined);
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    get inputAttr(): any;
    set inputAttr(value: any);
    get invalidFileExtensionMessage(): string;
    set invalidFileExtensionMessage(value: string);
    get invalidMaxFileSizeMessage(): string;
    set invalidMaxFileSizeMessage(value: string);
    get invalidMinFileSizeMessage(): string;
    set invalidMinFileSizeMessage(value: string);
    get isDirty(): boolean;
    set isDirty(value: boolean);
    get isValid(): boolean;
    set isValid(value: boolean);
    get labelText(): string;
    set labelText(value: string);
    get maxFileSize(): number;
    set maxFileSize(value: number);
    get minFileSize(): number;
    set minFileSize(value: number);
    get multiple(): boolean;
    set multiple(value: boolean);
    get name(): string;
    set name(value: string);
    get onBeforeSend(): ((e: BeforeSendEvent) => void);
    set onBeforeSend(value: ((e: BeforeSendEvent) => void));
    get onContentReady(): ((e: ContentReadyEvent) => void);
    set onContentReady(value: ((e: ContentReadyEvent) => void));
    get onDisposing(): ((e: DisposingEvent) => void);
    set onDisposing(value: ((e: DisposingEvent) => void));
    get onDropZoneEnter(): ((e: DropZoneEnterEvent) => void);
    set onDropZoneEnter(value: ((e: DropZoneEnterEvent) => void));
    get onDropZoneLeave(): ((e: DropZoneLeaveEvent) => void);
    set onDropZoneLeave(value: ((e: DropZoneLeaveEvent) => void));
    get onFilesUploaded(): ((e: FilesUploadedEvent) => void);
    set onFilesUploaded(value: ((e: FilesUploadedEvent) => void));
    get onInitialized(): ((e: InitializedEvent) => void);
    set onInitialized(value: ((e: InitializedEvent) => void));
    get onOptionChanged(): ((e: OptionChangedEvent) => void);
    set onOptionChanged(value: ((e: OptionChangedEvent) => void));
    get onProgress(): ((e: ProgressEvent) => void);
    set onProgress(value: ((e: ProgressEvent) => void));
    get onUploadAborted(): ((e: UploadAbortedEvent) => void);
    set onUploadAborted(value: ((e: UploadAbortedEvent) => void));
    get onUploaded(): ((e: UploadedEvent) => void);
    set onUploaded(value: ((e: UploadedEvent) => void));
    get onUploadError(): ((e: UploadErrorEvent) => void);
    set onUploadError(value: ((e: UploadErrorEvent) => void));
    get onUploadStarted(): ((e: UploadStartedEvent) => void);
    set onUploadStarted(value: ((e: UploadStartedEvent) => void));
    get onValueChanged(): ((e: ValueChangedEvent) => void);
    set onValueChanged(value: ((e: ValueChangedEvent) => void));
    get progress(): number;
    set progress(value: number);
    get readOnly(): boolean;
    set readOnly(value: boolean);
    get readyToUploadMessage(): string;
    set readyToUploadMessage(value: string);
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    get selectButtonText(): string;
    set selectButtonText(value: string);
    get showFileList(): boolean;
    set showFileList(value: boolean);
    get tabIndex(): number;
    set tabIndex(value: number);
    get uploadAbortedMessage(): string;
    set uploadAbortedMessage(value: string);
    get uploadButtonText(): string;
    set uploadButtonText(value: string);
    get uploadChunk(): ((file: any, uploadInfo: UploadInfo) => any);
    set uploadChunk(value: ((file: any, uploadInfo: UploadInfo) => any));
    get uploadCustomData(): any;
    set uploadCustomData(value: any);
    get uploadedMessage(): string;
    set uploadedMessage(value: string);
    get uploadFailedMessage(): string;
    set uploadFailedMessage(value: string);
    get uploadFile(): ((file: any, progressCallback: Function) => any);
    set uploadFile(value: ((file: any, progressCallback: Function) => any));
    get uploadHeaders(): any;
    set uploadHeaders(value: any);
    get uploadMethod(): UploadHttpMethod;
    set uploadMethod(value: UploadHttpMethod);
    get uploadMode(): FileUploadMode;
    set uploadMode(value: FileUploadMode);
    get uploadUrl(): string;
    set uploadUrl(value: string);
    get validationError(): any;
    set validationError(value: any);
    get validationErrors(): Array<any>;
    set validationErrors(value: Array<any>);
    get validationStatus(): ValidationStatus;
    set validationStatus(value: ValidationStatus);
    get value(): Array<any>;
    set value(value: Array<any>);
    get visible(): boolean;
    set visible(value: boolean);
    get width(): (() => number | string) | number | string | undefined;
    set width(value: (() => number | string) | number | string | undefined);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<Array<any>>;
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoHtmlEditorFileUploaderOptionsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoHtmlEditorFileUploaderOptionsComponent, "dxo-html-editor-file-uploader-options", never, { "abortUpload": { "alias": "abortUpload"; "required": false; }; "accept": { "alias": "accept"; "required": false; }; "accessKey": { "alias": "accessKey"; "required": false; }; "activeStateEnabled": { "alias": "activeStateEnabled"; "required": false; }; "allowCanceling": { "alias": "allowCanceling"; "required": false; }; "allowedFileExtensions": { "alias": "allowedFileExtensions"; "required": false; }; "chunkSize": { "alias": "chunkSize"; "required": false; }; "dialogTrigger": { "alias": "dialogTrigger"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "dropZone": { "alias": "dropZone"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "focusStateEnabled": { "alias": "focusStateEnabled"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "inputAttr": { "alias": "inputAttr"; "required": false; }; "invalidFileExtensionMessage": { "alias": "invalidFileExtensionMessage"; "required": false; }; "invalidMaxFileSizeMessage": { "alias": "invalidMaxFileSizeMessage"; "required": false; }; "invalidMinFileSizeMessage": { "alias": "invalidMinFileSizeMessage"; "required": false; }; "isDirty": { "alias": "isDirty"; "required": false; }; "isValid": { "alias": "isValid"; "required": false; }; "labelText": { "alias": "labelText"; "required": false; }; "maxFileSize": { "alias": "maxFileSize"; "required": false; }; "minFileSize": { "alias": "minFileSize"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "name": { "alias": "name"; "required": false; }; "onBeforeSend": { "alias": "onBeforeSend"; "required": false; }; "onContentReady": { "alias": "onContentReady"; "required": false; }; "onDisposing": { "alias": "onDisposing"; "required": false; }; "onDropZoneEnter": { "alias": "onDropZoneEnter"; "required": false; }; "onDropZoneLeave": { "alias": "onDropZoneLeave"; "required": false; }; "onFilesUploaded": { "alias": "onFilesUploaded"; "required": false; }; "onInitialized": { "alias": "onInitialized"; "required": false; }; "onOptionChanged": { "alias": "onOptionChanged"; "required": false; }; "onProgress": { "alias": "onProgress"; "required": false; }; "onUploadAborted": { "alias": "onUploadAborted"; "required": false; }; "onUploaded": { "alias": "onUploaded"; "required": false; }; "onUploadError": { "alias": "onUploadError"; "required": false; }; "onUploadStarted": { "alias": "onUploadStarted"; "required": false; }; "onValueChanged": { "alias": "onValueChanged"; "required": false; }; "progress": { "alias": "progress"; "required": false; }; "readOnly": { "alias": "readOnly"; "required": false; }; "readyToUploadMessage": { "alias": "readyToUploadMessage"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "selectButtonText": { "alias": "selectButtonText"; "required": false; }; "showFileList": { "alias": "showFileList"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "uploadAbortedMessage": { "alias": "uploadAbortedMessage"; "required": false; }; "uploadButtonText": { "alias": "uploadButtonText"; "required": false; }; "uploadChunk": { "alias": "uploadChunk"; "required": false; }; "uploadCustomData": { "alias": "uploadCustomData"; "required": false; }; "uploadedMessage": { "alias": "uploadedMessage"; "required": false; }; "uploadFailedMessage": { "alias": "uploadFailedMessage"; "required": false; }; "uploadFile": { "alias": "uploadFile"; "required": false; }; "uploadHeaders": { "alias": "uploadHeaders"; "required": false; }; "uploadMethod": { "alias": "uploadMethod"; "required": false; }; "uploadMode": { "alias": "uploadMode"; "required": false; }; "uploadUrl": { "alias": "uploadUrl"; "required": false; }; "validationError": { "alias": "validationError"; "required": false; }; "validationErrors": { "alias": "validationErrors"; "required": false; }; "validationStatus": { "alias": "validationStatus"; "required": false; }; "value": { "alias": "value"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "valueChange": "valueChange"; }, never, never, false, never>;
}
export declare class DxoHtmlEditorFileUploaderOptionsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoHtmlEditorFileUploaderOptionsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoHtmlEditorFileUploaderOptionsModule, [typeof DxoHtmlEditorFileUploaderOptionsComponent], never, [typeof DxoHtmlEditorFileUploaderOptionsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoHtmlEditorFileUploaderOptionsModule>;
}
