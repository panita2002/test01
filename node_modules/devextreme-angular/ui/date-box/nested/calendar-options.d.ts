/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { DisabledDate, CalendarZoomLevel, DisposingEvent, InitializedEvent, OptionChangedEvent, ValueChangedEvent, CalendarSelectionMode, WeekNumberRule } from 'devextreme/ui/calendar';
import { FirstDayOfWeek, ValidationMessageMode, Position, ValidationStatus } from 'devextreme/common';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoDateBoxCalendarOptionsComponent extends NestedOption implements OnDestroy, OnInit {
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    get cellTemplate(): any;
    set cellTemplate(value: any);
    get dateSerializationFormat(): string | undefined;
    set dateSerializationFormat(value: string | undefined);
    get disabled(): boolean;
    set disabled(value: boolean);
    get disabledDates(): Array<Date> | ((data: DisabledDate) => boolean);
    set disabledDates(value: Array<Date> | ((data: DisabledDate) => boolean));
    get elementAttr(): Record<string, any>;
    set elementAttr(value: Record<string, any>);
    get firstDayOfWeek(): FirstDayOfWeek | undefined;
    set firstDayOfWeek(value: FirstDayOfWeek | undefined);
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    get height(): (() => number | string) | number | string | undefined;
    set height(value: (() => number | string) | number | string | undefined);
    get hint(): string | undefined;
    set hint(value: string | undefined);
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    get isDirty(): boolean;
    set isDirty(value: boolean);
    get isValid(): boolean;
    set isValid(value: boolean);
    get max(): Date | number | string;
    set max(value: Date | number | string);
    get maxZoomLevel(): CalendarZoomLevel;
    set maxZoomLevel(value: CalendarZoomLevel);
    get min(): Date | number | string;
    set min(value: Date | number | string);
    get minZoomLevel(): CalendarZoomLevel;
    set minZoomLevel(value: CalendarZoomLevel);
    get name(): string;
    set name(value: string);
    get onDisposing(): ((e: DisposingEvent) => void);
    set onDisposing(value: ((e: DisposingEvent) => void));
    get onInitialized(): ((e: InitializedEvent) => void);
    set onInitialized(value: ((e: InitializedEvent) => void));
    get onOptionChanged(): ((e: OptionChangedEvent) => void);
    set onOptionChanged(value: ((e: OptionChangedEvent) => void));
    get onValueChanged(): ((e: ValueChangedEvent) => void);
    set onValueChanged(value: ((e: ValueChangedEvent) => void));
    get readOnly(): boolean;
    set readOnly(value: boolean);
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    get selectionMode(): CalendarSelectionMode;
    set selectionMode(value: CalendarSelectionMode);
    get selectWeekOnClick(): boolean;
    set selectWeekOnClick(value: boolean);
    get showTodayButton(): boolean;
    set showTodayButton(value: boolean);
    get showWeekNumbers(): boolean;
    set showWeekNumbers(value: boolean);
    get tabIndex(): number;
    set tabIndex(value: number);
    get validationError(): any;
    set validationError(value: any);
    get validationErrors(): Array<any>;
    set validationErrors(value: Array<any>);
    get validationMessageMode(): ValidationMessageMode;
    set validationMessageMode(value: ValidationMessageMode);
    get validationMessagePosition(): Position;
    set validationMessagePosition(value: Position);
    get validationStatus(): ValidationStatus;
    set validationStatus(value: ValidationStatus);
    get value(): Array<Date | number | string> | Date | number | string;
    set value(value: Array<Date | number | string> | Date | number | string);
    get visible(): boolean;
    set visible(value: boolean);
    get weekNumberRule(): WeekNumberRule;
    set weekNumberRule(value: WeekNumberRule);
    get width(): (() => number | string) | number | string | undefined;
    set width(value: (() => number | string) | number | string | undefined);
    get zoomLevel(): CalendarZoomLevel;
    set zoomLevel(value: CalendarZoomLevel);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<Array<Date | number | string> | Date | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomLevelChange: EventEmitter<CalendarZoomLevel>;
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoDateBoxCalendarOptionsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoDateBoxCalendarOptionsComponent, "dxo-date-box-calendar-options", never, { "accessKey": { "alias": "accessKey"; "required": false; }; "activeStateEnabled": { "alias": "activeStateEnabled"; "required": false; }; "cellTemplate": { "alias": "cellTemplate"; "required": false; }; "dateSerializationFormat": { "alias": "dateSerializationFormat"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "disabledDates": { "alias": "disabledDates"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "firstDayOfWeek": { "alias": "firstDayOfWeek"; "required": false; }; "focusStateEnabled": { "alias": "focusStateEnabled"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "isDirty": { "alias": "isDirty"; "required": false; }; "isValid": { "alias": "isValid"; "required": false; }; "max": { "alias": "max"; "required": false; }; "maxZoomLevel": { "alias": "maxZoomLevel"; "required": false; }; "min": { "alias": "min"; "required": false; }; "minZoomLevel": { "alias": "minZoomLevel"; "required": false; }; "name": { "alias": "name"; "required": false; }; "onDisposing": { "alias": "onDisposing"; "required": false; }; "onInitialized": { "alias": "onInitialized"; "required": false; }; "onOptionChanged": { "alias": "onOptionChanged"; "required": false; }; "onValueChanged": { "alias": "onValueChanged"; "required": false; }; "readOnly": { "alias": "readOnly"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "selectionMode": { "alias": "selectionMode"; "required": false; }; "selectWeekOnClick": { "alias": "selectWeekOnClick"; "required": false; }; "showTodayButton": { "alias": "showTodayButton"; "required": false; }; "showWeekNumbers": { "alias": "showWeekNumbers"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "validationError": { "alias": "validationError"; "required": false; }; "validationErrors": { "alias": "validationErrors"; "required": false; }; "validationMessageMode": { "alias": "validationMessageMode"; "required": false; }; "validationMessagePosition": { "alias": "validationMessagePosition"; "required": false; }; "validationStatus": { "alias": "validationStatus"; "required": false; }; "value": { "alias": "value"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "weekNumberRule": { "alias": "weekNumberRule"; "required": false; }; "width": { "alias": "width"; "required": false; }; "zoomLevel": { "alias": "zoomLevel"; "required": false; }; }, { "valueChange": "valueChange"; "zoomLevelChange": "zoomLevelChange"; }, never, never, false, never>;
}
export declare class DxoDateBoxCalendarOptionsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoDateBoxCalendarOptionsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoDateBoxCalendarOptionsModule, [typeof DxoDateBoxCalendarOptionsComponent], never, [typeof DxoDateBoxCalendarOptionsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoDateBoxCalendarOptionsModule>;
}
