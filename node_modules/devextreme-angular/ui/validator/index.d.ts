/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import * as CommonTypes from 'devextreme/common';
import { EventInfo } from 'devextreme/common/core/events';
import DxValidator from 'devextreme/ui/validator';
import { DxComponentExtension, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiValidationRuleComponent } from 'devextreme-angular/ui/nested';
import { DxiValidatorAsyncRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorCompareRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorCustomRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorEmailRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorNumericRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorPatternRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorRangeRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorRequiredRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorStringLengthRuleComponent } from 'devextreme-angular/ui/validator/nested';
import { DxiValidatorValidationRuleComponent } from 'devextreme-angular/ui/validator/nested';
import type * as DxValidatorTypes from "devextreme/ui/validator_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/ui/validator/nested";
import * as i3 from "devextreme-angular/core";
/**
 * A UI component that is used to validate the associated DevExtreme editors against the defined validation rules.

 */
export declare class DxValidatorComponent extends DxComponentExtension implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxValidator;
    /**
     * An object that specifies what and when to validate, and how to apply the validation result.
    
     */
    get adapter(): {
        applyValidationResults?: Function;
        bypass?: Function;
        focus?: Function;
        getValue?: Function;
        reset?: Function;
        validationRequestsCallbacks?: Array<Function>;
    };
    set adapter(value: {
        applyValidationResults?: Function;
        bypass?: Function;
        focus?: Function;
        getValue?: Function;
        reset?: Function;
        validationRequestsCallbacks?: Array<Function>;
    });
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): Record<string, any>;
    set elementAttr(value: Record<string, any>);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): (() => number | string) | number | string | undefined;
    set height(value: (() => number | string) | number | string | undefined);
    /**
     * Specifies the editor name to be used in the validation default messages.
    
     */
    get name(): string;
    set name(value: string);
    /**
     * Specifies the validation group the editor will be related to.
    
     */
    get validationGroup(): string;
    set validationGroup(value: string);
    /**
     * An array of validation rules to be checked for the editor with which the dxValidator object is associated.
    
     */
    get validationRules(): Array<CommonTypes.ValidationRule>;
    set validationRules(value: Array<CommonTypes.ValidationRule>);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): (() => number | string) | number | string | undefined;
    set width(value: (() => number | string) | number | string | undefined);
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<EventInfo<any>>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<Object>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<Object>;
    /**
    
     * A function that is executed after a value is validated.
    
    
     */
    onValidated: EventEmitter<Object>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adapterChange: EventEmitter<{
        applyValidationResults?: Function;
        bypass?: Function;
        focus?: Function;
        getValue?: Function;
        reset?: Function;
        validationRequestsCallbacks?: Array<Function>;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<Record<string, any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<(() => number | string) | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationGroupChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationRulesChange: EventEmitter<Array<CommonTypes.ValidationRule>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<(() => number | string) | number | string | undefined>;
    get asyncRulesChildren(): QueryList<DxiValidatorAsyncRuleComponent>;
    set asyncRulesChildren(value: QueryList<DxiValidatorAsyncRuleComponent>);
    get compareRulesChildren(): QueryList<DxiValidatorCompareRuleComponent>;
    set compareRulesChildren(value: QueryList<DxiValidatorCompareRuleComponent>);
    get customRulesChildren(): QueryList<DxiValidatorCustomRuleComponent>;
    set customRulesChildren(value: QueryList<DxiValidatorCustomRuleComponent>);
    get emailRulesChildren(): QueryList<DxiValidatorEmailRuleComponent>;
    set emailRulesChildren(value: QueryList<DxiValidatorEmailRuleComponent>);
    get numericRulesChildren(): QueryList<DxiValidatorNumericRuleComponent>;
    set numericRulesChildren(value: QueryList<DxiValidatorNumericRuleComponent>);
    get patternRulesChildren(): QueryList<DxiValidatorPatternRuleComponent>;
    set patternRulesChildren(value: QueryList<DxiValidatorPatternRuleComponent>);
    get rangeRulesChildren(): QueryList<DxiValidatorRangeRuleComponent>;
    set rangeRulesChildren(value: QueryList<DxiValidatorRangeRuleComponent>);
    get requiredRulesChildren(): QueryList<DxiValidatorRequiredRuleComponent>;
    set requiredRulesChildren(value: QueryList<DxiValidatorRequiredRuleComponent>);
    get stringLengthRulesChildren(): QueryList<DxiValidatorStringLengthRuleComponent>;
    set stringLengthRulesChildren(value: QueryList<DxiValidatorStringLengthRuleComponent>);
    get validationRulesChildren(): QueryList<DxiValidatorValidationRuleComponent>;
    set validationRulesChildren(value: QueryList<DxiValidatorValidationRuleComponent>);
    get validationRulesLegacyChildren(): QueryList<DxiValidationRuleComponent>;
    set validationRulesLegacyChildren(value: QueryList<DxiValidationRuleComponent>);
    parentElement: any;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxValidator;
    private getParentElement;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxValidatorComponent, [null, null, null, null, null, { optional: true; host: true; skipSelf: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxValidatorComponent, "dx-validator", never, { "adapter": { "alias": "adapter"; "required": false; }; "elementAttr": { "alias": "elementAttr"; "required": false; }; "height": { "alias": "height"; "required": false; }; "name": { "alias": "name"; "required": false; }; "validationGroup": { "alias": "validationGroup"; "required": false; }; "validationRules": { "alias": "validationRules"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onValidated": "onValidated"; "adapterChange": "adapterChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "nameChange": "nameChange"; "validationGroupChange": "validationGroupChange"; "validationRulesChange": "validationRulesChange"; "widthChange": "widthChange"; }, ["asyncRulesChildren", "compareRulesChildren", "customRulesChildren", "emailRulesChildren", "numericRulesChildren", "patternRulesChildren", "rangeRulesChildren", "requiredRulesChildren", "stringLengthRulesChildren", "validationRulesChildren", "validationRulesLegacyChildren"], never, false, never>;
}
export declare class DxValidatorModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxValidatorModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxValidatorModule, [typeof DxValidatorComponent], [typeof i1.DxoAdapterModule, typeof i1.DxiValidationRuleModule, typeof i2.DxoValidatorAdapterModule, typeof i2.DxiValidatorAsyncRuleModule, typeof i2.DxiValidatorCompareRuleModule, typeof i2.DxiValidatorCustomRuleModule, typeof i2.DxiValidatorEmailRuleModule, typeof i2.DxiValidatorNumericRuleModule, typeof i2.DxiValidatorPatternRuleModule, typeof i2.DxiValidatorRangeRuleModule, typeof i2.DxiValidatorRequiredRuleModule, typeof i2.DxiValidatorStringLengthRuleModule, typeof i2.DxiValidatorValidationRuleModule, typeof i3.DxIntegrationModule, typeof i3.DxTemplateModule], [typeof DxValidatorComponent, typeof i1.DxoAdapterModule, typeof i1.DxiValidationRuleModule, typeof i2.DxoValidatorAdapterModule, typeof i2.DxiValidatorAsyncRuleModule, typeof i2.DxiValidatorCompareRuleModule, typeof i2.DxiValidatorCustomRuleModule, typeof i2.DxiValidatorEmailRuleModule, typeof i2.DxiValidatorNumericRuleModule, typeof i2.DxiValidatorPatternRuleModule, typeof i2.DxiValidatorRangeRuleModule, typeof i2.DxiValidatorRequiredRuleModule, typeof i2.DxiValidatorStringLengthRuleModule, typeof i2.DxiValidatorValidationRuleModule, typeof i3.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxValidatorModule>;
}
export { DxValidatorTypes };
