/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, QueryList } from '@angular/core';
import { TimeInterval, ScaleBreak, ScaleBreakLineStyle, DiscreteAxisDivisionMode, Font, LabelOverlap, ChartsDataType } from 'devextreme/common/charts';
import { Format } from 'devextreme/common/core/localization';
import { AxisScale } from 'devextreme/viz/range_selector';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiRangeSelectorBreakComponent } from './break-dxi';
import * as i0 from "@angular/core";
export declare class DxoRangeSelectorScaleComponent extends NestedOption implements OnDestroy, OnInit {
    get aggregateByCategory(): boolean;
    set aggregateByCategory(value: boolean);
    get aggregationGroupWidth(): number | undefined;
    set aggregationGroupWidth(value: number | undefined);
    get aggregationInterval(): number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set aggregationInterval(value: number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get breaks(): Array<ScaleBreak> | {
        endValue?: Date | number | string | undefined;
        startValue?: Date | number | string | undefined;
    }[];
    set breaks(value: Array<ScaleBreak> | {
        endValue?: Date | number | string | undefined;
        startValue?: Date | number | string | undefined;
    }[]);
    get breakStyle(): {
        color?: string;
        line?: ScaleBreakLineStyle;
        width?: number;
    };
    set breakStyle(value: {
        color?: string;
        line?: ScaleBreakLineStyle;
        width?: number;
    });
    get categories(): Array<Date | number | string>;
    set categories(value: Array<Date | number | string>);
    get discreteAxisDivisionMode(): DiscreteAxisDivisionMode;
    set discreteAxisDivisionMode(value: DiscreteAxisDivisionMode);
    get endOnTick(): boolean;
    set endOnTick(value: boolean);
    get endValue(): Date | number | string | undefined;
    set endValue(value: Date | number | string | undefined);
    get holidays(): Array<Date | string> | Array<number>;
    set holidays(value: Array<Date | string> | Array<number>);
    get label(): {
        customizeText?: ((scaleValue: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        font?: Font;
        format?: Format | undefined;
        overlappingBehavior?: LabelOverlap;
        topIndent?: number;
        visible?: boolean;
    };
    set label(value: {
        customizeText?: ((scaleValue: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        font?: Font;
        format?: Format | undefined;
        overlappingBehavior?: LabelOverlap;
        topIndent?: number;
        visible?: boolean;
    });
    get linearThreshold(): number;
    set linearThreshold(value: number);
    get logarithmBase(): number;
    set logarithmBase(value: number);
    get marker(): {
        label?: {
            customizeText?: ((markerValue: {
                value: Date | number;
                valueText: string;
            }) => string);
            format?: Format | undefined;
        };
        separatorHeight?: number;
        textLeftIndent?: number;
        textTopIndent?: number;
        topIndent?: number;
        visible?: boolean;
    };
    set marker(value: {
        label?: {
            customizeText?: ((markerValue: {
                value: Date | number;
                valueText: string;
            }) => string);
            format?: Format | undefined;
        };
        separatorHeight?: number;
        textLeftIndent?: number;
        textTopIndent?: number;
        topIndent?: number;
        visible?: boolean;
    });
    get maxRange(): number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set maxRange(value: number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get minorTick(): {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get minorTickCount(): number | undefined;
    set minorTickCount(value: number | undefined);
    get minorTickInterval(): number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minorTickInterval(value: number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get minRange(): number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minRange(value: number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get placeholderHeight(): number | undefined;
    set placeholderHeight(value: number | undefined);
    get showCustomBoundaryTicks(): boolean;
    set showCustomBoundaryTicks(value: boolean);
    get singleWorkdays(): Array<Date | string> | Array<number>;
    set singleWorkdays(value: Array<Date | string> | Array<number>);
    get startValue(): Date | number | string | undefined;
    set startValue(value: Date | number | string | undefined);
    get tick(): {
        color?: string;
        opacity?: number;
        width?: number;
    };
    set tick(value: {
        color?: string;
        opacity?: number;
        width?: number;
    });
    get tickInterval(): number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set tickInterval(value: number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get type(): AxisScale | undefined;
    set type(value: AxisScale | undefined);
    get valueType(): ChartsDataType | undefined;
    set valueType(value: ChartsDataType | undefined);
    get workdaysOnly(): boolean;
    set workdaysOnly(value: boolean);
    get workWeek(): Array<number>;
    set workWeek(value: Array<number>);
    protected get _optionPath(): string;
    get breaksChildren(): QueryList<DxiRangeSelectorBreakComponent>;
    set breaksChildren(value: QueryList<DxiRangeSelectorBreakComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoRangeSelectorScaleComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoRangeSelectorScaleComponent, "dxo-range-selector-scale", never, { "aggregateByCategory": { "alias": "aggregateByCategory"; "required": false; }; "aggregationGroupWidth": { "alias": "aggregationGroupWidth"; "required": false; }; "aggregationInterval": { "alias": "aggregationInterval"; "required": false; }; "allowDecimals": { "alias": "allowDecimals"; "required": false; }; "breaks": { "alias": "breaks"; "required": false; }; "breakStyle": { "alias": "breakStyle"; "required": false; }; "categories": { "alias": "categories"; "required": false; }; "discreteAxisDivisionMode": { "alias": "discreteAxisDivisionMode"; "required": false; }; "endOnTick": { "alias": "endOnTick"; "required": false; }; "endValue": { "alias": "endValue"; "required": false; }; "holidays": { "alias": "holidays"; "required": false; }; "label": { "alias": "label"; "required": false; }; "linearThreshold": { "alias": "linearThreshold"; "required": false; }; "logarithmBase": { "alias": "logarithmBase"; "required": false; }; "marker": { "alias": "marker"; "required": false; }; "maxRange": { "alias": "maxRange"; "required": false; }; "minorTick": { "alias": "minorTick"; "required": false; }; "minorTickCount": { "alias": "minorTickCount"; "required": false; }; "minorTickInterval": { "alias": "minorTickInterval"; "required": false; }; "minRange": { "alias": "minRange"; "required": false; }; "placeholderHeight": { "alias": "placeholderHeight"; "required": false; }; "showCustomBoundaryTicks": { "alias": "showCustomBoundaryTicks"; "required": false; }; "singleWorkdays": { "alias": "singleWorkdays"; "required": false; }; "startValue": { "alias": "startValue"; "required": false; }; "tick": { "alias": "tick"; "required": false; }; "tickInterval": { "alias": "tickInterval"; "required": false; }; "type": { "alias": "type"; "required": false; }; "valueType": { "alias": "valueType"; "required": false; }; "workdaysOnly": { "alias": "workdaysOnly"; "required": false; }; "workWeek": { "alias": "workWeek"; "required": false; }; }, {}, ["breaksChildren"], never, false, never>;
}
export declare class DxoRangeSelectorScaleModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoRangeSelectorScaleModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoRangeSelectorScaleModule, [typeof DxoRangeSelectorScaleComponent], never, [typeof DxoRangeSelectorScaleComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoRangeSelectorScaleModule>;
}
