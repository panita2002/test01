/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState, ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { AnimationConfig, PositionConfig } from 'devextreme/common/core/animation';
import { event } from 'devextreme/events/events.types';
import { ContentReadyEvent, DisposingEvent, HiddenEvent, HidingEvent, InitializedEvent, OptionChangedEvent, ShowingEvent, ShownEvent } from 'devextreme/ui/load_panel';
import { PositionAlignment } from 'devextreme/common';
import DxLoadPanel from 'devextreme/ui/load_panel';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import type * as DxLoadPanelTypes from "devextreme/ui/load_panel_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/ui/load-panel/nested";
import * as i3 from "devextreme-angular/core";
/**
 * The LoadPanel is an overlay UI component notifying the viewer that loading is in progress.

 */
export declare class DxLoadPanelComponent extends DxComponent implements OnDestroy {
    instance: DxLoadPanel;
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
    
     */
    get animation(): {
        hide?: AnimationConfig;
        show?: AnimationConfig;
    };
    set animation(value: {
        hide?: AnimationConfig;
        show?: AnimationConfig;
    });
    /**
     * Specifies whether to close the UI component if a user clicks outside it.
    
     * @deprecated Use the hideOnOutsideClick option instead.
    
     */
    get closeOnOutsideClick(): boolean | ((event: event) => boolean);
    set closeOnOutsideClick(value: boolean | ((event: event) => boolean));
    /**
     * Specifies the UI component&apos;s container.
    
     */
    get container(): any | string | undefined;
    set container(value: any | string | undefined);
    /**
     * Specifies whether to render the UI component&apos;s content when it is displayed. If false, the content is rendered immediately.
    
     */
    get deferRendering(): boolean;
    set deferRendering(value: boolean);
    /**
     * The delay in milliseconds after which the load panel is displayed.
    
     */
    get delay(): number;
    set delay(value: number);
    /**
     * Specifies whether or not the UI component can be focused.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): (() => number | string) | number | string;
    set height(value: (() => number | string) | number | string);
    /**
     * Specifies whether to hide the UI component if a user clicks outside it.
    
     */
    get hideOnOutsideClick(): boolean | ((event: event) => boolean);
    set hideOnOutsideClick(value: boolean | ((event: event) => boolean));
    /**
     * Specifies whether to hide the widget when users scroll one of its parent elements.
    
     */
    get hideOnParentScroll(): boolean;
    set hideOnParentScroll(value: boolean);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * A URL pointing to an image to be used as a load indicator.
    
     */
    get indicatorSrc(): string;
    set indicatorSrc(value: string);
    /**
     * Specifies the maximum height the UI component can reach while resizing.
    
     */
    get maxHeight(): (() => number | string) | number | string;
    set maxHeight(value: (() => number | string) | number | string);
    /**
     * Specifies the maximum width the UI component can reach while resizing.
    
     */
    get maxWidth(): (() => number | string) | number | string;
    set maxWidth(value: (() => number | string) | number | string);
    /**
     * Specifies the text displayed in the load panel. Ignored in the Material Design theme.
    
     */
    get message(): string;
    set message(value: string);
    /**
     * Specifies the minimum height the UI component can reach while resizing.
    
     */
    get minHeight(): (() => number | string) | number | string;
    set minHeight(value: (() => number | string) | number | string);
    /**
     * Specifies the minimum width the UI component can reach while resizing.
    
     */
    get minWidth(): (() => number | string) | number | string;
    set minWidth(value: (() => number | string) | number | string);
    /**
     * Positions the UI component.
    
     */
    get position(): Function | PositionAlignment | PositionConfig;
    set position(value: Function | PositionAlignment | PositionConfig);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies whether to shade the background when the UI component is active.
    
     */
    get shading(): boolean;
    set shading(value: boolean);
    /**
     * Specifies the shading color. Applies only if shading is enabled.
    
     */
    get shadingColor(): string;
    set shadingColor(value: string);
    /**
     * A Boolean value specifying whether or not to show a load indicator.
    
     */
    get showIndicator(): boolean;
    set showIndicator(value: boolean);
    /**
     * A Boolean value specifying whether or not to show the pane behind the load indicator.
    
     */
    get showPane(): boolean;
    set showPane(value: boolean);
    /**
     * A Boolean value specifying whether or not the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): (() => number | string) | number | string;
    set width(value: (() => number | string) | number | string);
    /**
     * Specifies the global attributes for the UI component&apos;s wrapper element.
    
     */
    get wrapperAttr(): any;
    set wrapperAttr(value: any);
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * A function that is executed after the UI component is hidden.
    
    
     */
    onHidden: EventEmitter<HiddenEvent>;
    /**
    
     * A function that is executed before the UI component is hidden.
    
    
     */
    onHiding: EventEmitter<HidingEvent>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * A function that is executed before the UI component is displayed.
    
    
     */
    onShowing: EventEmitter<ShowingEvent>;
    /**
    
     * A function that is executed after the UI component is displayed.
    
    
     */
    onShown: EventEmitter<ShownEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<{
        hide?: AnimationConfig;
        show?: AnimationConfig;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnOutsideClickChange: EventEmitter<boolean | ((event: event) => boolean)>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerChange: EventEmitter<any | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    delayChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<(() => number | string) | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hideOnOutsideClickChange: EventEmitter<boolean | ((event: event) => boolean)>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hideOnParentScrollChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    indicatorSrcChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxHeightChange: EventEmitter<(() => number | string) | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxWidthChange: EventEmitter<(() => number | string) | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    messageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minHeightChange: EventEmitter<(() => number | string) | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minWidthChange: EventEmitter<(() => number | string) | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    positionChange: EventEmitter<Function | PositionAlignment | PositionConfig>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showIndicatorChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showPaneChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<(() => number | string) | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wrapperAttrChange: EventEmitter<any>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxLoadPanel;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxLoadPanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxLoadPanelComponent, "dx-load-panel", never, { "animation": { "alias": "animation"; "required": false; }; "closeOnOutsideClick": { "alias": "closeOnOutsideClick"; "required": false; }; "container": { "alias": "container"; "required": false; }; "deferRendering": { "alias": "deferRendering"; "required": false; }; "delay": { "alias": "delay"; "required": false; }; "focusStateEnabled": { "alias": "focusStateEnabled"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hideOnOutsideClick": { "alias": "hideOnOutsideClick"; "required": false; }; "hideOnParentScroll": { "alias": "hideOnParentScroll"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "hoverStateEnabled": { "alias": "hoverStateEnabled"; "required": false; }; "indicatorSrc": { "alias": "indicatorSrc"; "required": false; }; "maxHeight": { "alias": "maxHeight"; "required": false; }; "maxWidth": { "alias": "maxWidth"; "required": false; }; "message": { "alias": "message"; "required": false; }; "minHeight": { "alias": "minHeight"; "required": false; }; "minWidth": { "alias": "minWidth"; "required": false; }; "position": { "alias": "position"; "required": false; }; "rtlEnabled": { "alias": "rtlEnabled"; "required": false; }; "shading": { "alias": "shading"; "required": false; }; "shadingColor": { "alias": "shadingColor"; "required": false; }; "showIndicator": { "alias": "showIndicator"; "required": false; }; "showPane": { "alias": "showPane"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; "wrapperAttr": { "alias": "wrapperAttr"; "required": false; }; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onHidden": "onHidden"; "onHiding": "onHiding"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onShowing": "onShowing"; "onShown": "onShown"; "animationChange": "animationChange"; "closeOnOutsideClickChange": "closeOnOutsideClickChange"; "containerChange": "containerChange"; "deferRenderingChange": "deferRenderingChange"; "delayChange": "delayChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hideOnOutsideClickChange": "hideOnOutsideClickChange"; "hideOnParentScrollChange": "hideOnParentScrollChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "indicatorSrcChange": "indicatorSrcChange"; "maxHeightChange": "maxHeightChange"; "maxWidthChange": "maxWidthChange"; "messageChange": "messageChange"; "minHeightChange": "minHeightChange"; "minWidthChange": "minWidthChange"; "positionChange": "positionChange"; "rtlEnabledChange": "rtlEnabledChange"; "shadingChange": "shadingChange"; "shadingColorChange": "shadingColorChange"; "showIndicatorChange": "showIndicatorChange"; "showPaneChange": "showPaneChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "wrapperAttrChange": "wrapperAttrChange"; }, never, never, false, never>;
}
export declare class DxLoadPanelModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxLoadPanelModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxLoadPanelModule, [typeof DxLoadPanelComponent], [typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i2.DxoLoadPanelAnimationModule, typeof i2.DxoLoadPanelAtModule, typeof i2.DxoLoadPanelBoundaryOffsetModule, typeof i2.DxoLoadPanelCollisionModule, typeof i2.DxoLoadPanelFromModule, typeof i2.DxoLoadPanelHideModule, typeof i2.DxoLoadPanelMyModule, typeof i2.DxoLoadPanelOffsetModule, typeof i2.DxoLoadPanelPositionModule, typeof i2.DxoLoadPanelShowModule, typeof i2.DxoLoadPanelToModule, typeof i3.DxIntegrationModule, typeof i3.DxTemplateModule], [typeof DxLoadPanelComponent, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i2.DxoLoadPanelAnimationModule, typeof i2.DxoLoadPanelAtModule, typeof i2.DxoLoadPanelBoundaryOffsetModule, typeof i2.DxoLoadPanelCollisionModule, typeof i2.DxoLoadPanelFromModule, typeof i2.DxoLoadPanelHideModule, typeof i2.DxoLoadPanelMyModule, typeof i2.DxoLoadPanelOffsetModule, typeof i2.DxoLoadPanelPositionModule, typeof i2.DxoLoadPanelShowModule, typeof i2.DxoLoadPanelToModule, typeof i3.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxLoadPanelModule>;
}
export { DxLoadPanelTypes };
