import { DashStyle, ChartsColor, SeriesHoverMode, HatchDirection, Font, RelativePosition, PointInteractionMode, PointSymbol, SeriesSelectionMode, ValueErrorBarDisplayMode, ValueErrorBarType } from 'devextreme/common/charts';
import { Format } from 'devextreme/common/core/localization';
import { PolarChartSeriesType } from 'devextreme/viz/polar_chart';
import { NestedOptionHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxiPolarChartSeriesComponent extends CollectionNestedOption {
    get argumentField(): string;
    set argumentField(value: string);
    get barPadding(): number | undefined;
    set barPadding(value: number | undefined);
    get barWidth(): number | undefined;
    set barWidth(value: number | undefined);
    get border(): {
        color?: string | undefined;
        dashStyle?: DashStyle | undefined;
        visible?: boolean;
        width?: number;
    };
    set border(value: {
        color?: string | undefined;
        dashStyle?: DashStyle | undefined;
        visible?: boolean;
        width?: number;
    });
    get closed(): boolean;
    set closed(value: boolean);
    get color(): ChartsColor | string | undefined;
    set color(value: ChartsColor | string | undefined);
    get dashStyle(): DashStyle;
    set dashStyle(value: DashStyle);
    get hoverMode(): SeriesHoverMode;
    set hoverMode(value: SeriesHoverMode);
    get hoverStyle(): {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        dashStyle?: DashStyle;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    };
    set hoverStyle(value: {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        dashStyle?: DashStyle;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    });
    get ignoreEmptyPoints(): boolean;
    set ignoreEmptyPoints(value: boolean);
    get label(): {
        argumentFormat?: Format | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: ((pointInfo: any) => string);
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | undefined;
        position?: RelativePosition;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        visible?: boolean;
    };
    set label(value: {
        argumentFormat?: Format | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: ((pointInfo: any) => string);
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | undefined;
        position?: RelativePosition;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        visible?: boolean;
    });
    get maxLabelCount(): number | undefined;
    set maxLabelCount(value: number | undefined);
    get minBarSize(): number | undefined;
    set minBarSize(value: number | undefined);
    get name(): string | undefined;
    set name(value: string | undefined);
    get opacity(): number;
    set opacity(value: number);
    get point(): {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        hoverMode?: PointInteractionMode;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string | undefined;
            size?: number;
        };
        image?: string | undefined | {
            height?: number;
            url?: string | undefined;
            width?: number;
        };
        selectionMode?: PointInteractionMode;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string | undefined;
            size?: number;
        };
        size?: number;
        symbol?: PointSymbol;
        visible?: boolean;
    };
    set point(value: {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        hoverMode?: PointInteractionMode;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string | undefined;
            size?: number;
        };
        image?: string | undefined | {
            height?: number;
            url?: string | undefined;
            width?: number;
        };
        selectionMode?: PointInteractionMode;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string | undefined;
            size?: number;
        };
        size?: number;
        symbol?: PointSymbol;
        visible?: boolean;
    });
    get selectionMode(): SeriesSelectionMode;
    set selectionMode(value: SeriesSelectionMode);
    get selectionStyle(): {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        dashStyle?: DashStyle;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    };
    set selectionStyle(value: {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        dashStyle?: DashStyle;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    });
    get showInLegend(): boolean;
    set showInLegend(value: boolean);
    get stack(): string;
    set stack(value: string);
    get tag(): any | undefined;
    set tag(value: any | undefined);
    get tagField(): string;
    set tagField(value: string);
    get type(): PolarChartSeriesType;
    set type(value: PolarChartSeriesType);
    get valueErrorBar(): {
        color?: string;
        displayMode?: ValueErrorBarDisplayMode;
        edgeLength?: number;
        highValueField?: string | undefined;
        lineWidth?: number;
        lowValueField?: string | undefined;
        opacity?: number | undefined;
        type?: undefined | ValueErrorBarType;
        value?: number;
    };
    set valueErrorBar(value: {
        color?: string;
        displayMode?: ValueErrorBarDisplayMode;
        edgeLength?: number;
        highValueField?: string | undefined;
        lineWidth?: number;
        lowValueField?: string | undefined;
        opacity?: number | undefined;
        type?: undefined | ValueErrorBarType;
        value?: number;
    });
    get valueField(): string;
    set valueField(value: string);
    get visible(): boolean;
    set visible(value: boolean);
    get width(): number;
    set width(value: number);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiPolarChartSeriesComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiPolarChartSeriesComponent, "dxi-polar-chart-series", never, { "argumentField": { "alias": "argumentField"; "required": false; }; "barPadding": { "alias": "barPadding"; "required": false; }; "barWidth": { "alias": "barWidth"; "required": false; }; "border": { "alias": "border"; "required": false; }; "closed": { "alias": "closed"; "required": false; }; "color": { "alias": "color"; "required": false; }; "dashStyle": { "alias": "dashStyle"; "required": false; }; "hoverMode": { "alias": "hoverMode"; "required": false; }; "hoverStyle": { "alias": "hoverStyle"; "required": false; }; "ignoreEmptyPoints": { "alias": "ignoreEmptyPoints"; "required": false; }; "label": { "alias": "label"; "required": false; }; "maxLabelCount": { "alias": "maxLabelCount"; "required": false; }; "minBarSize": { "alias": "minBarSize"; "required": false; }; "name": { "alias": "name"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "point": { "alias": "point"; "required": false; }; "selectionMode": { "alias": "selectionMode"; "required": false; }; "selectionStyle": { "alias": "selectionStyle"; "required": false; }; "showInLegend": { "alias": "showInLegend"; "required": false; }; "stack": { "alias": "stack"; "required": false; }; "tag": { "alias": "tag"; "required": false; }; "tagField": { "alias": "tagField"; "required": false; }; "type": { "alias": "type"; "required": false; }; "valueErrorBar": { "alias": "valueErrorBar"; "required": false; }; "valueField": { "alias": "valueField"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class DxiPolarChartSeriesModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiPolarChartSeriesModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiPolarChartSeriesModule, [typeof DxiPolarChartSeriesComponent], never, [typeof DxiPolarChartSeriesComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiPolarChartSeriesModule>;
}
