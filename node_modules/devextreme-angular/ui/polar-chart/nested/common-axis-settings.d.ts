/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { DashStyle, Font, DiscreteAxisDivisionMode, LabelOverlap } from 'devextreme/common/charts';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoPolarChartCommonAxisSettingsComponent extends NestedOption implements OnDestroy, OnInit {
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get color(): string;
    set color(value: string);
    get constantLineStyle(): {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    };
    set constantLineStyle(value: {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    });
    get discreteAxisDivisionMode(): DiscreteAxisDivisionMode;
    set discreteAxisDivisionMode(value: DiscreteAxisDivisionMode);
    get endOnTick(): boolean | undefined;
    set endOnTick(value: boolean | undefined);
    get grid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set grid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get inverted(): boolean;
    set inverted(value: boolean);
    get label(): {
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: LabelOverlap;
        visible?: boolean;
    };
    set label(value: {
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: LabelOverlap;
        visible?: boolean;
    });
    get minorGrid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set minorGrid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get minorTick(): {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get opacity(): number | undefined;
    set opacity(value: number | undefined);
    get stripStyle(): {
        label?: {
            font?: Font;
        };
    };
    set stripStyle(value: {
        label?: {
            font?: Font;
        };
    });
    get tick(): {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set tick(value: {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get visible(): boolean;
    set visible(value: boolean);
    get width(): number;
    set width(value: number);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoPolarChartCommonAxisSettingsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoPolarChartCommonAxisSettingsComponent, "dxo-polar-chart-common-axis-settings", never, { "allowDecimals": { "alias": "allowDecimals"; "required": false; }; "color": { "alias": "color"; "required": false; }; "constantLineStyle": { "alias": "constantLineStyle"; "required": false; }; "discreteAxisDivisionMode": { "alias": "discreteAxisDivisionMode"; "required": false; }; "endOnTick": { "alias": "endOnTick"; "required": false; }; "grid": { "alias": "grid"; "required": false; }; "inverted": { "alias": "inverted"; "required": false; }; "label": { "alias": "label"; "required": false; }; "minorGrid": { "alias": "minorGrid"; "required": false; }; "minorTick": { "alias": "minorTick"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "stripStyle": { "alias": "stripStyle"; "required": false; }; "tick": { "alias": "tick"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class DxoPolarChartCommonAxisSettingsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoPolarChartCommonAxisSettingsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoPolarChartCommonAxisSettingsModule, [typeof DxoPolarChartCommonAxisSettingsComponent], never, [typeof DxoPolarChartCommonAxisSettingsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoPolarChartCommonAxisSettingsModule>;
}
