/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { ChartsColor, Palette, Font } from 'devextreme/common/charts';
import { HorizontalEdge, VerticalEdge } from 'devextreme/common';
import { Format } from 'devextreme/common/core/localization';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoCircularGaugeValueIndicatorComponent extends NestedOption implements OnDestroy, OnInit {
    get arrowLength(): number;
    set arrowLength(value: number);
    get backgroundColor(): string;
    set backgroundColor(value: string);
    get baseValue(): number | undefined;
    set baseValue(value: number | undefined);
    get beginAdaptingAtRadius(): number;
    set beginAdaptingAtRadius(value: number);
    get color(): ChartsColor | string;
    set color(value: ChartsColor | string);
    get horizontalOrientation(): HorizontalEdge;
    set horizontalOrientation(value: HorizontalEdge);
    get indentFromCenter(): number;
    set indentFromCenter(value: number);
    get length(): number;
    set length(value: number);
    get offset(): number;
    set offset(value: number);
    get palette(): Array<string> | Palette;
    set palette(value: Array<string> | Palette);
    get secondColor(): string;
    set secondColor(value: string);
    get secondFraction(): number;
    set secondFraction(value: number);
    get size(): number;
    set size(value: number);
    get spindleGapSize(): number;
    set spindleGapSize(value: number);
    get spindleSize(): number;
    set spindleSize(value: number);
    get text(): {
        customizeText?: ((indicatedValue: {
            value: number;
            valueText: string;
        }) => string) | undefined;
        font?: Font;
        format?: Format | undefined;
        indent?: number;
    };
    set text(value: {
        customizeText?: ((indicatedValue: {
            value: number;
            valueText: string;
        }) => string) | undefined;
        font?: Font;
        format?: Format | undefined;
        indent?: number;
    });
    get type(): "circle" | "rangeBar" | "rectangle" | "rectangleNeedle" | "rhombus" | "textCloud" | "triangleMarker" | "triangleNeedle" | "twoColorNeedle";
    set type(value: "circle" | "rangeBar" | "rectangle" | "rectangleNeedle" | "rhombus" | "textCloud" | "triangleMarker" | "triangleNeedle" | "twoColorNeedle");
    get verticalOrientation(): VerticalEdge;
    set verticalOrientation(value: VerticalEdge);
    get width(): number;
    set width(value: number);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoCircularGaugeValueIndicatorComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoCircularGaugeValueIndicatorComponent, "dxo-circular-gauge-value-indicator", never, { "arrowLength": { "alias": "arrowLength"; "required": false; }; "backgroundColor": { "alias": "backgroundColor"; "required": false; }; "baseValue": { "alias": "baseValue"; "required": false; }; "beginAdaptingAtRadius": { "alias": "beginAdaptingAtRadius"; "required": false; }; "color": { "alias": "color"; "required": false; }; "horizontalOrientation": { "alias": "horizontalOrientation"; "required": false; }; "indentFromCenter": { "alias": "indentFromCenter"; "required": false; }; "length": { "alias": "length"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "palette": { "alias": "palette"; "required": false; }; "secondColor": { "alias": "secondColor"; "required": false; }; "secondFraction": { "alias": "secondFraction"; "required": false; }; "size": { "alias": "size"; "required": false; }; "spindleGapSize": { "alias": "spindleGapSize"; "required": false; }; "spindleSize": { "alias": "spindleSize"; "required": false; }; "text": { "alias": "text"; "required": false; }; "type": { "alias": "type"; "required": false; }; "verticalOrientation": { "alias": "verticalOrientation"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class DxoCircularGaugeValueIndicatorModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoCircularGaugeValueIndicatorModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoCircularGaugeValueIndicatorModule, [typeof DxoCircularGaugeValueIndicatorComponent], never, [typeof DxoCircularGaugeValueIndicatorComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoCircularGaugeValueIndicatorModule>;
}
