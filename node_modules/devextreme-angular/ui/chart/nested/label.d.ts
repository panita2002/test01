/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, ElementRef, Renderer2, AfterViewInit } from '@angular/core';
import { Font, RelativePosition, ChartsAxisLabelOverlap, TextOverflow, WordWrap, DashStyle } from 'devextreme/common/charts';
import { HorizontalAlignment, Position, VerticalAlignment } from 'devextreme/common';
import { ChartLabelDisplayMode } from 'devextreme/viz/chart';
import { Format } from 'devextreme/common/core/localization';
import { NestedOptionHost, DxTemplateDirective, IDxTemplateHost, DxTemplateHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoChartLabelComponent extends NestedOption implements AfterViewInit, OnDestroy, OnInit, IDxTemplateHost {
    private renderer;
    private document;
    private element;
    get font(): Font;
    set font(value: Font);
    get horizontalAlignment(): HorizontalAlignment;
    set horizontalAlignment(value: HorizontalAlignment);
    get position(): RelativePosition | Position;
    set position(value: RelativePosition | Position);
    get verticalAlignment(): VerticalAlignment;
    set verticalAlignment(value: VerticalAlignment);
    get visible(): boolean;
    set visible(value: boolean);
    get text(): string | undefined;
    set text(value: string | undefined);
    get alignment(): HorizontalAlignment | undefined;
    set alignment(value: HorizontalAlignment | undefined);
    get customizeHint(): ((argument: {
        value: Date | number | string;
        valueText: string;
    }) => string);
    set customizeHint(value: ((argument: {
        value: Date | number | string;
        valueText: string;
    }) => string));
    get customizeText(): ((argument: {
        value: Date | number | string;
        valueText: string;
    }) => string);
    set customizeText(value: ((argument: {
        value: Date | number | string;
        valueText: string;
    }) => string));
    get displayMode(): ChartLabelDisplayMode;
    set displayMode(value: ChartLabelDisplayMode);
    get format(): Format | undefined;
    set format(value: Format | undefined);
    get indentFromAxis(): number;
    set indentFromAxis(value: number);
    get overlappingBehavior(): ChartsAxisLabelOverlap;
    set overlappingBehavior(value: ChartsAxisLabelOverlap);
    get rotationAngle(): number;
    set rotationAngle(value: number);
    get staggeringSpacing(): number;
    set staggeringSpacing(value: number);
    get template(): any;
    set template(value: any);
    get textOverflow(): TextOverflow;
    set textOverflow(value: TextOverflow);
    get wordWrap(): WordWrap;
    set wordWrap(value: WordWrap);
    get argumentFormat(): Format | undefined;
    set argumentFormat(value: Format | undefined);
    get backgroundColor(): string | undefined;
    set backgroundColor(value: string | undefined);
    get border(): {
        color?: string | undefined;
        dashStyle?: DashStyle | undefined;
        visible?: boolean;
        width?: number;
    };
    set border(value: {
        color?: string | undefined;
        dashStyle?: DashStyle | undefined;
        visible?: boolean;
        width?: number;
    });
    get connector(): {
        color?: string | undefined;
        visible?: boolean;
        width?: number;
    };
    set connector(value: {
        color?: string | undefined;
        visible?: boolean;
        width?: number;
    });
    get displayFormat(): string | undefined;
    set displayFormat(value: string | undefined);
    get horizontalOffset(): number;
    set horizontalOffset(value: number);
    get showForZeroValues(): boolean;
    set showForZeroValues(value: boolean);
    get verticalOffset(): number;
    set verticalOffset(value: number);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost, renderer: Renderer2, document: any, templateHost: DxTemplateHost, element: ElementRef);
    setTemplate(template: DxTemplateDirective): void;
    ngAfterViewInit(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoChartLabelComponent, [{ host: true; skipSelf: true; }, { host: true; }, null, null, { host: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoChartLabelComponent, "dxo-chart-label", never, { "font": { "alias": "font"; "required": false; }; "horizontalAlignment": { "alias": "horizontalAlignment"; "required": false; }; "position": { "alias": "position"; "required": false; }; "verticalAlignment": { "alias": "verticalAlignment"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "text": { "alias": "text"; "required": false; }; "alignment": { "alias": "alignment"; "required": false; }; "customizeHint": { "alias": "customizeHint"; "required": false; }; "customizeText": { "alias": "customizeText"; "required": false; }; "displayMode": { "alias": "displayMode"; "required": false; }; "format": { "alias": "format"; "required": false; }; "indentFromAxis": { "alias": "indentFromAxis"; "required": false; }; "overlappingBehavior": { "alias": "overlappingBehavior"; "required": false; }; "rotationAngle": { "alias": "rotationAngle"; "required": false; }; "staggeringSpacing": { "alias": "staggeringSpacing"; "required": false; }; "template": { "alias": "template"; "required": false; }; "textOverflow": { "alias": "textOverflow"; "required": false; }; "wordWrap": { "alias": "wordWrap"; "required": false; }; "argumentFormat": { "alias": "argumentFormat"; "required": false; }; "backgroundColor": { "alias": "backgroundColor"; "required": false; }; "border": { "alias": "border"; "required": false; }; "connector": { "alias": "connector"; "required": false; }; "displayFormat": { "alias": "displayFormat"; "required": false; }; "horizontalOffset": { "alias": "horizontalOffset"; "required": false; }; "showForZeroValues": { "alias": "showForZeroValues"; "required": false; }; "verticalOffset": { "alias": "verticalOffset"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare class DxoChartLabelModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoChartLabelModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoChartLabelModule, [typeof DxoChartLabelComponent], never, [typeof DxoChartLabelComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoChartLabelModule>;
}
