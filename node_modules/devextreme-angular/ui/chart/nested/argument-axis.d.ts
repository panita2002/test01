/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter, QueryList } from '@angular/core';
import * as CommonChartTypes from 'devextreme/common/charts';
import { AggregatedPointsPosition, ChartLabelDisplayMode } from 'devextreme/viz/chart';
import { TimeInterval, ChartsDataType, ScaleBreak, ScaleBreakLineStyle, DashStyle, Font, RelativePosition, DiscreteAxisDivisionMode, ArgumentAxisHoverMode, ChartsAxisLabelOverlap, TextOverflow, WordWrap, AxisScaleType, VisualRangeUpdateMode } from 'devextreme/common/charts';
import { HorizontalAlignment, VerticalAlignment, Position } from 'devextreme/common';
import { Format } from 'devextreme/common/core/localization';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiChartBreakComponent } from './break-dxi';
import { DxiChartConstantLineComponent } from './constant-line-dxi';
import { DxiChartStripComponent } from './strip-dxi';
import * as i0 from "@angular/core";
export declare class DxoChartArgumentAxisComponent extends NestedOption implements OnDestroy, OnInit {
    get aggregateByCategory(): boolean;
    set aggregateByCategory(value: boolean);
    get aggregatedPointsPosition(): AggregatedPointsPosition;
    set aggregatedPointsPosition(value: AggregatedPointsPosition);
    get aggregationGroupWidth(): number | undefined;
    set aggregationGroupWidth(value: number | undefined);
    get aggregationInterval(): number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set aggregationInterval(value: number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get argumentType(): ChartsDataType | undefined;
    set argumentType(value: ChartsDataType | undefined);
    get axisDivisionFactor(): number;
    set axisDivisionFactor(value: number);
    get breaks(): Array<ScaleBreak> | {
        endValue?: Date | number | string | undefined;
        startValue?: Date | number | string | undefined;
    }[];
    set breaks(value: Array<ScaleBreak> | {
        endValue?: Date | number | string | undefined;
        startValue?: Date | number | string | undefined;
    }[]);
    get breakStyle(): {
        color?: string;
        line?: ScaleBreakLineStyle;
        width?: number;
    };
    set breakStyle(value: {
        color?: string;
        line?: ScaleBreakLineStyle;
        width?: number;
    });
    get categories(): Array<Date | number | string>;
    set categories(value: Array<Date | number | string>);
    get color(): string;
    set color(value: string);
    get constantLines(): {
        color?: string;
        dashStyle?: DashStyle;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            position?: RelativePosition;
            text?: string | undefined;
            verticalAlignment?: VerticalAlignment;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        value?: Date | number | string | undefined;
        width?: number;
    }[];
    set constantLines(value: {
        color?: string;
        dashStyle?: DashStyle;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            position?: RelativePosition;
            text?: string | undefined;
            verticalAlignment?: VerticalAlignment;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        value?: Date | number | string | undefined;
        width?: number;
    }[]);
    get constantLineStyle(): {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            position?: RelativePosition;
            verticalAlignment?: VerticalAlignment;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    };
    set constantLineStyle(value: {
        color?: string;
        dashStyle?: DashStyle;
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            position?: RelativePosition;
            verticalAlignment?: VerticalAlignment;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    });
    get customPosition(): Date | number | string | undefined;
    set customPosition(value: Date | number | string | undefined);
    get customPositionAxis(): string | undefined;
    set customPositionAxis(value: string | undefined);
    get discreteAxisDivisionMode(): DiscreteAxisDivisionMode;
    set discreteAxisDivisionMode(value: DiscreteAxisDivisionMode);
    get endOnTick(): boolean;
    set endOnTick(value: boolean);
    get grid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set grid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get holidays(): Array<Date | string> | Array<number>;
    set holidays(value: Array<Date | string> | Array<number>);
    get hoverMode(): ArgumentAxisHoverMode;
    set hoverMode(value: ArgumentAxisHoverMode);
    get inverted(): boolean;
    set inverted(value: boolean);
    get label(): {
        alignment?: HorizontalAlignment | undefined;
        customizeHint?: ((argument: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        customizeText?: ((argument: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        displayMode?: ChartLabelDisplayMode;
        font?: Font;
        format?: Format | undefined;
        indentFromAxis?: number;
        overlappingBehavior?: ChartsAxisLabelOverlap;
        position?: Position | RelativePosition;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any;
        textOverflow?: TextOverflow;
        visible?: boolean;
        wordWrap?: WordWrap;
    };
    set label(value: {
        alignment?: HorizontalAlignment | undefined;
        customizeHint?: ((argument: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        customizeText?: ((argument: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        displayMode?: ChartLabelDisplayMode;
        font?: Font;
        format?: Format | undefined;
        indentFromAxis?: number;
        overlappingBehavior?: ChartsAxisLabelOverlap;
        position?: Position | RelativePosition;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any;
        textOverflow?: TextOverflow;
        visible?: boolean;
        wordWrap?: WordWrap;
    });
    get linearThreshold(): number | undefined;
    set linearThreshold(value: number | undefined);
    get logarithmBase(): number;
    set logarithmBase(value: number);
    get maxValueMargin(): number | undefined;
    set maxValueMargin(value: number | undefined);
    get minorGrid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set minorGrid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get minorTick(): {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    });
    get minorTickCount(): number | undefined;
    set minorTickCount(value: number | undefined);
    get minorTickInterval(): number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minorTickInterval(value: number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get minValueMargin(): number | undefined;
    set minValueMargin(value: number | undefined);
    get minVisualRangeLength(): number | TimeInterval | undefined | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minVisualRangeLength(value: number | TimeInterval | undefined | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get offset(): number | undefined;
    set offset(value: number | undefined);
    get opacity(): number | undefined;
    set opacity(value: number | undefined);
    get placeholderSize(): number;
    set placeholderSize(value: number);
    get position(): Position;
    set position(value: Position);
    get singleWorkdays(): Array<Date | string> | Array<number>;
    set singleWorkdays(value: Array<Date | string> | Array<number>);
    get strips(): {
        color?: string | undefined;
        endValue?: Date | number | string | undefined;
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            text?: string | undefined;
            verticalAlignment?: VerticalAlignment;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        startValue?: Date | number | string | undefined;
    }[];
    set strips(value: {
        color?: string | undefined;
        endValue?: Date | number | string | undefined;
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            text?: string | undefined;
            verticalAlignment?: VerticalAlignment;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        startValue?: Date | number | string | undefined;
    }[]);
    get stripStyle(): {
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            verticalAlignment?: VerticalAlignment;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    };
    set stripStyle(value: {
        label?: {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment;
            verticalAlignment?: VerticalAlignment;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    });
    get tick(): {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    set tick(value: {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    });
    get tickInterval(): number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set tickInterval(value: number | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get title(): string | {
        alignment?: HorizontalAlignment;
        font?: Font;
        margin?: number;
        text?: string | undefined;
        textOverflow?: TextOverflow;
        wordWrap?: WordWrap;
    };
    set title(value: string | {
        alignment?: HorizontalAlignment;
        font?: Font;
        margin?: number;
        text?: string | undefined;
        textOverflow?: TextOverflow;
        wordWrap?: WordWrap;
    });
    get type(): AxisScaleType | undefined;
    set type(value: AxisScaleType | undefined);
    get valueMarginsEnabled(): boolean;
    set valueMarginsEnabled(value: boolean);
    get visible(): boolean;
    set visible(value: boolean);
    get visualRange(): Array<Date | number | string> | CommonChartTypes.VisualRange;
    set visualRange(value: Array<Date | number | string> | CommonChartTypes.VisualRange);
    get visualRangeUpdateMode(): VisualRangeUpdateMode;
    set visualRangeUpdateMode(value: VisualRangeUpdateMode);
    get wholeRange(): Array<Date | number | string> | undefined | CommonChartTypes.VisualRange;
    set wholeRange(value: Array<Date | number | string> | undefined | CommonChartTypes.VisualRange);
    get width(): number;
    set width(value: number);
    get workdaysOnly(): boolean;
    set workdaysOnly(value: boolean);
    get workWeek(): Array<number>;
    set workWeek(value: Array<number>);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    categoriesChange: EventEmitter<Array<Date | number | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visualRangeChange: EventEmitter<Array<Date | number | string> | CommonChartTypes.VisualRange>;
    protected get _optionPath(): string;
    get breaksChildren(): QueryList<DxiChartBreakComponent>;
    set breaksChildren(value: QueryList<DxiChartBreakComponent>);
    get constantLinesChildren(): QueryList<DxiChartConstantLineComponent>;
    set constantLinesChildren(value: QueryList<DxiChartConstantLineComponent>);
    get stripsChildren(): QueryList<DxiChartStripComponent>;
    set stripsChildren(value: QueryList<DxiChartStripComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoChartArgumentAxisComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoChartArgumentAxisComponent, "dxo-chart-argument-axis", never, { "aggregateByCategory": { "alias": "aggregateByCategory"; "required": false; }; "aggregatedPointsPosition": { "alias": "aggregatedPointsPosition"; "required": false; }; "aggregationGroupWidth": { "alias": "aggregationGroupWidth"; "required": false; }; "aggregationInterval": { "alias": "aggregationInterval"; "required": false; }; "allowDecimals": { "alias": "allowDecimals"; "required": false; }; "argumentType": { "alias": "argumentType"; "required": false; }; "axisDivisionFactor": { "alias": "axisDivisionFactor"; "required": false; }; "breaks": { "alias": "breaks"; "required": false; }; "breakStyle": { "alias": "breakStyle"; "required": false; }; "categories": { "alias": "categories"; "required": false; }; "color": { "alias": "color"; "required": false; }; "constantLines": { "alias": "constantLines"; "required": false; }; "constantLineStyle": { "alias": "constantLineStyle"; "required": false; }; "customPosition": { "alias": "customPosition"; "required": false; }; "customPositionAxis": { "alias": "customPositionAxis"; "required": false; }; "discreteAxisDivisionMode": { "alias": "discreteAxisDivisionMode"; "required": false; }; "endOnTick": { "alias": "endOnTick"; "required": false; }; "grid": { "alias": "grid"; "required": false; }; "holidays": { "alias": "holidays"; "required": false; }; "hoverMode": { "alias": "hoverMode"; "required": false; }; "inverted": { "alias": "inverted"; "required": false; }; "label": { "alias": "label"; "required": false; }; "linearThreshold": { "alias": "linearThreshold"; "required": false; }; "logarithmBase": { "alias": "logarithmBase"; "required": false; }; "maxValueMargin": { "alias": "maxValueMargin"; "required": false; }; "minorGrid": { "alias": "minorGrid"; "required": false; }; "minorTick": { "alias": "minorTick"; "required": false; }; "minorTickCount": { "alias": "minorTickCount"; "required": false; }; "minorTickInterval": { "alias": "minorTickInterval"; "required": false; }; "minValueMargin": { "alias": "minValueMargin"; "required": false; }; "minVisualRangeLength": { "alias": "minVisualRangeLength"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "placeholderSize": { "alias": "placeholderSize"; "required": false; }; "position": { "alias": "position"; "required": false; }; "singleWorkdays": { "alias": "singleWorkdays"; "required": false; }; "strips": { "alias": "strips"; "required": false; }; "stripStyle": { "alias": "stripStyle"; "required": false; }; "tick": { "alias": "tick"; "required": false; }; "tickInterval": { "alias": "tickInterval"; "required": false; }; "title": { "alias": "title"; "required": false; }; "type": { "alias": "type"; "required": false; }; "valueMarginsEnabled": { "alias": "valueMarginsEnabled"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "visualRange": { "alias": "visualRange"; "required": false; }; "visualRangeUpdateMode": { "alias": "visualRangeUpdateMode"; "required": false; }; "wholeRange": { "alias": "wholeRange"; "required": false; }; "width": { "alias": "width"; "required": false; }; "workdaysOnly": { "alias": "workdaysOnly"; "required": false; }; "workWeek": { "alias": "workWeek"; "required": false; }; }, { "categoriesChange": "categoriesChange"; "visualRangeChange": "visualRangeChange"; }, ["breaksChildren", "constantLinesChildren", "stripsChildren"], never, false, never>;
}
export declare class DxoChartArgumentAxisModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoChartArgumentAxisModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoChartArgumentAxisModule, [typeof DxoChartArgumentAxisComponent], never, [typeof DxoChartArgumentAxisComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoChartArgumentAxisModule>;
}
