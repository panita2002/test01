/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { chartPointAggregationInfoObject, chartSeriesObject, ChartSeriesAggregationMethod, FinancialChartReductionLevel } from 'devextreme/viz/chart';
import { DashStyle, ChartsColor, SeriesHoverMode, HatchDirection, Font, RelativePosition, PointInteractionMode, PointSymbol, SeriesSelectionMode, SeriesType, ValueErrorBarDisplayMode, ValueErrorBarType } from 'devextreme/common/charts';
import { HorizontalAlignment } from 'devextreme/common';
import { Format } from 'devextreme/common/core/localization';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoChartCommonSeriesSettingsComponent extends NestedOption implements OnDestroy, OnInit {
    get aggregation(): {
        calculate?: ((aggregationInfo: chartPointAggregationInfoObject, series: chartSeriesObject) => Record<string, any> | Array<Record<string, any>>) | undefined;
        enabled?: boolean;
        method?: ChartSeriesAggregationMethod;
    };
    set aggregation(value: {
        calculate?: ((aggregationInfo: chartPointAggregationInfoObject, series: chartSeriesObject) => Record<string, any> | Array<Record<string, any>>) | undefined;
        enabled?: boolean;
        method?: ChartSeriesAggregationMethod;
    });
    get area(): any;
    set area(value: any);
    get argumentField(): string;
    set argumentField(value: string);
    get axis(): string | undefined;
    set axis(value: string | undefined);
    get bar(): any;
    set bar(value: any);
    get barOverlapGroup(): string | undefined;
    set barOverlapGroup(value: string | undefined);
    get barPadding(): number | undefined;
    set barPadding(value: number | undefined);
    get barWidth(): number | undefined;
    set barWidth(value: number | undefined);
    get border(): {
        color?: string | undefined;
        dashStyle?: DashStyle | undefined;
        visible?: boolean;
        width?: number;
    };
    set border(value: {
        color?: string | undefined;
        dashStyle?: DashStyle | undefined;
        visible?: boolean;
        width?: number;
    });
    get bubble(): any;
    set bubble(value: any);
    get candlestick(): any;
    set candlestick(value: any);
    get closeValueField(): string;
    set closeValueField(value: string);
    get color(): ChartsColor | string | undefined;
    set color(value: ChartsColor | string | undefined);
    get cornerRadius(): number;
    set cornerRadius(value: number);
    get dashStyle(): DashStyle;
    set dashStyle(value: DashStyle);
    get fullstackedarea(): any;
    set fullstackedarea(value: any);
    get fullstackedbar(): any;
    set fullstackedbar(value: any);
    get fullstackedline(): any;
    set fullstackedline(value: any);
    get fullstackedspline(): any;
    set fullstackedspline(value: any);
    get fullstackedsplinearea(): any;
    set fullstackedsplinearea(value: any);
    get highValueField(): string;
    set highValueField(value: string);
    get hoverMode(): SeriesHoverMode;
    set hoverMode(value: SeriesHoverMode);
    get hoverStyle(): {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        dashStyle?: DashStyle;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    };
    set hoverStyle(value: {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        dashStyle?: DashStyle;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    });
    get ignoreEmptyPoints(): boolean;
    set ignoreEmptyPoints(value: boolean);
    get innerColor(): string;
    set innerColor(value: string);
    get label(): {
        alignment?: HorizontalAlignment;
        argumentFormat?: Format | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: ((pointInfo: any) => string);
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | undefined;
        horizontalOffset?: number;
        position?: RelativePosition;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    };
    set label(value: {
        alignment?: HorizontalAlignment;
        argumentFormat?: Format | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: ((pointInfo: any) => string);
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | undefined;
        horizontalOffset?: number;
        position?: RelativePosition;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    });
    get line(): any;
    set line(value: any);
    get lowValueField(): string;
    set lowValueField(value: string);
    get maxLabelCount(): number | undefined;
    set maxLabelCount(value: number | undefined);
    get minBarSize(): number | undefined;
    set minBarSize(value: number | undefined);
    get opacity(): number;
    set opacity(value: number);
    get openValueField(): string;
    set openValueField(value: string);
    get pane(): string;
    set pane(value: string);
    get point(): {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        hoverMode?: PointInteractionMode;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string | undefined;
            size?: number | undefined;
        };
        image?: string | undefined | {
            height?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
            url?: string | undefined | {
                rangeMaxPoint?: string | undefined;
                rangeMinPoint?: string | undefined;
            };
            width?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
        };
        selectionMode?: PointInteractionMode;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string | undefined;
            size?: number | undefined;
        };
        size?: number;
        symbol?: PointSymbol;
        visible?: boolean;
    };
    set point(value: {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        hoverMode?: PointInteractionMode;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string | undefined;
            size?: number | undefined;
        };
        image?: string | undefined | {
            height?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
            url?: string | undefined | {
                rangeMaxPoint?: string | undefined;
                rangeMinPoint?: string | undefined;
            };
            width?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
        };
        selectionMode?: PointInteractionMode;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string | undefined;
            size?: number | undefined;
        };
        size?: number;
        symbol?: PointSymbol;
        visible?: boolean;
    });
    get rangearea(): any;
    set rangearea(value: any);
    get rangebar(): any;
    set rangebar(value: any);
    get rangeValue1Field(): string;
    set rangeValue1Field(value: string);
    get rangeValue2Field(): string;
    set rangeValue2Field(value: string);
    get reduction(): {
        color?: string;
        level?: FinancialChartReductionLevel;
    };
    set reduction(value: {
        color?: string;
        level?: FinancialChartReductionLevel;
    });
    get scatter(): any;
    set scatter(value: any);
    get selectionMode(): SeriesSelectionMode;
    set selectionMode(value: SeriesSelectionMode);
    get selectionStyle(): {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        dashStyle?: DashStyle;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    };
    set selectionStyle(value: {
        border?: {
            color?: string | undefined;
            dashStyle?: DashStyle | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string | undefined;
        dashStyle?: DashStyle;
        hatching?: {
            direction?: HatchDirection;
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    });
    get showInLegend(): boolean;
    set showInLegend(value: boolean);
    get sizeField(): string;
    set sizeField(value: string);
    get spline(): any;
    set spline(value: any);
    get splinearea(): any;
    set splinearea(value: any);
    get stack(): string;
    set stack(value: string);
    get stackedarea(): any;
    set stackedarea(value: any);
    get stackedbar(): any;
    set stackedbar(value: any);
    get stackedline(): any;
    set stackedline(value: any);
    get stackedspline(): any;
    set stackedspline(value: any);
    get stackedsplinearea(): any;
    set stackedsplinearea(value: any);
    get steparea(): any;
    set steparea(value: any);
    get stepline(): any;
    set stepline(value: any);
    get stock(): any;
    set stock(value: any);
    get tagField(): string;
    set tagField(value: string);
    get type(): SeriesType;
    set type(value: SeriesType);
    get valueErrorBar(): {
        color?: string;
        displayMode?: ValueErrorBarDisplayMode;
        edgeLength?: number;
        highValueField?: string | undefined;
        lineWidth?: number;
        lowValueField?: string | undefined;
        opacity?: number | undefined;
        type?: undefined | ValueErrorBarType;
        value?: number;
    };
    set valueErrorBar(value: {
        color?: string;
        displayMode?: ValueErrorBarDisplayMode;
        edgeLength?: number;
        highValueField?: string | undefined;
        lineWidth?: number;
        lowValueField?: string | undefined;
        opacity?: number | undefined;
        type?: undefined | ValueErrorBarType;
        value?: number;
    });
    get valueField(): string;
    set valueField(value: string);
    get visible(): boolean;
    set visible(value: boolean);
    get width(): number;
    set width(value: number);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoChartCommonSeriesSettingsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoChartCommonSeriesSettingsComponent, "dxo-chart-common-series-settings", never, { "aggregation": { "alias": "aggregation"; "required": false; }; "area": { "alias": "area"; "required": false; }; "argumentField": { "alias": "argumentField"; "required": false; }; "axis": { "alias": "axis"; "required": false; }; "bar": { "alias": "bar"; "required": false; }; "barOverlapGroup": { "alias": "barOverlapGroup"; "required": false; }; "barPadding": { "alias": "barPadding"; "required": false; }; "barWidth": { "alias": "barWidth"; "required": false; }; "border": { "alias": "border"; "required": false; }; "bubble": { "alias": "bubble"; "required": false; }; "candlestick": { "alias": "candlestick"; "required": false; }; "closeValueField": { "alias": "closeValueField"; "required": false; }; "color": { "alias": "color"; "required": false; }; "cornerRadius": { "alias": "cornerRadius"; "required": false; }; "dashStyle": { "alias": "dashStyle"; "required": false; }; "fullstackedarea": { "alias": "fullstackedarea"; "required": false; }; "fullstackedbar": { "alias": "fullstackedbar"; "required": false; }; "fullstackedline": { "alias": "fullstackedline"; "required": false; }; "fullstackedspline": { "alias": "fullstackedspline"; "required": false; }; "fullstackedsplinearea": { "alias": "fullstackedsplinearea"; "required": false; }; "highValueField": { "alias": "highValueField"; "required": false; }; "hoverMode": { "alias": "hoverMode"; "required": false; }; "hoverStyle": { "alias": "hoverStyle"; "required": false; }; "ignoreEmptyPoints": { "alias": "ignoreEmptyPoints"; "required": false; }; "innerColor": { "alias": "innerColor"; "required": false; }; "label": { "alias": "label"; "required": false; }; "line": { "alias": "line"; "required": false; }; "lowValueField": { "alias": "lowValueField"; "required": false; }; "maxLabelCount": { "alias": "maxLabelCount"; "required": false; }; "minBarSize": { "alias": "minBarSize"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "openValueField": { "alias": "openValueField"; "required": false; }; "pane": { "alias": "pane"; "required": false; }; "point": { "alias": "point"; "required": false; }; "rangearea": { "alias": "rangearea"; "required": false; }; "rangebar": { "alias": "rangebar"; "required": false; }; "rangeValue1Field": { "alias": "rangeValue1Field"; "required": false; }; "rangeValue2Field": { "alias": "rangeValue2Field"; "required": false; }; "reduction": { "alias": "reduction"; "required": false; }; "scatter": { "alias": "scatter"; "required": false; }; "selectionMode": { "alias": "selectionMode"; "required": false; }; "selectionStyle": { "alias": "selectionStyle"; "required": false; }; "showInLegend": { "alias": "showInLegend"; "required": false; }; "sizeField": { "alias": "sizeField"; "required": false; }; "spline": { "alias": "spline"; "required": false; }; "splinearea": { "alias": "splinearea"; "required": false; }; "stack": { "alias": "stack"; "required": false; }; "stackedarea": { "alias": "stackedarea"; "required": false; }; "stackedbar": { "alias": "stackedbar"; "required": false; }; "stackedline": { "alias": "stackedline"; "required": false; }; "stackedspline": { "alias": "stackedspline"; "required": false; }; "stackedsplinearea": { "alias": "stackedsplinearea"; "required": false; }; "steparea": { "alias": "steparea"; "required": false; }; "stepline": { "alias": "stepline"; "required": false; }; "stock": { "alias": "stock"; "required": false; }; "tagField": { "alias": "tagField"; "required": false; }; "type": { "alias": "type"; "required": false; }; "valueErrorBar": { "alias": "valueErrorBar"; "required": false; }; "valueField": { "alias": "valueField"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class DxoChartCommonSeriesSettingsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoChartCommonSeriesSettingsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoChartCommonSeriesSettingsModule, [typeof DxoChartCommonSeriesSettingsComponent], never, [typeof DxoChartCommonSeriesSettingsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoChartCommonSeriesSettingsModule>;
}
