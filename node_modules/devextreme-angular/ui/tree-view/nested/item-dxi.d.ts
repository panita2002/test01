/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, Renderer2, AfterViewInit } from '@angular/core';
import { dxTreeViewItem } from 'devextreme/ui/tree_view';
import { NestedOptionHost, DxTemplateDirective, IDxTemplateHost, DxTemplateHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxiTreeViewItemComponent extends CollectionNestedOption implements AfterViewInit, IDxTemplateHost {
    private renderer;
    private document;
    private element;
    get disabled(): boolean;
    set disabled(value: boolean);
    get expanded(): boolean;
    set expanded(value: boolean);
    get hasItems(): boolean | undefined;
    set hasItems(value: boolean | undefined);
    get html(): string;
    set html(value: string);
    get icon(): string;
    set icon(value: string);
    get id(): number | string | undefined;
    set id(value: number | string | undefined);
    get items(): Array<dxTreeViewItem>;
    set items(value: Array<dxTreeViewItem>);
    get parentId(): number | string | undefined;
    set parentId(value: number | string | undefined);
    get selected(): boolean;
    set selected(value: boolean);
    get template(): any;
    set template(value: any);
    get text(): string;
    set text(value: string);
    get visible(): boolean;
    set visible(value: boolean);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost, renderer: Renderer2, document: any, templateHost: DxTemplateHost, element: ElementRef);
    setTemplate(template: DxTemplateDirective): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiTreeViewItemComponent, [{ host: true; skipSelf: true; }, { host: true; }, null, null, { host: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiTreeViewItemComponent, "dxi-tree-view-item", never, { "disabled": { "alias": "disabled"; "required": false; }; "expanded": { "alias": "expanded"; "required": false; }; "hasItems": { "alias": "hasItems"; "required": false; }; "html": { "alias": "html"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "id": { "alias": "id"; "required": false; }; "items": { "alias": "items"; "required": false; }; "parentId": { "alias": "parentId"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "template": { "alias": "template"; "required": false; }; "text": { "alias": "text"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare class DxiTreeViewItemModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiTreeViewItemModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiTreeViewItemModule, [typeof DxiTreeViewItemComponent], never, [typeof DxiTreeViewItemComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiTreeViewItemModule>;
}
