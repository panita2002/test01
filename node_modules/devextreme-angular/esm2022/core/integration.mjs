/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { NgModule, Inject, NgZone, Optional, VERSION, } from '@angular/core';
import { DOCUMENT, XhrFactory } from '@angular/common';
import httpRequest from 'devextreme/core/http_request';
import domAdapter from 'devextreme/core/dom_adapter';
import readyCallbacks from 'devextreme/core/utils/ready_callbacks';
import eventsEngine from 'devextreme/common/core/events/core/events_engine';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
const insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
let originalAdd;
let callbacks = [];
let readyCallbackAdd = function (callback) {
    if (!originalAdd) {
        originalAdd = this.callBase.bind(this);
    }
    callbacks.push(callback);
};
readyCallbacks.inject({
    add(callback) {
        return readyCallbackAdd.call(this, callback);
    },
});
let doInjections = (document, ngZone, xhrFactory) => {
    if (Number(VERSION.major) < 12) {
        console.warn('Your version of Angular is not supported. Please update your project to version 12 or later.'
            + ' Please refer to the Angular Update Guide for more information: https://update.angular.io');
    }
    domAdapter.inject({
        _document: document,
        listen(...args) {
            const eventName = args[1];
            if (outsideZoneEvents.includes(eventName)) {
                return ngZone.runOutsideAngular(() => this.callBase.apply(this, args));
            }
            if (ngZone.isStable && insideZoneEvents.includes(eventName)) {
                return ngZone.run(() => this.callBase.apply(this, args));
            }
            return this.callBase.apply(this, args);
        },
        isElementNode(element) {
            return element && element.nodeType === 1;
        },
        isTextNode(element) {
            return element && element.nodeType === 3;
        },
        isDocument(element) {
            return element && element.nodeType === 9;
        },
    });
    httpRequest.inject({
        getXhr() {
            if (!xhrFactory) {
                return this.callBase.apply(this);
            }
            const _xhr = xhrFactory.build();
            if (!('withCredentials' in _xhr)) {
                _xhr.withCredentials = false;
            }
            return _xhr;
        },
    });
    const runReadyCallbacksInZone = () => {
        ngZone.run(() => {
            eventsEngine.set({});
            callbacks.forEach((callback) => originalAdd.call(null, callback));
            callbacks = [];
            readyCallbacks.fire();
        });
    };
    runReadyCallbacksInZone();
    readyCallbackAdd = (callback) => ngZone.run(() => callback());
    doInjections = runReadyCallbacksInZone;
};
export class DxIntegrationModule {
    constructor(document, ngZone, xhrFactory) {
        doInjections(document, ngZone, xhrFactory);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxIntegrationModule, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.XhrFactory, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.12", ngImport: i0, type: DxIntegrationModule });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxIntegrationModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxIntegrationModule, decorators: [{
            type: NgModule,
            args: [{}]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.NgZone }, { type: i1.XhrFactory, decorators: [{
                    type: Optional
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWdyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kaXN0L2NvcmUvaW50ZWdyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCxvQ0FBb0M7QUFDcEMsT0FBTyxFQUNMLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEdBQzVDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdkQsT0FBTyxXQUFXLE1BQU0sOEJBQThCLENBQUM7QUFFdkQsT0FBTyxVQUFVLE1BQU0sNkJBQTZCLENBQUM7QUFDckQsT0FBTyxjQUFjLE1BQU0sdUNBQXVDLENBQUM7QUFDbkUsT0FBTyxZQUFZLE1BQU0sa0RBQWtELENBQUM7OztBQUU1RSxNQUFNLGlCQUFpQixHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqRSxNQUFNLGdCQUFnQixHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRXJGLElBQUksV0FBVyxDQUFDO0FBQ2hCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFJLGdCQUFnQixHQUFHLFVBQVUsUUFBUTtJQUN2QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakIsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQztBQUVGLGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDcEIsR0FBRyxDQUFDLFFBQVE7UUFDVixPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJ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QUM5RCxZQUFZLEdBQUcsdUJBQXVCLENBQUM7QUFDekMsQ0FBQyxDQUFDO0FBR0YsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUE4QixRQUFhLEVBQUUsTUFBYyxFQUFjLFVBQXNCO1FBQzdGLFlBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7MkhBSFUsbUJBQW1CLGtCQUNWLFFBQVE7NEhBRGpCLG1CQUFtQjs0SEFBbkIsbUJBQW1COzs0RkFBbkIsbUJBQW1CO2tCQUQvQixRQUFRO21CQUFDLEVBQUU7OzBCQUVHLE1BQU07MkJBQUMsUUFBUTs7MEJBQWtDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMjQuMi4zXG4gKiBCdWlsZCBkYXRlOiBGcmkgRGVjIDA2IDIwMjRcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDI0IERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcbmltcG9ydCB7XHJcbiAgTmdNb2R1bGUsIEluamVjdCwgTmdab25lLCBPcHRpb25hbCwgVkVSU0lPTixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQsIFhockZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgaHR0cFJlcXVlc3QgZnJvbSAnZGV2ZXh0cmVtZS9jb3JlL2h0dHBfcmVxdWVzdCc7XHJcblxyXG5pbXBvcnQgZG9tQWRhcHRlciBmcm9tICdkZXZleHRyZW1lL2NvcmUvZG9tX2FkYXB0ZXInO1xyXG5pbXBvcnQgcmVhZHlDYWxsYmFja3MgZnJvbSAnZGV2ZXh0cmVtZS9jb3JlL3V0aWxzL3JlYWR5X2NhbGxiYWNrcyc7XHJcbmltcG9ydCBldmVudHNFbmdpbmUgZnJvbSAnZGV2ZXh0cmVtZS9jb21tb24vY29yZS9ldmVudHMvY29yZS9ldmVudHNfZW5naW5lJztcclxuXHJcbmNvbnN0IG91dHNpZGVab25lRXZlbnRzID0gWydtb3VzZW1vdmUnLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0J107XHJcbmNvbnN0IGluc2lkZVpvbmVFdmVudHMgPSBbJ21vdXNldXAnLCAnY2xpY2snLCAnbW91c2Vkb3duJywgJ3RyYW5zaXRpb25lbmQnLCAnd2hlZWwnXTtcclxuXHJcbmxldCBvcmlnaW5hbEFkZDtcclxubGV0IGNhbGxiYWNrcyA9IFtdO1xyXG5sZXQgcmVhZHlDYWxsYmFja0FkZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gIGlmICghb3JpZ2luYWxBZGQpIHtcclxuICAgIG9yaWdpbmFsQWRkID0gdGhpcy5jYWxsQmFzZS5iaW5kKHRoaXMpO1xyXG4gIH1cclxuICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbn07XHJcblxyXG5yZWFkeUNhbGxiYWNrcy5pbmplY3Qoe1xyXG4gIGFkZChjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIHJlYWR5Q2FsbGJhY2tBZGQuY2FsbCh0aGlzLCBjYWxsYmFjayk7XHJcbiAgfSxcclxufSk7XHJcblxyXG5sZXQgZG9JbmplY3Rpb25zID0gKGRvY3VtZW50OiBhbnksIG5nWm9uZTogTmdab25lLCB4aHJGYWN0b3J5OiBYaHJGYWN0b3J5KSA9PiB7XHJcbiAgaWYgKE51bWJlcihWRVJTSU9OLm1ham9yKSA8IDEyKSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ1lvdXIgdmVyc2lvbiBvZiBBbmd1bGFyIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1cGRhdGUgeW91ciBwcm9qZWN0IHRvIHZlcnNpb24gMTIgb3IgbGF0ZXIuJ1xyXG4gICAgICAgICsgJyBQbGVhc2UgcmVmZXIgdG8gdGhlIEFuZ3VsYXIgVXBkYXRlIEd1aWRlIGZvciBtb3JlIGluZm9ybWF0aW9uOiBodHRwczovL3VwZGF0ZS5hbmd1bGFyLmlvJyk7XHJcbiAgfVxyXG5cclxuICBkb21BZGFwdGVyLmluamVjdCh7XHJcbiAgICBfZG9jdW1lbnQ6IGRvY3VtZW50LFxyXG5cclxuICAgIGxpc3RlbiguLi5hcmdzKSB7XHJcbiAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IGFyZ3NbMV07XHJcbiAgICAgIGlmIChvdXRzaWRlWm9uZUV2ZW50cy5pbmNsdWRlcyhldmVudE5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmNhbGxCYXNlLmFwcGx5KHRoaXMsIGFyZ3MpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5nWm9uZS5pc1N0YWJsZSAmJiBpbnNpZGVab25lRXZlbnRzLmluY2x1ZGVzKGV2ZW50TmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gbmdab25lLnJ1bigoKSA9PiB0aGlzLmNhbGxCYXNlLmFwcGx5KHRoaXMsIGFyZ3MpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuY2FsbEJhc2UuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGlzRWxlbWVudE5vZGUoZWxlbWVudCkge1xyXG4gICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxO1xyXG4gICAgfSxcclxuXHJcbiAgICBpc1RleHROb2RlKGVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMztcclxuICAgIH0sXHJcblxyXG4gICAgaXNEb2N1bWVudChlbGVtZW50KSB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDk7XHJcbiAgICB9LFxyXG4gIH0pO1xyXG5cclxuICBodHRwUmVxdWVzdC5pbmplY3Qoe1xyXG4gICAgZ2V0WGhyKCkge1xyXG4gICAgICBpZiAoIXhockZhY3RvcnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYWxsQmFzZS5hcHBseSh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBfeGhyID0geGhyRmFjdG9yeS5idWlsZCgpO1xyXG4gICAgICBpZiAoISgnd2l0aENyZWRlbnRpYWxzJyBpbiBfeGhyKSkge1xyXG4gICAgICAgIChfeGhyIGFzIGFueSkud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBfeGhyO1xyXG4gICAgfSxcclxuICB9KTtcclxuXHJcbiAgY29uc3QgcnVuUmVhZHlDYWxsYmFja3NJblpvbmUgPSAoKSA9PiB7XHJcbiAgICBuZ1pvbmUucnVuKCgpID0+IHtcclxuICAgICAgZXZlbnRzRW5naW5lLnNldCh7fSk7XHJcbiAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaykgPT4gb3JpZ2luYWxBZGQuY2FsbChudWxsLCBjYWxsYmFjaykpO1xyXG4gICAgICBjYWxsYmFja3MgPSBbXTtcclxuICAgICAgcmVhZHlDYWxsYmFja3MuZmlyZSgpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcnVuUmVhZHlDYWxsYmFja3NJblpvbmUoKTtcclxuXHJcbiAgcmVhZHlDYWxsYmFja0FkZCA9IChjYWxsYmFjaykgPT4gbmdab25lLnJ1bigoKSA9PiBjYWxsYmFjaygpKTtcclxuICBkb0luamVjdGlvbnMgPSBydW5SZWFkeUNhbGxiYWNrc0luWm9uZTtcclxufTtcclxuXHJcbkBOZ01vZHVsZSh7fSlcclxuZXhwb3J0IGNsYXNzIER4SW50ZWdyYXRpb25Nb2R1bGUge1xyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50OiBhbnksIG5nWm9uZTogTmdab25lLCBAT3B0aW9uYWwoKSB4aHJGYWN0b3J5OiBYaHJGYWN0b3J5KSB7XHJcbiAgICBkb0luamVjdGlvbnMoZG9jdW1lbnQsIG5nWm9uZSwgeGhyRmFjdG9yeSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==