/*!
 * devextreme-angular
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { Component, ElementRef, Inject, NgZone, PLATFORM_ID, TransferState, Type, ViewChild, } from '@angular/core';
import { DxTemplateHost, IterableDifferHelper, NestedOptionHost, WatcherHelper, } from 'devextreme-angular/core';
import { DxPopupComponent } from '../component';
import { DxServicePopupInsertionDirective } from './insertion.directive';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class PopupServiceComponent extends DxPopupComponent {
    contentComponent;
    popupOptions;
    contentInsertion;
    contentRef;
    constructor(contentComponent, popupOptions, elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId);
        this.contentComponent = contentComponent;
        this.popupOptions = popupOptions;
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.popupOptions) {
            this.instance.option(this.popupOptions);
        }
        this.contentRef = this.contentInsertion?.viewContainerRef.createComponent(this.contentComponent);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PopupServiceComponent, deps: [{ token: 'popupServiceContentComponent' }, { token: 'popupServiceOptions' }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.DxTemplateHost }, { token: i1.WatcherHelper }, { token: i1.IterableDifferHelper }, { token: i1.NestedOptionHost }, { token: i0.TransferState }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: PopupServiceComponent, isStandalone: true, selector: "ng-component", providers: [
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper,
        ], viewQueries: [{ propertyName: "contentInsertion", first: true, predicate: DxServicePopupInsertionDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: '<ng-template popup-content-insertion></ng-template>', isInline: true, dependencies: [{ kind: "directive", type: DxServicePopupInsertionDirective, selector: "[popup-content-insertion]" }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PopupServiceComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: true,
                    imports: [DxServicePopupInsertionDirective],
                    providers: [
                        DxTemplateHost,
                        WatcherHelper,
                        NestedOptionHost,
                        IterableDifferHelper,
                    ],
                    template: '<ng-template popup-content-insertion></ng-template>',
                }]
        }], ctorParameters: () => [{ type: i0.Type, decorators: [{
                    type: Inject,
                    args: ['popupServiceContentComponent']
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['popupServiceOptions']
                }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.DxTemplateHost }, { type: i1.WatcherHelper }, { type: i1.IterableDifferHelper }, { type: i1.NestedOptionHost }, { type: i0.TransferState }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }], propDecorators: { contentInsertion: [{
                type: ViewChild,
                args: [DxServicePopupInsertionDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9kaXN0L3VpL3BvcHVwL3NlcnZpY2Uvc2VydmljZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBQ04sTUFBTSxFQUNOLFdBQVcsRUFDWCxhQUFhLEVBQUUsSUFBSSxFQUNuQixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLGNBQWMsRUFDZCxvQkFBb0IsRUFDcEIsZ0JBQWdCLEVBQ2hCLGFBQWEsR0FDZCxNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBZ0IsTUFBTSxjQUFjLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7OztBQWF6RSxNQUFNLE9BQU8scUJBQXlCLFNBQVEsZ0JBQWdCO0lBTVI7SUFDVDtJQU5FLGdCQUFnQixDQUFtQztJQUVoRyxVQUFVLENBQWtCO0lBRTVCLFlBQ29ELGdCQUF5QixFQUNsQyxZQUFxQyxFQUM1RSxVQUFzQixFQUN0QixNQUFjLEVBQ2QsWUFBNEIsRUFDNUIsY0FBNkIsRUFDN0IsSUFBMEIsRUFDMUIsVUFBNEIsRUFDNUIsYUFBNEIsRUFDUCxVQUFlO1FBRXRDLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFYbkQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFTO1FBQ2xDLGlCQUFZLEdBQVosWUFBWSxDQUF5QjtJQVdoRixDQUFDO0lBRUQsZUFBZTtRQUNiLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV4QixJQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDekMsQ0FBQztRQUVELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNuRyxDQUFDOzJIQTVCVSxxQkFBcUIsa0JBTXBCLDhCQUE4QixhQUM5QixxQkFBcUIseU5BUXJCLFdBQVc7K0dBZloscUJBQXFCLDJEQVJyQjtZQUNULGNBQWM7WUFDZCxhQUFhO1lBQ2IsZ0JBQWdCO1lBQ2hCLG9CQUFvQjtTQUNyQiw0RUFJVSxnQ0FBZ0MsdUVBSGpDLHFEQUFxRCw0REFQckQsZ0NBQWdDOzs0RkFTL0IscUJBQXFCO2tCQVhqQyxTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixPQUFPLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQztvQkFDM0MsU0FBUyxFQUFFO3dCQUNULGNBQWM7d0JBQ2QsYUFBYTt3QkFDYixnQkFBZ0I7d0JBQ2hCLG9CQUFvQjtxQkFDckI7b0JBQ0QsUUFBUSxFQUFFLHFEQUFxRDtpQkFDaEU7OzBCQU9NLE1BQU07MkJBQUMsOEJBQThCOzswQkFDckMsTUFBTTsyQkFBQyxxQkFBcUI7OzBCQVE1QixNQUFNOzJCQUFDLFdBQVc7eUNBZHNCLGdCQUFnQjtzQkFBNUQsU0FBUzt1QkFBQyxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMjQuMi4zXG4gKiBCdWlsZCBkYXRlOiBGcmkgRGVjIDA2IDIwMjRcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDI0IERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuaW1wb3J0IHtcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIENvbXBvbmVudCwgQ29tcG9uZW50UmVmLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5qZWN0LFxyXG4gIE5nWm9uZSxcclxuICBQTEFURk9STV9JRCxcclxuICBUcmFuc2ZlclN0YXRlLCBUeXBlLFxyXG4gIFZpZXdDaGlsZCxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBEeFRlbXBsYXRlSG9zdCxcclxuICBJdGVyYWJsZURpZmZlckhlbHBlcixcclxuICBOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gIFdhdGNoZXJIZWxwZXIsXHJcbn0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeFBvcHVwQ29tcG9uZW50LCBEeFBvcHVwVHlwZXMgfSBmcm9tICcuLi9jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEeFNlcnZpY2VQb3B1cEluc2VydGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vaW5zZXJ0aW9uLmRpcmVjdGl2ZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIGltcG9ydHM6IFtEeFNlcnZpY2VQb3B1cEluc2VydGlvbkRpcmVjdGl2ZV0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBEeFRlbXBsYXRlSG9zdCxcclxuICAgIFdhdGNoZXJIZWxwZXIsXHJcbiAgICBOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgSXRlcmFibGVEaWZmZXJIZWxwZXIsXHJcbiAgXSxcclxuICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZSBwb3B1cC1jb250ZW50LWluc2VydGlvbj48L25nLXRlbXBsYXRlPicsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb3B1cFNlcnZpY2VDb21wb25lbnQ8VD4gZXh0ZW5kcyBEeFBvcHVwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQFZpZXdDaGlsZChEeFNlcnZpY2VQb3B1cEluc2VydGlvbkRpcmVjdGl2ZSkgY29udGVudEluc2VydGlvbjogRHhTZXJ2aWNlUG9wdXBJbnNlcnRpb25EaXJlY3RpdmU7XHJcblxyXG4gIGNvbnRlbnRSZWY6IENvbXBvbmVudFJlZjxUPjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICAgIEBJbmplY3QoJ3BvcHVwU2VydmljZUNvbnRlbnRDb21wb25lbnQnKSBwcml2YXRlIGNvbnRlbnRDb21wb25lbnQ6IFR5cGU8VD4sXHJcbiAgICAgIEBJbmplY3QoJ3BvcHVwU2VydmljZU9wdGlvbnMnKSBwcml2YXRlIHBvcHVwT3B0aW9uczogRHhQb3B1cFR5cGVzLlByb3BlcnRpZXMsXHJcbiAgICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICAgIG5nWm9uZTogTmdab25lLFxyXG4gICAgICB0ZW1wbGF0ZUhvc3Q6IER4VGVtcGxhdGVIb3N0LFxyXG4gICAgICBfd2F0Y2hlckhlbHBlcjogV2F0Y2hlckhlbHBlcixcclxuICAgICAgX2lkaDogSXRlcmFibGVEaWZmZXJIZWxwZXIsXHJcbiAgICAgIG9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QsXHJcbiAgICAgIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUsXHJcbiAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IGFueSxcclxuICApIHtcclxuICAgIHN1cGVyKGVsZW1lbnRSZWYsIG5nWm9uZSwgdGVtcGxhdGVIb3N0LCBfd2F0Y2hlckhlbHBlciwgX2lkaCwgb3B0aW9uSG9zdCwgdHJhbnNmZXJTdGF0ZSwgcGxhdGZvcm1JZCk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICBzdXBlci5uZ0FmdGVyVmlld0luaXQoKTtcclxuXHJcbiAgICBpZih0aGlzLnBvcHVwT3B0aW9ucykge1xyXG4gICAgICB0aGlzLmluc3RhbmNlLm9wdGlvbih0aGlzLnBvcHVwT3B0aW9ucylcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbnRlbnRSZWYgPSB0aGlzLmNvbnRlbnRJbnNlcnRpb24/LnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KHRoaXMuY29udGVudENvbXBvbmVudCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==