/**
 * DevExtreme (cjs/__internal/events/pointer/m_mouse.js)
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("../../../common/core/events/pointer/base"));
var _observer = _interopRequireDefault(require("../../../common/core/events/pointer/observer"));
var _extend = require("../../../core/utils/extend");

function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    }
}
const eventMap = {
    dxpointerdown: "mousedown",
    dxpointermove: "mousemove",
    dxpointerup: "mouseup",
    dxpointercancel: "",
    dxpointerover: "mouseover",
    dxpointerout: "mouseout",
    dxpointerenter: "mouseenter",
    dxpointerleave: "mouseleave"
};
const normalizeMouseEvent = function(e) {
    e.pointerId = 1;
    return {
        pointers: observer.pointers(),
        pointerId: 1
    }
};
let observer;
let activated = false;
const activateStrategy = function() {
    if (activated) {
        return
    }
    observer = new _observer.default(eventMap, (() => true));
    activated = true
};
const MouseStrategy = _base.default.inherit({
    ctor() {
        this.callBase.apply(this, arguments);
        activateStrategy()
    },
    _fireEvent(args) {
        return this.callBase((0, _extend.extend)(normalizeMouseEvent(args.originalEvent), args))
    }
});
MouseStrategy.map = eventMap;
MouseStrategy.normalize = normalizeMouseEvent;
MouseStrategy.activate = activateStrategy;
MouseStrategy.resetObserver = function() {
    observer.reset()
};
var _default = exports.default = MouseStrategy;
