/**
 * DevExtreme (cjs/__internal/ui/scroll_view/utils/get_element_style.test.js)
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
var _globals = require("@jest/globals");
var _inflector = require("../../../../core/utils/inflector");
var _window = require("../../../../core/utils/window");
var _jestEach = _interopRequireDefault(require("jest-each"));
var _get_element_style = require("./get_element_style");

function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    }
}(0, _globals.describe)("getElementStyle", (() => {
    (0, _globals.it)("element is not defined", (() => {
        (0, _globals.expect)((0, _get_element_style.getElementStyle)(null)).toEqual(null)
    }));
    (0, _globals.it)("hasWindow: false", (() => {
        (0, _window.setWindow)({}, false);
        (0, _globals.expect)((0, _get_element_style.getElementStyle)({})).toEqual(null)
    }));
    (0, _globals.it)("hasWindow: true, window.getComputedStyle: undefined", (() => {
        (0, _window.setWindow)({}, true);
        (0, _globals.expect)((0, _get_element_style.getElementStyle)({})).toEqual(void 0)
    }));
    (0, _globals.it)("hasWindow: true, window.getComputedStyle: { width: 120px }", (() => {
        (0, _window.setWindow)({
            getComputedStyle: () => ({
                paddingBottom: "120px"
            })
        }, true);
        (0, _globals.expect)((0, _get_element_style.getElementStyle)({})).toEqual({
            paddingBottom: "120px"
        })
    }))
}));
(0, _globals.describe)("getElementTransform", (() => {
    (0, _globals.it)("element is not defined", (() => {
        (0, _globals.expect)((0, _get_element_style.getElementTransform)(null)).toEqual("")
    }));
    (0, _globals.it)("matrix(1, 0, 0, 1, 10, 20)", (() => {
        (0, _window.setWindow)({
            getComputedStyle: () => ({
                transform: "matrix(1, 0, 0, 1, 10, 20)"
            })
        }, true);
        (0, _globals.expect)((0, _get_element_style.getElementTransform)({})).toEqual("matrix(1, 0, 0, 1, 10, 20)")
    }))
}));
(0, _jestEach.default)(["top", "left", "right", "bottom"]).describe("side: %o", (side => {
    (0, _globals.describe)(`getElementPadding(element, ${side})`, (() => {
        (0, _globals.it)("element is not defined", (() => {
            (0, _globals.expect)((0, _get_element_style.getElementPadding)(null, side)).toEqual(0)
        }));
        (0, _globals.it)(`padding${(0,_inflector.titleize)(side)}: 5px`, (() => {
            (0, _window.setWindow)({
                getComputedStyle: () => ({
                    [`padding${(0,_inflector.titleize)(side)}`]: "5px"
                })
            }, true);
            (0, _globals.expect)((0, _get_element_style.getElementPadding)({}, side)).toEqual(5)
        }))
    }));
    (0, _globals.describe)(`getElementMargin(element, ${side})`, (() => {
        (0, _globals.it)("element is not defined", (() => {
            (0, _globals.expect)((0, _get_element_style.getElementMargin)(null, side)).toEqual(0)
        }));
        (0, _globals.it)(`margin${(0,_inflector.titleize)(side)}: 5px`, (() => {
            (0, _window.setWindow)({
                getComputedStyle: () => ({
                    [`margin${(0,_inflector.titleize)(side)}`]: "5px"
                })
            }, true);
            (0, _globals.expect)((0, _get_element_style.getElementMargin)({}, side)).toEqual(5)
        }))
    }))
}));
(0, _globals.describe)("getElementOverflowX", (() => {
    (0, _globals.it)("element is not defined", (() => {
        (0, _globals.expect)((0, _get_element_style.getElementOverflowX)(null)).toEqual("visible")
    }));
    (0, _globals.it)("overflowX: hidden", (() => {
        (0, _window.setWindow)({
            getComputedStyle: () => ({
                overflowX: "hidden"
            })
        }, true);
        (0, _globals.expect)((0, _get_element_style.getElementOverflowX)({})).toEqual("hidden")
    }))
}));
(0, _globals.describe)("getElementOverflowY", (() => {
    (0, _globals.it)("element is not defined", (() => {
        (0, _globals.expect)((0, _get_element_style.getElementOverflowY)(null)).toEqual("visible")
    }));
    (0, _globals.it)("overflowY: hidden", (() => {
        (0, _window.setWindow)({
            getComputedStyle: () => ({
                overflowY: "hidden"
            })
        }, true);
        (0, _globals.expect)((0, _get_element_style.getElementOverflowY)({})).toEqual("hidden")
    }))
}));
