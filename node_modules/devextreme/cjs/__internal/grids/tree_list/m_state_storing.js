/**
 * DevExtreme (cjs/__internal/grids/tree_list/m_state_storing.js)
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
var _m_state_storing = require("../../grids/grid_core/state_storing/m_state_storing");
var _m_core = _interopRequireDefault(require("./m_core"));

function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    }
}

function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r in t) {
                ({}).hasOwnProperty.call(t, r) && (n[r] = t[r])
            }
        }
        return n
    }, _extends.apply(null, arguments)
}
const stateStoring = Base => class extends(_m_state_storing.stateStoringModule.extenders.controllers.stateStoring(Base)) {
    applyState(state) {
        super.applyState(state);
        this.option("expandedRowKeys", state.expandedRowKeys ? state.expandedRowKeys.slice() : [])
    }
};
const data = Base => class extends(_m_state_storing.stateStoringModule.extenders.controllers.data(Base)) {
    getUserState() {
        const state = super.getUserState();
        if (!this.option("autoExpandAll")) {
            state.expandedRowKeys = this.option("expandedRowKeys")
        }
        return state
    }
};
_m_core.default.registerModule("stateStoring", _extends({}, _m_state_storing.stateStoringModule, {
    extenders: _extends({}, _m_state_storing.stateStoringModule.extenders, {
        controllers: _extends({}, _m_state_storing.stateStoringModule.extenders.controllers, {
            stateStoring: stateStoring,
            data: data
        })
    })
}));
