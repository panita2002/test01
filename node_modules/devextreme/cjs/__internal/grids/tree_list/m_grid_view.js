/**
 * DevExtreme (cjs/__internal/grids/tree_list/m_grid_view.js)
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
var _m_grid_view = require("../../grids/grid_core/views/m_grid_view");
var _m_core = _interopRequireDefault(require("./m_core"));

function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    }
}

function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r in t) {
                ({}).hasOwnProperty.call(t, r) && (n[r] = t[r])
            }
        }
        return n
    }, _extends.apply(null, arguments)
}
const TREELIST_EXPANDABLE_INSTRUCTION = "dxTreeList-ariaExpandableInstruction";
class TreeListResizingController extends _m_grid_view.ResizingController {
    constructor() {
        super(...arguments);
        this._expandableWidgetAriaId = TREELIST_EXPANDABLE_INSTRUCTION
    }
    _getWidgetAriaLabel() {
        return "dxTreeList-ariaTreeList"
    }
    _toggleBestFitMode(isBestFit) {
        super._toggleBestFitMode(isBestFit);
        const $rowsTable = this._rowsView.getTableElement();
        $rowsTable.find(".dx-treelist-cell-expandable").toggleClass(this.addWidgetPrefix("best-fit"), isBestFit)
    }
}
_m_core.default.registerModule("gridView", {
    defaultOptions: _m_grid_view.gridViewModule.defaultOptions,
    controllers: _extends({}, _m_grid_view.gridViewModule.controllers, {
        resizing: TreeListResizingController
    }),
    views: _m_grid_view.gridViewModule.views
});
