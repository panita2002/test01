/**
 * DevExtreme (cjs/__internal/grids/grid_core/sticky_columns/m_sticky_columns.js)
 * Version: 24.2.3
 * Build date: Fri Dec 06 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.stickyColumnsModule = void 0;
var _renderer = _interopRequireDefault(require("../../../../core/renderer"));
var _position = require("../../../../core/utils/position");
var _size = require("../../../../core/utils/size");
var _get_element_location_internal = require("../../../ui/scroll_view/utils/get_element_location_internal");
var _const = require("../adaptivity/const");
var _m_keyboard_navigation_utils = require("../keyboard_navigation/m_keyboard_navigation_utils");
var _m_utils = _interopRequireDefault(require("../m_utils"));
var _const2 = require("../master_detail/const");
var _m_rows_view = require("../views/m_rows_view");
var _const3 = require("./const");
var _dom = require("./dom");
var _utils = require("./utils");

function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    }
}
const baseStickyColumns = Base => class extends Base {
    _addStickyColumnBorderLeftClass($cell, column, rowIndex) {
        let onlyWithinBandColumn = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;
        let fixedPosition = arguments.length > 4 ? arguments[4] : void 0;
        const isFirstFixedCell = (0, _utils.isFirstFixedColumn)(this._columnsController, column, rowIndex, onlyWithinBandColumn, fixedPosition);
        if (isFirstFixedCell) {
            _dom.GridCoreStickyColumnsDom.addStickyColumnBorderLeftClass($cell, this.addWidgetPrefix.bind(this))
        }
    }
    _addStickyColumnBorderRightClass($cell, column, rowIndex) {
        let onlyWithinBandColumn = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;
        let fixedPosition = arguments.length > 4 ? arguments[4] : void 0;
        const isLastFixedCell = (0, _utils.isLastFixedColumn)(this._columnsController, column, rowIndex, onlyWithinBandColumn, fixedPosition);
        if (isLastFixedCell) {
            _dom.GridCoreStickyColumnsDom.addStickyColumnBorderRightClass($cell, this.addWidgetPrefix.bind(this))
        }
    }
    updateBorderCellClasses($cell, column, rowIndex) {
        const columnsController = this._columnsController;
        const isRowsView = "rowsView" === this.name;
        const needToRemoveBorder = (0, _utils.needToRemoveColumnBorder)(columnsController, column, rowIndex, isRowsView);
        const isFirstColumn = null === columnsController || void 0 === columnsController ? void 0 : columnsController.isFirstColumn(column, rowIndex);
        _dom.GridCoreStickyColumnsDom.toggleColumnNoBorderClass($cell, needToRemoveBorder, this.addWidgetPrefix.bind(this));
        _dom.GridCoreStickyColumnsDom.toggleFirstHeaderClass($cell, isFirstColumn, this.addWidgetPrefix.bind(this))
    }
    _updateBorderClasses() {
        const isColumnHeadersView = "columnHeadersView" === this.name;
        const $rows = this._getRowElementsCore().not(`.${_const2.CLASSES.detailRow}`).toArray();
        $rows.forEach(((row, index) => {
            const rowIndex = isColumnHeadersView ? index : null;
            const $cells = (0, _renderer.default)(row).children("td").toArray();
            let columns = this.getColumns(rowIndex);
            columns = (0, _utils.processFixedColumns)(this._columnsController, columns);
            $cells.forEach(((cell, cellIndex) => {
                const $cell = (0, _renderer.default)(cell);
                const column = columns[cellIndex];
                if (column.visibleWidth !== _const.HIDDEN_COLUMNS_WIDTH) {
                    this.updateBorderCellClasses($cell, column, rowIndex)
                }
            }))
        }))
    }
    _renderCore(options) {
        super._renderCore(options);
        const $element = this.element();
        const hasStickyColumns = this.hasStickyColumns();
        _dom.GridCoreStickyColumnsDom.toggleStickyColumnsClass($element, hasStickyColumns, this.addWidgetPrefix.bind(this))
    }
    _createCell(options) {
        const {
            column: column
        } = options;
        const {
            rowType: rowType
        } = options;
        const $cell = super._createCell(options);
        const hasStickyColumns = this.hasStickyColumns();
        const rowIndex = "header" === rowType ? options.rowIndex : null;
        const isSummary = "groupFooter" === rowType || "totalFooter" === rowType || "group" === rowType;
        const isExpandColumn = column.command && "expand" === column.command;
        if (hasStickyColumns && !(0, _utils.needToDisableStickyColumn)(this._columnsController, column)) {
            this.updateBorderCellClasses($cell, column, rowIndex);
            if (column.fixed) {
                const fixedPosition = (0, _utils.getColumnFixedPosition)(this._columnsController, column);
                _dom.GridCoreStickyColumnsDom.addStickyColumnClass($cell, fixedPosition, this.addWidgetPrefix.bind(this));
                if (!isSummary && !isExpandColumn) {
                    switch (fixedPosition) {
                        case _const3.StickyPosition.Right:
                            this._addStickyColumnBorderLeftClass($cell, column, rowIndex, false, _const3.StickyPosition.Right);
                            break;
                        case _const3.StickyPosition.Sticky:
                            this._addStickyColumnBorderLeftClass($cell, column, rowIndex, true);
                            this._addStickyColumnBorderRightClass($cell, column, rowIndex, true);
                            break;
                        default:
                            this._addStickyColumnBorderRightClass($cell, column, rowIndex, false, _const3.StickyPosition.Left)
                    }
                }
            }
        }
        return $cell
    }
    setStickyOffsets(rowIndex, offsets) {
        const columnsController = this._columnsController;
        const rtlEnabled = this.option("rtlEnabled");
        const showColumnHeaders = this.option("showColumnHeaders");
        let widths = this.getColumnWidths(void 0, rowIndex);
        let columns = this.getColumns(showColumnHeaders ? rowIndex : void 0);
        columns = (0, _utils.processFixedColumns)(this._columnsController, columns);
        if (rtlEnabled) {
            columns = rtlEnabled ? [...columns].reverse() : columns;
            widths = rtlEnabled ? [...widths].reverse() : widths
        }
        columns.forEach(((column, columnIndex) => {
            if (column.fixed) {
                const visibleColumnIndex = rtlEnabled ? columns.length - columnIndex - 1 : columnIndex;
                const offset = (0, _utils.getStickyOffset)(columnsController, columns, widths, columnIndex, offsets);
                if (offsets) {
                    offsets[column.index] = offset
                }
                const styleProps = (0, _utils.normalizeOffset)(offset);
                this.setCellProperties(styleProps, visibleColumnIndex, rowIndex)
            }
        }))
    }
    setColumnWidths(options) {
        const hasStickyColumns = this.hasStickyColumns();
        const columnsResizerController = this.getController("columnsResizer");
        const isColumnResizing = null === columnsResizerController || void 0 === columnsResizerController ? void 0 : columnsResizerController.isResizing();
        super.setColumnWidths(options);
        if (hasStickyColumns && isColumnResizing) {
            this.setStickyOffsets()
        }
    }
    _resizeCore() {
        const hasStickyColumns = this.hasStickyColumns();
        const adaptiveColumns = this.getController("adaptiveColumns");
        const hidingColumnsQueue = null === adaptiveColumns || void 0 === adaptiveColumns ? void 0 : adaptiveColumns.getHidingColumnsQueue();
        super._resizeCore.apply(this, arguments);
        if (hasStickyColumns) {
            this.setStickyOffsets();
            if (null !== hidingColumnsQueue && void 0 !== hidingColumnsQueue && hidingColumnsQueue.length) {
                this._updateBorderClasses()
            }
        }
    }
    hasStickyColumns() {
        var _this$_columnsControl;
        const stickyColumns = null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.getStickyColumns();
        return true !== this.option("columnFixing.legacyMode") && !!stickyColumns.length
    }
};
const columnHeadersView = Base => class extends(baseStickyColumns(Base)) {
    setStickyOffsets() {
        const offsets = {};
        const rows = this._getRows();
        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var _rows$rowIndex;
            const isFilterRow = "filter" === (null === rows || void 0 === rows || null === (_rows$rowIndex = rows[rowIndex]) || void 0 === _rows$rowIndex ? void 0 : _rows$rowIndex.rowType);
            super.setStickyOffsets(rowIndex, isFilterRow ? void 0 : offsets)
        }
    }
    getContextMenuItems(options) {
        const {
            column: column
        } = options;
        const columnsController = this._columnsController;
        const columnFixingOptions = this.option("columnFixing");
        let items = super.getContextMenuItems(options);
        if (options.row && "header" === options.row.rowType) {
            if (true === columnFixingOptions.enabled && column && column.allowFixing) {
                const onItemClick = params => {
                    switch (params.itemData.value) {
                        case "none":
                            this._columnsController.columnOption(column.index, "fixed", false);
                            break;
                        case "left":
                            this._columnsController.columnOption(column.index, {
                                fixed: true,
                                fixedPosition: "left"
                            });
                            break;
                        case "right":
                            this._columnsController.columnOption(column.index, {
                                fixed: true,
                                fixedPosition: "right"
                            });
                            break;
                        case "sticky":
                            this._columnsController.columnOption(column.index, {
                                fixed: true,
                                fixedPosition: "sticky"
                            })
                    }
                };
                const fixedPositionItems = [{
                    text: columnFixingOptions.texts.leftPosition,
                    icon: columnFixingOptions.icons.leftPosition,
                    value: "left",
                    disabled: column.fixed && (!column.fixedPosition || "left" === column.fixedPosition),
                    onItemClick: onItemClick
                }, {
                    text: columnFixingOptions.texts.rightPosition,
                    icon: columnFixingOptions.icons.rightPosition,
                    value: "right",
                    disabled: column.fixed && "right" === column.fixedPosition,
                    onItemClick: onItemClick
                }];
                if (true !== this.option("columnFixing.legacyMode") && !columnsController.isVirtualMode()) {
                    fixedPositionItems.push({
                        text: columnFixingOptions.texts.stickyPosition,
                        icon: columnFixingOptions.icons.stickyPosition,
                        value: "sticky",
                        disabled: column.fixed && column.fixedPosition === _const3.StickyPosition.Sticky,
                        onItemClick: onItemClick
                    })
                }
                items = items || [];
                items.push({
                    text: columnFixingOptions.texts.fix,
                    icon: columnFixingOptions.icons.fix,
                    beginGroup: true,
                    items: fixedPositionItems
                }, {
                    text: columnFixingOptions.texts.unfix,
                    icon: columnFixingOptions.icons.unfix,
                    value: "none",
                    disabled: !column.fixed,
                    onItemClick: onItemClick
                })
            }
        }
        return items
    }
};
const rowsView = Base => class extends(baseStickyColumns(Base)) {
    _getMasterDetailWidth() {
        var _this$component$$elem, _this$component$$elem2;
        const componentWidth = (null === (_this$component$$elem = (_this$component$$elem2 = this.component.$element()).width) || void 0 === _this$component$$elem ? void 0 : _this$component$$elem.call(_this$component$$elem2)) ?? 0;
        return componentWidth - _m_utils.default.getComponentBorderWidth(this, this._$element) - this.getScrollbarWidth()
    }
    _renderMasterDetailCell($row, row, options) {
        const $detailCell = super._renderMasterDetailCell($row, row, options);
        if (this.hasStickyColumns()) {
            $detailCell.addClass(this.addWidgetPrefix(_const3.CLASSES.stickyColumnLeft)).width(this._getMasterDetailWidth())
        }
        return $detailCell
    }
    _updateMasterDetailWidths() {
        const width = this._getMasterDetailWidth();
        const $masterDetailCells = this._getRowElements().children(".dx-master-detail-cell");
        (0, _size.setWidth)($masterDetailCells, `${width}px`)
    }
    setStickyOffsets(rowIndex, offsets) {
        super.setStickyOffsets(rowIndex, offsets);
        this.setStickyOffsetsForGroupCells()
    }
    setStickyOffsetsForGroupCells() {
        const groupColumns = this._columnsController.getGroupColumns();
        let columns = this.getColumns();
        let widths = this.getColumnWidths();
        const columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(columns);
        const rtlEnabled = this.option("rtlEnabled");
        if (rtlEnabled) {
            columns = rtlEnabled ? [...columns].reverse() : columns;
            widths = rtlEnabled ? [...widths].reverse() : widths
        }
        const $tableElement = this.getTableElement();
        groupColumns.forEach((column => {
            const columnIndex = columnsCountBeforeGroups + column.groupIndex + 1;
            const visibleColumnIndex = rtlEnabled ? columns.length - columnIndex - 1 : columnIndex;
            const offset = (0, _utils.getStickyOffset)(this._columnsController, columns, widths, visibleColumnIndex);
            const styleProps = (0, _utils.normalizeOffset)(offset);
            const $cells = $tableElement.children().children(".dx-group-row").find(`.dx-group-cell[aria-colindex='${columnIndex+1}']`);
            for (let i = 0; i < $cells.length; i += 1) {
                const cell = $cells.get(i);
                const container = (0, _renderer.default)(cell).find(".dx-datagrid-group-row-container").get(0);
                Object.assign(cell.style, styleProps);
                Object.assign(container.style, styleProps)
            }
        }))
    }
    _resizeCore() {
        const hasStickyColumns = this.hasStickyColumns();
        super._resizeCore.apply(this, arguments);
        if (hasStickyColumns) {
            this._updateMasterDetailWidths()
        }
    }
    _renderCellContent($cell, options, renderOptions) {
        if (!(0, _m_rows_view.isGroupRow)(options) || !this.hasStickyColumns()) {
            return super._renderCellContent($cell, options, renderOptions)
        }
        const $container = (0, _renderer.default)("<div>").addClass(this.addWidgetPrefix(_const3.CLASSES.groupRowContainer)).appendTo($cell);
        return super._renderCellContent($container, options, renderOptions)
    }
    _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {
        super._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);
        const stickySummarySelector = `.${this.addWidgetPrefix(_const3.CLASSES.stickyColumn)}`;
        if ($groupCell.parent().find(stickySummarySelector).length && _dom.GridCoreStickyColumnsDom.doesGroupCellEndInFirstColumn($groupCell)) {
            _dom.GridCoreStickyColumnsDom.addStickyColumnBorderRightClass($groupCell, this.addWidgetPrefix.bind(this))
        }
    }
    _handleScroll(e) {
        const hasStickyColumns = this.hasStickyColumns();
        super._handleScroll(e);
        if (hasStickyColumns) {
            const editorFactoryController = this.getController("editorFactory");
            const hasOverlayElements = editorFactoryController.hasOverlayElements();
            if (hasOverlayElements) {
                const $focusedElement = editorFactoryController.focus();
                editorFactoryController.focus($focusedElement)
            }
        }
    }
    _scrollToElement($element, offset) {
        let scrollOffset = offset;
        const hasStickyColumns = this.hasStickyColumns();
        if (hasStickyColumns) {
            var _this$getScrollable;
            const isFixedCell = _dom.GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));
            if (!$element.is("td") || isFixedCell) {
                return
            }
            const $row = null === $element || void 0 === $element ? void 0 : $element.closest("tr");
            const $cells = null === $row || void 0 === $row ? void 0 : $row.children();
            const $scrollContainer = null === (_this$getScrollable = this.getScrollable()) || void 0 === _this$getScrollable ? void 0 : _this$getScrollable.container();
            scrollOffset = _dom.GridCoreStickyColumnsDom.getScrollPadding($cells, $scrollContainer, this.addWidgetPrefix.bind(this))
        }
        super._scrollToElement($element, scrollOffset)
    }
};
const footerView = Base => class extends(baseStickyColumns(Base)) {};
const columnsResizer = Base => class extends Base {
    getSeparatorOffsetX($cell) {
        var _this$_columnHeadersV;
        const hasStickyColumns = null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.hasStickyColumns();
        if (hasStickyColumns) {
            const $container = (0, _renderer.default)(this._columnHeadersView.getContent());
            const isFixedCellPinnedToRight = _dom.GridCoreStickyColumnsDom.isFixedCellPinnedToRight($cell, $container, this.addWidgetPrefix.bind(this));
            const isWidgetResizingMode = "widget" === this.option("columnResizingMode");
            if (isWidgetResizingMode && isFixedCellPinnedToRight) {
                var _$cell$offset;
                return (null === (_$cell$offset = $cell.offset()) || void 0 === _$cell$offset ? void 0 : _$cell$offset.left) ?? 0
            }
        }
        return super.getSeparatorOffsetX($cell)
    }
    _correctColumnIndexForPoint(point, correctionValue, columns) {
        const rtlEnabled = this.option("rtlEnabled");
        const isWidgetResizingMode = "widget" === this.option("columnResizingMode");
        const columnIndex = Math.max(point.index - 1, 0);
        const column = columns[columnIndex];
        const nextColumnIndex = this._getNextColumnIndex(columnIndex);
        const nextColumn = columns[nextColumnIndex];
        if (isWidgetResizingMode && !(0, _utils.isFixedEdge)(point, column, nextColumn)) {
            const $container = (0, _renderer.default)(this._columnHeadersView.getContent());
            const isFixedCellPinnedToRight = _dom.GridCoreStickyColumnsDom.isFixedCellPinnedToRight((0, _renderer.default)(point.item), $container, this.addWidgetPrefix.bind(this));
            if (isFixedCellPinnedToRight) {
                point.columnIndex -= rtlEnabled ? 1 : 0;
                return
            }
        }
        super._correctColumnIndexForPoint(point, correctionValue, columns)
    }
    _needToInvertResizing($cell) {
        const result = super._needToInvertResizing($cell);
        const isWidgetResizingMode = "widget" === this.option("columnResizingMode");
        if (!result && isWidgetResizingMode) {
            const $container = (0, _renderer.default)(this._columnHeadersView.getContent());
            return _dom.GridCoreStickyColumnsDom.isFixedCellPinnedToRight($cell, $container, this.addWidgetPrefix.bind(this))
        }
        return result
    }
    _generatePointsByColumns() {
        var _this$_columnHeadersV2;
        const hasStickyColumns = null === (_this$_columnHeadersV2 = this._columnHeadersView) || void 0 === _this$_columnHeadersV2 ? void 0 : _this$_columnHeadersV2.hasStickyColumns();
        super._generatePointsByColumns(hasStickyColumns)
    }
    _pointCreated(point, cellsLength, columns) {
        var _this$_columnHeadersV3;
        const hasStickyColumns = null === (_this$_columnHeadersV3 = this._columnHeadersView) || void 0 === _this$_columnHeadersV3 ? void 0 : _this$_columnHeadersV3.hasStickyColumns();
        const result = super._pointCreated(point, cellsLength, columns);
        const needToCheckPoint = hasStickyColumns && cellsLength > 0;
        if (needToCheckPoint && !result) {
            const column = columns[point.index - 1];
            const nextColumnIndex = this._getNextColumnIndex(point.index - 1);
            const nextColumn = columns[nextColumnIndex];
            return _dom.GridCoreStickyColumnsDom.noNeedToCreateResizingPoint(this._columnHeadersView, {
                point: point,
                column: column,
                nextColumn: nextColumn
            }, this.addWidgetPrefix.bind(this))
        }
        return result
    }
};
const draggingHeader = Base => class extends Base {
    _generatePointsByColumns(options) {
        var _this$_columnHeadersV4;
        const hasStickyColumns = null === (_this$_columnHeadersV4 = this._columnHeadersView) || void 0 === _this$_columnHeadersV4 ? void 0 : _this$_columnHeadersV4.hasStickyColumns();
        const {
            sourceLocation: sourceLocation,
            sourceColumn: sourceColumn,
            targetDraggingPanel: targetDraggingPanel
        } = options;
        const isDraggingBetweenHeaders = "headers" === sourceLocation && "headers" === (null === targetDraggingPanel || void 0 === targetDraggingPanel ? void 0 : targetDraggingPanel.getName());
        if (hasStickyColumns && isDraggingBetweenHeaders) {
            const columnFixedPosition = (0, _utils.getColumnFixedPosition)(this._columnsController, sourceColumn);
            switch (true) {
                case sourceColumn.fixed && columnFixedPosition === _const3.StickyPosition.Left:
                    options.columnElements = _dom.GridCoreStickyColumnsDom.getLeftFixedCells(options.columnElements, this.addWidgetPrefix.bind(this));
                    options.startColumnIndex = options.columnElements.eq(0).index();
                    break;
                case sourceColumn.fixed && columnFixedPosition === _const3.StickyPosition.Right:
                    options.columnElements = _dom.GridCoreStickyColumnsDom.getRightFixedCells(options.columnElements, this.addWidgetPrefix.bind(this));
                    options.startColumnIndex = options.columnElements.eq(0).index();
                    break;
                default:
                    options.columnElements = _dom.GridCoreStickyColumnsDom.getNonFixedAndStickyCells(options.columnElements, this.addWidgetPrefix.bind(this));
                    options.startColumnIndex = options.columnElements.eq(0).index()
            }
        }
        return super._generatePointsByColumns(options, hasStickyColumns)
    }
    _pointCreated(point, columns, location, sourceColumn) {
        const hasStickyColumns = this._columnHeadersView.hasStickyColumns();
        const $cells = this._columnHeadersView.getColumnElements();
        const needToCheckPoint = hasStickyColumns && "headers" === location && (null === $cells || void 0 === $cells ? void 0 : $cells.length) && (!sourceColumn.fixed || sourceColumn.fixedPosition === _const3.StickyPosition.Sticky);
        const result = super._pointCreated(point, columns, location, sourceColumn);
        if (needToCheckPoint && !result) {
            return _dom.GridCoreStickyColumnsDom.noNeedToCreateReorderingPoint(point, $cells, (0, _renderer.default)(this._columnHeadersView.getContent()), this.addWidgetPrefix.bind(this))
        }
        return result
    }
};
const editorFactory = Base => class extends Base {
    getOverlayContainerIfNeeded($cell) {
        const hasFixedColumns = this._rowsView.hasStickyColumns();
        const isFixedCell = _dom.GridCoreStickyColumnsDom.isFixedCell($cell, this.addWidgetPrefix.bind(this));
        if (hasFixedColumns && isFixedCell) {
            return $cell.closest(`.${this.addWidgetPrefix(_const3.CLASSES.stickyColumns)}`)
        }
        return
    }
    updateFocusOverlaySize($element, position) {
        const hasFixedColumns = this._rowsView.hasStickyColumns();
        if (!hasFixedColumns) {
            super.updateFocusOverlaySize($element, position)
        }
    }
    getFocusOverlaySize($element) {
        const hasFixedColumns = this._rowsView.hasStickyColumns();
        if (hasFixedColumns) {
            const elementRect = (0, _position.getBoundingRect)($element.get(0));
            const isLastCell = _dom.GridCoreStickyColumnsDom.isLastCell($element);
            const isFixedCell = _dom.GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));
            return {
                width: elementRect.right - elementRect.left + (isLastCell || isFixedCell ? 0 : 1),
                height: elementRect.bottom - elementRect.top
            }
        }
        return super.getFocusOverlaySize($element)
    }
    getValidationMessageContainer($cell) {
        return this.getOverlayContainerIfNeeded($cell) ?? super.getValidationMessageContainer($cell)
    }
    getRevertButtonContainer($cell) {
        return this.getOverlayContainerIfNeeded($cell) ?? super.getRevertButtonContainer($cell)
    }
    getFocusOverlayContainer($focusedElement) {
        return this.getOverlayContainerIfNeeded($focusedElement) ?? super.getFocusOverlayContainer($focusedElement)
    }
    overlayPositionedHandler(e, isOverlayVisible) {
        const columnHeaders = this.getView("columnHeadersView");
        const hasStickyColumns = columnHeaders.hasStickyColumns();
        super.overlayPositionedHandler(e, isOverlayVisible);
        if (hasStickyColumns) {
            const $cell = (0, _renderer.default)(e.element).closest("td");
            if (!_dom.GridCoreStickyColumnsDom.isFixedCell($cell, this.addWidgetPrefix.bind(this))) {
                const $wrapper = e.component.$wrapper();
                const $overlayContent = e.component.$content();
                const isOutsideVisibleArea = _dom.GridCoreStickyColumnsDom.isOutsideVisibleArea($overlayContent, (0, _renderer.default)(columnHeaders.getColumnElements()), (0, _renderer.default)(columnHeaders.getContent()), this.addWidgetPrefix.bind(this));
                $wrapper.css("zIndex", isOutsideVisibleArea ? 1 : (null === this || void 0 === this ? void 0 : this.getOverlayBaseZIndex()) ?? 0)
            }
        }
    }
    updateFocusOverlay($element) {
        let isHideBorder = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;
        if (!isHideBorder) {
            const isFixedCell = _dom.GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));
            this._$focusOverlay.toggleClass(_const3.CLASSES.focusedFixedElement, isFixedCell);
            const isGroupElement = (0, _m_keyboard_navigation_utils.isGroupRow)($element);
            const isGroupFooterRowElement = (0, _m_keyboard_navigation_utils.isGroupFooterRow)($element);
            const isAdaptiveElement = (0, _m_keyboard_navigation_utils.isAdaptiveItem)($element);
            if (isFixedCell || isGroupElement || isGroupFooterRowElement || isAdaptiveElement) {
                this._$focusOverlay.toggleClass(_const3.CLASSES.focusedFixedElement, true)
            }
        }
        super.updateFocusOverlay($element, isHideBorder)
    }
};
const resizing = Base => class extends Base {
    resize() {
        const result = super.resize();
        const hasStickyColumns = this._columnHeadersView.hasStickyColumns();
        if (hasStickyColumns && null !== this && void 0 !== this && this.hasResizeTimeout()) {
            this._rowsView.setStickyOffsets()
        }
        return result
    }
};
const keyboardNavigation = Base => class extends Base {
    headerTabKeyHandler(_ref) {
        var _this$_columnHeadersV5, _this$_rowsView;
        let {
            originalEvent: originalEvent,
            shift: shift
        } = _ref;
        const hasStickyColumns = null === (_this$_columnHeadersV5 = this._columnHeadersView) || void 0 === _this$_columnHeadersV5 ? void 0 : _this$_columnHeadersV5.hasStickyColumns();
        const scrollable = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.getScrollable();
        if (hasStickyColumns && scrollable) {
            const $cell = (0, _renderer.default)(originalEvent.target).closest("td");
            const $nextCell = _dom.GridCoreStickyColumnsDom.getNextHeaderCell($cell, shift ? "previous" : "next");
            const isFixedCell = _dom.GridCoreStickyColumnsDom.isFixedCell($nextCell, this.addWidgetPrefix.bind(this));
            if ($nextCell.length && !isFixedCell) {
                const $cells = (0, _renderer.default)(this._columnHeadersView.getColumnElements());
                const cellIsOutsideVisibleArea = _dom.GridCoreStickyColumnsDom.isOutsideVisibleArea($nextCell, $cells, (0, _renderer.default)(this._columnHeadersView.getContent()), this.addWidgetPrefix.bind(this));
                if (cellIsOutsideVisibleArea) {
                    const scrollPadding = _dom.GridCoreStickyColumnsDom.getScrollPadding($cells, scrollable.container(), this.addWidgetPrefix.bind(this));
                    const scrollPosition = (0, _get_element_location_internal.getElementLocationInternal)($nextCell[0], "horizontal", (0, _renderer.default)(this._columnHeadersView.getContent())[0], scrollable.scrollOffset(), scrollPadding, this.addWidgetPrefix("table"));
                    scrollable.scrollTo({
                        x: scrollPosition
                    })
                }
            }
        }
    }
};
const stickyColumnsModule = exports.stickyColumnsModule = {
    extenders: {
        views: {
            columnHeadersView: columnHeadersView,
            rowsView: rowsView,
            footerView: footerView
        },
        controllers: {
            columnsResizer: columnsResizer,
            draggingHeader: draggingHeader,
            editorFactory: editorFactory,
            resizing: resizing,
            keyboardNavigation: keyboardNavigation
        }
    }
};
